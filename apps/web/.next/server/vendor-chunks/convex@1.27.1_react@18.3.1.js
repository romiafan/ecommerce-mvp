'use strict';
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = 'vendor-chunks/convex@1.27.1_react@18.3.1';
exports.ids = ['vendor-chunks/convex@1.27.1_react@18.3.1'];
exports.modules = {
  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/http_client.js':
    /*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/http_client.js ***!
  \***************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexHttpClient: () => (/* binding */ ConvexHttpClient),\n/* harmony export */   STATUS_CODE_BAD_REQUEST: () => (/* binding */ STATUS_CODE_BAD_REQUEST),\n/* harmony export */   STATUS_CODE_OK: () => (/* binding */ STATUS_CODE_OK),\n/* harmony export */   STATUS_CODE_UDF_FAILED: () => (/* binding */ STATUS_CODE_UDF_FAILED),\n/* harmony export */   setFetch: () => (/* binding */ setFetch)\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/api.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logging.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/logging.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\n\n\nconst STATUS_CODE_OK = 200;\nconst STATUS_CODE_BAD_REQUEST = 400;\nconst STATUS_CODE_UDF_FAILED = 560;\nlet specifiedFetch = void 0;\nfunction setFetch(f) {\n    specifiedFetch = f;\n}\nclass ConvexHttpClient {\n    /**\n   * Create a new {@link ConvexHttpClient}.\n   *\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - An object of options.\n   * - `skipConvexDeploymentUrlCheck` - Skip validating that the Convex deployment URL looks like\n   * `https://happy-animal-123.convex.cloud` or localhost. This can be useful if running a self-hosted\n   * Convex backend that uses a different URL.\n   * - `logger` - A logger or a boolean. If not provided, logs to the console.\n   * You can construct your own logger to customize logging to log elsewhere\n   * or not log at all, or use `false` as a shorthand for a no-op logger.\n   * A logger is an object with 4 methods: log(), warn(), error(), and logVerbose().\n   * These methods can receive multiple arguments of any types, like console.log().\n   * - `auth` - A JWT containing identity claims accessible in Convex functions.\n   * This identity may expire so it may be necessary to call `setAuth()` later,\n   * but for short-lived clients it\'s convenient to specify this value here.\n   */ constructor(address, options){\n        __publicField(this, "address");\n        __publicField(this, "auth");\n        __publicField(this, "adminAuth");\n        __publicField(this, "encodedTsPromise");\n        __publicField(this, "debug");\n        __publicField(this, "fetchOptions");\n        __publicField(this, "logger");\n        __publicField(this, "mutationQueue", []);\n        __publicField(this, "isProcessingQueue", false);\n        if (typeof options === "boolean") {\n            throw new Error("skipConvexDeploymentUrlCheck as the second argument is no longer supported. Please pass an options object, `{ skipConvexDeploymentUrlCheck: true }`.");\n        }\n        const opts = options ?? {};\n        if (opts.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.validateDeploymentUrl)(address);\n        }\n        this.logger = options?.logger === false ? (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.instantiateNoopLogger)({\n            verbose: false\n        }) : options?.logger !== true && options?.logger ? options.logger : (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.instantiateDefaultLogger)({\n            verbose: false\n        });\n        this.address = address;\n        this.debug = true;\n        this.auth = void 0;\n        this.adminAuth = void 0;\n        if (options?.auth) {\n            this.setAuth(options.auth);\n        }\n    }\n    /**\n   * Obtain the {@link ConvexHttpClient}\'s URL to its backend.\n   * @deprecated Use url, which returns the url without /api at the end.\n   *\n   * @returns The URL to the Convex backend, including the client\'s API version.\n   */ backendUrl() {\n        return `${this.address}/api`;\n    }\n    /**\n   * Return the address for this client, useful for creating a new client.\n   *\n   * Not guaranteed to match the address with which this client was constructed:\n   * it may be canonicalized.\n   */ get url() {\n        return this.address;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   *\n   * Should be called whenever the token changes (i.e. due to expiration and refresh).\n   *\n   * @param value - JWT-encoded OpenID Connect identity token.\n   */ setAuth(value) {\n        this.clearAuth();\n        this.auth = value;\n    }\n    /**\n   * Set admin auth token to allow calling internal queries, mutations, and actions\n   * and acting as an identity.\n   *\n   * @internal\n   */ setAdminAuth(token, actingAsIdentity) {\n        this.clearAuth();\n        if (actingAsIdentity !== void 0) {\n            const bytes = new TextEncoder().encode(JSON.stringify(actingAsIdentity));\n            const actingAsIdentityEncoded = btoa(String.fromCodePoint(...bytes));\n            this.adminAuth = `${token}:${actingAsIdentityEncoded}`;\n        } else {\n            this.adminAuth = token;\n        }\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.auth = void 0;\n        this.adminAuth = void 0;\n    }\n    /**\n   * Sets whether the result log lines should be printed on the console or not.\n   *\n   * @internal\n   */ setDebug(debug) {\n        this.debug = debug;\n    }\n    /**\n   * Used to customize the fetch behavior in some runtimes.\n   *\n   * @internal\n   */ setFetchOptions(fetchOptions) {\n        this.fetchOptions = fetchOptions;\n    }\n    /**\n   * This API is experimental: it may change or disappear.\n   *\n   * Execute a Convex query function at the same timestamp as every other\n   * consistent query execution run by this HTTP client.\n   *\n   * This doesn\'t make sense for long-lived ConvexHttpClients as Convex\n   * backends can read a limited amount into the past: beyond 30 seconds\n   * in the past may not be available.\n   *\n   * Create a new client to use a consistent time.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query\'s result.\n   *\n   * @deprecated This API is experimental: it may change or disappear.\n   */ async consistentQuery(query, ...args) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const timestampPromise = this.getTimestamp();\n        return await this.queryInner(query, queryArgs, {\n            timestampPromise\n        });\n    }\n    async getTimestamp() {\n        if (this.encodedTsPromise) {\n            return this.encodedTsPromise;\n        }\n        return this.encodedTsPromise = this.getTimestampInner();\n    }\n    async getTimestampInner() {\n        const localFetch = specifiedFetch || fetch;\n        const headers = {\n            "Content-Type": "application/json",\n            "Convex-Client": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        const response = await localFetch(`${this.address}/api/query_ts`, {\n            ...this.fetchOptions,\n            method: "POST",\n            headers\n        });\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n        const { ts } = await response.json();\n        return ts;\n    }\n    /**\n   * Execute a Convex query function.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query\'s result.\n   */ async query(query, ...args) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        return await this.queryInner(query, queryArgs, {});\n    }\n    async queryInner(query, queryArgs, options) {\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const args = [\n            (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(queryArgs)\n        ];\n        const headers = {\n            "Content-Type": "application/json",\n            "Convex-Client": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers["Authorization"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers["Authorization"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const timestamp = options.timestampPromise ? await options.timestampPromise : void 0;\n        const body = JSON.stringify({\n            path: name,\n            format: "convex_encoded_json",\n            args,\n            ...timestamp ? {\n                ts: timestamp\n            } : {}\n        });\n        const endpoint = timestamp ? `${this.address}/api/query_at_ts` : `${this.address}/api/query`;\n        const response = await localFetch(endpoint, {\n            ...this.fetchOptions,\n            body,\n            method: "POST",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, "info", "query", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case "success":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case "error":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n    async mutationInner(mutation, mutationArgs) {\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(mutation);\n        const body = JSON.stringify({\n            path: name,\n            format: "convex_encoded_json",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(mutationArgs)\n            ]\n        });\n        const headers = {\n            "Content-Type": "application/json",\n            "Convex-Client": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers["Authorization"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers["Authorization"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(`${this.address}/api/mutation`, {\n            ...this.fetchOptions,\n            body,\n            method: "POST",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, "info", "mutation", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case "success":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case "error":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n    async processMutationQueue() {\n        if (this.isProcessingQueue) {\n            return;\n        }\n        this.isProcessingQueue = true;\n        while(this.mutationQueue.length > 0){\n            const { mutation, args, resolve, reject } = this.mutationQueue.shift();\n            try {\n                const result = await this.mutationInner(mutation, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        }\n        this.isProcessingQueue = false;\n    }\n    enqueueMutation(mutation, args) {\n        return new Promise((resolve, reject)=>{\n            this.mutationQueue.push({\n                mutation,\n                args,\n                resolve,\n                reject\n            });\n            void this.processMutationQueue();\n        });\n    }\n    /**\n   * Execute a Convex mutation function. Mutations are queued by default.\n   *\n   * @param name - The name of the mutation.\n   * @param args - The arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - An optional object containing\n   * @returns A promise of the mutation\'s result.\n   */ async mutation(mutation, ...args) {\n        const [fnArgs, options] = args;\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(fnArgs);\n        const queued = !options?.skipQueue;\n        if (queued) {\n            return await this.enqueueMutation(mutation, mutationArgs);\n        } else {\n            return await this.mutationInner(mutation, mutationArgs);\n        }\n    }\n    /**\n   * Execute a Convex action function. Actions are not queued.\n   *\n   * @param name - The name of the action.\n   * @param args - The arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action\'s result.\n   */ async action(action, ...args) {\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(action);\n        const body = JSON.stringify({\n            path: name,\n            format: "convex_encoded_json",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(actionArgs)\n            ]\n        });\n        const headers = {\n            "Content-Type": "application/json",\n            "Convex-Client": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers["Authorization"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers["Authorization"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(`${this.address}/api/action`, {\n            ...this.fetchOptions,\n            body,\n            method: "POST",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, "info", "action", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case "success":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case "error":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n    /**\n   * Execute a Convex function of an unknown type. These function calls are not queued.\n   *\n   * @param name - The name of the function.\n   * @param args - The arguments object for the function. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the function\'s result.\n   *\n   * @internal\n   */ async function(anyFunction, componentPath, ...args) {\n        const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = typeof anyFunction === "string" ? anyFunction : (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(anyFunction);\n        const body = JSON.stringify({\n            componentPath,\n            path: name,\n            format: "convex_encoded_json",\n            args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(functionArgs)\n        });\n        const headers = {\n            "Content-Type": "application/json",\n            "Convex-Client": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers["Authorization"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers["Authorization"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(`${this.address}/api/function`, {\n            ...this.fetchOptions,\n            body,\n            method: "POST",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, "info", "any", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case "success":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case "error":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n}\nfunction forwardErrorData(errorData, error) {\n    error.data = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(errorData);\n    return error;\n} //# sourceMappingURL=http_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/http_client.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/index.js':
    /*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/index.js ***!
  \*********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: () => (/* reexport safe */ _sync_client_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient),\n/* harmony export */   ConvexClient: () => (/* reexport safe */ _simple_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexClient),\n/* harmony export */   ConvexHttpClient: () => (/* reexport safe */ _http_client_js__WEBPACK_IMPORTED_MODULE_2__.ConvexHttpClient)\n/* harmony export */ });\n/* harmony import */ var _sync_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sync/client.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/client.js");\n/* harmony import */ var _simple_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simple_client.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/simple_client.js");\n/* harmony import */ var _http_client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http_client.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/http_client.js");\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTtBQUN1QztBQUNGO0FBQ0UsQ0FDcEQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9pbmRleC5qcz82OWQyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IHsgQmFzZUNvbnZleENsaWVudCB9IGZyb20gXCIuL3N5bmMvY2xpZW50LmpzXCI7XG5leHBvcnQgeyBDb252ZXhDbGllbnQgfSBmcm9tIFwiLi9zaW1wbGVfY2xpZW50LmpzXCI7XG5leHBvcnQgeyBDb252ZXhIdHRwQ2xpZW50IH0gZnJvbSBcIi4vaHR0cF9jbGllbnQuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXhDbGllbnQiLCJDb252ZXhDbGllbnQiLCJDb252ZXhIdHRwQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/index.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/logging.js':
    /*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/logging.js ***!
  \***********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLogger: () => (/* binding */ DefaultLogger),\n/* harmony export */   createHybridErrorStacktrace: () => (/* binding */ createHybridErrorStacktrace),\n/* harmony export */   forwardData: () => (/* binding */ forwardData),\n/* harmony export */   instantiateDefaultLogger: () => (/* binding */ instantiateDefaultLogger),\n/* harmony export */   instantiateNoopLogger: () => (/* binding */ instantiateNoopLogger),\n/* harmony export */   logFatalError: () => (/* binding */ logFatalError),\n/* harmony export */   logForFunction: () => (/* binding */ logForFunction)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\nconst INFO_COLOR = "color:rgb(0, 145, 255)";\nfunction prefix_for_source(source) {\n    switch(source){\n        case "query":\n            return "Q";\n        case "mutation":\n            return "M";\n        case "action":\n            return "A";\n        case "any":\n            return "?";\n    }\n}\nclass DefaultLogger {\n    constructor(options){\n        __publicField(this, "_onLogLineFuncs");\n        __publicField(this, "_verbose");\n        this._onLogLineFuncs = {};\n        this._verbose = options.verbose;\n    }\n    addLogLineListener(func) {\n        let id = Math.random().toString(36).substring(2, 15);\n        for(let i = 0; i < 10; i++){\n            if (this._onLogLineFuncs[id] === void 0) {\n                break;\n            }\n            id = Math.random().toString(36).substring(2, 15);\n        }\n        this._onLogLineFuncs[id] = func;\n        return ()=>{\n            delete this._onLogLineFuncs[id];\n        };\n    }\n    logVerbose(...args) {\n        if (this._verbose) {\n            for (const func of Object.values(this._onLogLineFuncs)){\n                func("debug", `${/* @__PURE__ */ new Date().toISOString()}`, ...args);\n            }\n        }\n    }\n    log(...args) {\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func("info", ...args);\n        }\n    }\n    warn(...args) {\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func("warn", ...args);\n        }\n    }\n    error(...args) {\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func("error", ...args);\n        }\n    }\n}\nfunction instantiateDefaultLogger(options) {\n    const logger = new DefaultLogger(options);\n    logger.addLogLineListener((level, ...args)=>{\n        switch(level){\n            case "debug":\n                console.debug(...args);\n                break;\n            case "info":\n                console.log(...args);\n                break;\n            case "warn":\n                console.warn(...args);\n                break;\n            case "error":\n                console.error(...args);\n                break;\n            default:\n                {\n                    level;\n                    console.log(...args);\n                }\n        }\n    });\n    return logger;\n}\nfunction instantiateNoopLogger(options) {\n    return new DefaultLogger(options);\n}\nfunction logForFunction(logger, type, source, udfPath, message) {\n    const prefix = prefix_for_source(source);\n    if (typeof message === "object") {\n        message = `ConvexError ${JSON.stringify(message.errorData, null, 2)}`;\n    }\n    if (type === "info") {\n        const match = message.match(/^\\[.*?\\] /);\n        if (match === null) {\n            logger.error(`[CONVEX ${prefix}(${udfPath})] Could not parse console.log`);\n            return;\n        }\n        const level = message.slice(1, match[0].length - 2);\n        const args = message.slice(match[0].length);\n        logger.log(`%c[CONVEX ${prefix}(${udfPath})] [${level}]`, INFO_COLOR, args);\n    } else {\n        logger.error(`[CONVEX ${prefix}(${udfPath})] ${message}`);\n    }\n}\nfunction logFatalError(logger, message) {\n    const errorMessage = `[CONVEX FATAL ERROR] ${message}`;\n    logger.error(errorMessage);\n    return new Error(errorMessage);\n}\nfunction createHybridErrorStacktrace(source, udfPath, result) {\n    const prefix = prefix_for_source(source);\n    return `[CONVEX ${prefix}(${udfPath})] ${result.errorMessage}\n  Called by client`;\n}\nfunction forwardData(result, error) {\n    error.data = result.errorData;\n    return error;\n} //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/logging.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/long.js':
    /*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/long.js ***!
  \********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Long: () => (/* binding */ Long)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\nclass Long {\n    constructor(low, high){\n        __publicField(this, "low");\n        __publicField(this, "high");\n        __publicField(this, "__isUnsignedLong__");\n        this.low = low | 0;\n        this.high = high | 0;\n        this.__isUnsignedLong__ = true;\n    }\n    static isLong(obj) {\n        return (obj && obj.__isUnsignedLong__) === true;\n    }\n    // prettier-ignore\n    static fromBytesLE(bytes) {\n        return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24);\n    }\n    // prettier-ignore\n    toBytesLE() {\n        const hi = this.high;\n        const lo = this.low;\n        return [\n            lo & 255,\n            lo >>> 8 & 255,\n            lo >>> 16 & 255,\n            lo >>> 24,\n            hi & 255,\n            hi >>> 8 & 255,\n            hi >>> 16 & 255,\n            hi >>> 24\n        ];\n    }\n    static fromNumber(value) {\n        if (isNaN(value)) return UZERO;\n        if (value < 0) return UZERO;\n        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n        return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0);\n    }\n    toString() {\n        return (BigInt(this.high) * BigInt(TWO_PWR_32_DBL) + BigInt(this.low)).toString();\n    }\n    equals(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n        return this.high === other.high && this.low === other.low;\n    }\n    notEquals(other) {\n        return !this.equals(other);\n    }\n    comp(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.equals(other)) return 0;\n        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    }\n    lessThanOrEqual(other) {\n        return this.comp(/* validates */ other) <= 0;\n    }\n    static fromValue(val) {\n        if (typeof val === "number") return Long.fromNumber(val);\n        return new Long(val.low, val.high);\n    }\n}\nconst UZERO = new Long(0, 0);\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst MAX_UNSIGNED_VALUE = new Long(4294967295 | 0, 4294967295 | 0); //# sourceMappingURL=long.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9sb25nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDakcsTUFBTUs7SUFDWEMsWUFBWUMsR0FBRyxFQUFFQyxJQUFJLENBQUU7UUFDckJKLGNBQWMsSUFBSSxFQUFFO1FBQ3BCQSxjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUU7UUFDcEIsSUFBSSxDQUFDRyxHQUFHLEdBQUdBLE1BQU07UUFDakIsSUFBSSxDQUFDQyxJQUFJLEdBQUdBLE9BQU87UUFDbkIsSUFBSSxDQUFDQyxrQkFBa0IsR0FBRztJQUM1QjtJQUNBLE9BQU9DLE9BQU9aLEdBQUcsRUFBRTtRQUNqQixPQUFPLENBQUNBLE9BQU9BLElBQUlXLGtCQUFrQixNQUFNO0lBQzdDO0lBQ0Esa0JBQWtCO0lBQ2xCLE9BQU9FLFlBQVlDLEtBQUssRUFBRTtRQUN4QixPQUFPLElBQUlQLEtBQ1RPLEtBQUssQ0FBQyxFQUFFLEdBQUdBLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSUEsS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUFLQSxLQUFLLENBQUMsRUFBRSxJQUFJLElBQ3hEQSxLQUFLLENBQUMsRUFBRSxHQUFHQSxLQUFLLENBQUMsRUFBRSxJQUFJLElBQUlBLEtBQUssQ0FBQyxFQUFFLElBQUksS0FBS0EsS0FBSyxDQUFDLEVBQUUsSUFBSTtJQUU1RDtJQUNBLGtCQUFrQjtJQUNsQkMsWUFBWTtRQUNWLE1BQU1DLEtBQUssSUFBSSxDQUFDTixJQUFJO1FBQ3BCLE1BQU1PLEtBQUssSUFBSSxDQUFDUixHQUFHO1FBQ25CLE9BQU87WUFDTFEsS0FBSztZQUNMQSxPQUFPLElBQUk7WUFDWEEsT0FBTyxLQUFLO1lBQ1pBLE9BQU87WUFDUEQsS0FBSztZQUNMQSxPQUFPLElBQUk7WUFDWEEsT0FBTyxLQUFLO1lBQ1pBLE9BQU87U0FDUjtJQUNIO0lBQ0EsT0FBT0UsV0FBV2hCLEtBQUssRUFBRTtRQUN2QixJQUFJaUIsTUFBTWpCLFFBQVEsT0FBT2tCO1FBQ3pCLElBQUlsQixRQUFRLEdBQUcsT0FBT2tCO1FBQ3RCLElBQUlsQixTQUFTbUIsZ0JBQWdCLE9BQU9DO1FBQ3BDLE9BQU8sSUFBSWYsS0FBS0wsUUFBUXFCLGlCQUFpQixHQUFHckIsUUFBUXFCLGlCQUFpQjtJQUN2RTtJQUNBQyxXQUFXO1FBQ1QsT0FBTyxDQUFDQyxPQUFPLElBQUksQ0FBQ2YsSUFBSSxJQUFJZSxPQUFPRixrQkFBa0JFLE9BQU8sSUFBSSxDQUFDaEIsR0FBRyxHQUFHZSxRQUFRO0lBQ2pGO0lBQ0FFLE9BQU9DLEtBQUssRUFBRTtRQUNaLElBQUksQ0FBQ3BCLEtBQUtLLE1BQU0sQ0FBQ2UsUUFBUUEsUUFBUXBCLEtBQUtxQixTQUFTLENBQUNEO1FBQ2hELElBQUksSUFBSSxDQUFDakIsSUFBSSxLQUFLLE9BQU8sS0FBS2lCLE1BQU1qQixJQUFJLEtBQUssT0FBTyxHQUFHLE9BQU87UUFDOUQsT0FBTyxJQUFJLENBQUNBLElBQUksS0FBS2lCLE1BQU1qQixJQUFJLElBQUksSUFBSSxDQUFDRCxHQUFHLEtBQUtrQixNQUFNbEIsR0FBRztJQUMzRDtJQUNBb0IsVUFBVUYsS0FBSyxFQUFFO1FBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQ0QsTUFBTSxDQUFDQztJQUN0QjtJQUNBRyxLQUFLSCxLQUFLLEVBQUU7UUFDVixJQUFJLENBQUNwQixLQUFLSyxNQUFNLENBQUNlLFFBQVFBLFFBQVFwQixLQUFLcUIsU0FBUyxDQUFDRDtRQUNoRCxJQUFJLElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxRQUFRLE9BQU87UUFDL0IsT0FBT0EsTUFBTWpCLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQ0EsSUFBSSxLQUFLLEtBQUtpQixNQUFNakIsSUFBSSxLQUFLLElBQUksQ0FBQ0EsSUFBSSxJQUFJaUIsTUFBTWxCLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQ0EsR0FBRyxLQUFLLElBQUksQ0FBQyxJQUFJO0lBQ25IO0lBQ0FzQixnQkFBZ0JKLEtBQUssRUFBRTtRQUNyQixPQUFPLElBQUksQ0FBQ0csSUFBSSxDQUNkLGFBQWEsR0FDYkgsVUFDRztJQUNQO0lBQ0EsT0FBT0MsVUFBVUksR0FBRyxFQUFFO1FBQ3BCLElBQUksT0FBT0EsUUFBUSxVQUFVLE9BQU96QixLQUFLVyxVQUFVLENBQUNjO1FBQ3BELE9BQU8sSUFBSXpCLEtBQUt5QixJQUFJdkIsR0FBRyxFQUFFdUIsSUFBSXRCLElBQUk7SUFDbkM7QUFDRjtBQUNBLE1BQU1VLFFBQVEsSUFBSWIsS0FBSyxHQUFHO0FBQzFCLE1BQU0wQixpQkFBaUIsS0FBSztBQUM1QixNQUFNVixpQkFBaUJVLGlCQUFpQkE7QUFDeEMsTUFBTVosaUJBQWlCRSxpQkFBaUJBO0FBQ3hDLE1BQU1ELHFCQUFxQixJQUFJZixLQUFLLGFBQWEsR0FBRyxhQUFhLElBQ2pFLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvbG9uZy5qcz80NjMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbmV4cG9ydCBjbGFzcyBMb25nIHtcbiAgY29uc3RydWN0b3IobG93LCBoaWdoKSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImxvd1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGlnaFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19pc1Vuc2lnbmVkTG9uZ19fXCIpO1xuICAgIHRoaXMubG93ID0gbG93IHwgMDtcbiAgICB0aGlzLmhpZ2ggPSBoaWdoIHwgMDtcbiAgICB0aGlzLl9faXNVbnNpZ25lZExvbmdfXyA9IHRydWU7XG4gIH1cbiAgc3RhdGljIGlzTG9uZyhvYmopIHtcbiAgICByZXR1cm4gKG9iaiAmJiBvYmouX19pc1Vuc2lnbmVkTG9uZ19fKSA9PT0gdHJ1ZTtcbiAgfVxuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgc3RhdGljIGZyb21CeXRlc0xFKGJ5dGVzKSB7XG4gICAgcmV0dXJuIG5ldyBMb25nKFxuICAgICAgYnl0ZXNbMF0gfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1szXSA8PCAyNCxcbiAgICAgIGJ5dGVzWzRdIHwgYnl0ZXNbNV0gPDwgOCB8IGJ5dGVzWzZdIDw8IDE2IHwgYnl0ZXNbN10gPDwgMjRcbiAgICApO1xuICB9XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICB0b0J5dGVzTEUoKSB7XG4gICAgY29uc3QgaGkgPSB0aGlzLmhpZ2g7XG4gICAgY29uc3QgbG8gPSB0aGlzLmxvdztcbiAgICByZXR1cm4gW1xuICAgICAgbG8gJiAyNTUsXG4gICAgICBsbyA+Pj4gOCAmIDI1NSxcbiAgICAgIGxvID4+PiAxNiAmIDI1NSxcbiAgICAgIGxvID4+PiAyNCxcbiAgICAgIGhpICYgMjU1LFxuICAgICAgaGkgPj4+IDggJiAyNTUsXG4gICAgICBoaSA+Pj4gMTYgJiAyNTUsXG4gICAgICBoaSA+Pj4gMjRcbiAgICBdO1xuICB9XG4gIHN0YXRpYyBmcm9tTnVtYmVyKHZhbHVlKSB7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkgcmV0dXJuIFVaRVJPO1xuICAgIGlmICh2YWx1ZSA8IDApIHJldHVybiBVWkVSTztcbiAgICBpZiAodmFsdWUgPj0gVFdPX1BXUl82NF9EQkwpIHJldHVybiBNQVhfVU5TSUdORURfVkFMVUU7XG4gICAgcmV0dXJuIG5ldyBMb25nKHZhbHVlICUgVFdPX1BXUl8zMl9EQkwgfCAwLCB2YWx1ZSAvIFRXT19QV1JfMzJfREJMIHwgMCk7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIChCaWdJbnQodGhpcy5oaWdoKSAqIEJpZ0ludChUV09fUFdSXzMyX0RCTCkgKyBCaWdJbnQodGhpcy5sb3cpKS50b1N0cmluZygpO1xuICB9XG4gIGVxdWFscyhvdGhlcikge1xuICAgIGlmICghTG9uZy5pc0xvbmcob3RoZXIpKSBvdGhlciA9IExvbmcuZnJvbVZhbHVlKG90aGVyKTtcbiAgICBpZiAodGhpcy5oaWdoID4+PiAzMSA9PT0gMSAmJiBvdGhlci5oaWdoID4+PiAzMSA9PT0gMSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IG90aGVyLmhpZ2ggJiYgdGhpcy5sb3cgPT09IG90aGVyLmxvdztcbiAgfVxuICBub3RFcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gIXRoaXMuZXF1YWxzKG90aGVyKTtcbiAgfVxuICBjb21wKG90aGVyKSB7XG4gICAgaWYgKCFMb25nLmlzTG9uZyhvdGhlcikpIG90aGVyID0gTG9uZy5mcm9tVmFsdWUob3RoZXIpO1xuICAgIGlmICh0aGlzLmVxdWFscyhvdGhlcikpIHJldHVybiAwO1xuICAgIHJldHVybiBvdGhlci5oaWdoID4+PiAwID4gdGhpcy5oaWdoID4+PiAwIHx8IG90aGVyLmhpZ2ggPT09IHRoaXMuaGlnaCAmJiBvdGhlci5sb3cgPj4+IDAgPiB0aGlzLmxvdyA+Pj4gMCA/IC0xIDogMTtcbiAgfVxuICBsZXNzVGhhbk9yRXF1YWwob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wKFxuICAgICAgLyogdmFsaWRhdGVzICovXG4gICAgICBvdGhlclxuICAgICkgPD0gMDtcbiAgfVxuICBzdGF0aWMgZnJvbVZhbHVlKHZhbCkge1xuICAgIGlmICh0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSByZXR1cm4gTG9uZy5mcm9tTnVtYmVyKHZhbCk7XG4gICAgcmV0dXJuIG5ldyBMb25nKHZhbC5sb3csIHZhbC5oaWdoKTtcbiAgfVxufVxuY29uc3QgVVpFUk8gPSBuZXcgTG9uZygwLCAwKTtcbmNvbnN0IFRXT19QV1JfMTZfREJMID0gMSA8PCAxNjtcbmNvbnN0IFRXT19QV1JfMzJfREJMID0gVFdPX1BXUl8xNl9EQkwgKiBUV09fUFdSXzE2X0RCTDtcbmNvbnN0IFRXT19QV1JfNjRfREJMID0gVFdPX1BXUl8zMl9EQkwgKiBUV09fUFdSXzMyX0RCTDtcbmNvbnN0IE1BWF9VTlNJR05FRF9WQUxVRSA9IG5ldyBMb25nKDQyOTQ5NjcyOTUgfCAwLCA0Mjk0OTY3Mjk1IHwgMCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb25nLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiTG9uZyIsImNvbnN0cnVjdG9yIiwibG93IiwiaGlnaCIsIl9faXNVbnNpZ25lZExvbmdfXyIsImlzTG9uZyIsImZyb21CeXRlc0xFIiwiYnl0ZXMiLCJ0b0J5dGVzTEUiLCJoaSIsImxvIiwiZnJvbU51bWJlciIsImlzTmFOIiwiVVpFUk8iLCJUV09fUFdSXzY0X0RCTCIsIk1BWF9VTlNJR05FRF9WQUxVRSIsIlRXT19QV1JfMzJfREJMIiwidG9TdHJpbmciLCJCaWdJbnQiLCJlcXVhbHMiLCJvdGhlciIsImZyb21WYWx1ZSIsIm5vdEVxdWFscyIsImNvbXAiLCJsZXNzVGhhbk9yRXF1YWwiLCJ2YWwiLCJUV09fUFdSXzE2X0RCTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/long.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/simple_client.js':
    /*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/simple_client.js ***!
  \*****************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexClient: () => (/* binding */ ConvexClient),\n/* harmony export */   setDefaultWebSocketConstructor: () => (/* binding */ setDefaultWebSocketConstructor)\n/* harmony export */ });\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/index.js");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\nlet defaultWebSocketConstructor;\nfunction setDefaultWebSocketConstructor(ws) {\n    defaultWebSocketConstructor = ws;\n}\nclass ConvexClient {\n    /**\n   * Construct a client and immediately initiate a WebSocket connection to the passed address.\n   *\n   * @public\n   */ constructor(address, options = {}){\n        __publicField(this, "listeners");\n        __publicField(this, "_client");\n        // A synthetic server event to run callbacks the first time\n        __publicField(this, "callNewListenersWithCurrentValuesTimer");\n        __publicField(this, "_closed");\n        __publicField(this, "_disabled");\n        if (options.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_0__.validateDeploymentUrl)(address);\n        }\n        const { disabled, ...baseOptions } = options;\n        this._closed = false;\n        this._disabled = !!disabled;\n        if (defaultWebSocketConstructor && !("webSocketConstructor" in baseOptions) && typeof WebSocket === "undefined") {\n            baseOptions.webSocketConstructor = defaultWebSocketConstructor;\n        }\n        if ( true && !("unsavedChangesWarning" in baseOptions)) {\n            baseOptions.unsavedChangesWarning = false;\n        }\n        if (!this.disabled) {\n            this._client = new _index_js__WEBPACK_IMPORTED_MODULE_1__.BaseConvexClient(address, (updatedQueries)=>this._transition(updatedQueries), baseOptions);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    /**\n   * Once closed no registered callbacks will fire again.\n   */ get closed() {\n        return this._closed;\n    }\n    get client() {\n        if (this._client) return this._client;\n        throw new Error("ConvexClient is disabled");\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n   * Call a callback whenever a new result for a query is received. The callback\n   * will run soon after being registered if a result for the query is already\n   * in memory.\n   *\n   * The return value is an {@link Unsubscribe} object which is both a function\n   * an an object with properties. Both of the patterns below work with this object:\n   *\n   *```ts\n   * // call the return value as a function\n   * const unsubscribe = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   * unsubscribe();\n   *\n   * // unpack the return value into its properties\n   * const {\n   *   getCurrentValue,\n   *   unsubscribe,\n   * } = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   *```\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - The arguments to run the query with.\n   * @param callback - Function to call when the query result updates.\n   * @param onError - Function to call when the query result updates with an error.\n   * If not provided, errors will be thrown instead of calling the callback.\n   *\n   * @return an {@link Unsubscribe} function to stop calling the onUpdate function.\n   */ onUpdate(query, args, callback, onError) {\n        if (this.disabled) {\n            const disabledUnsubscribe = ()=>{};\n            const unsubscribeProps2 = {\n                unsubscribe: disabledUnsubscribe,\n                getCurrentValue: ()=>void 0,\n                getQueryLogs: ()=>void 0\n            };\n            Object.assign(disabledUnsubscribe, unsubscribeProps2);\n            return disabledUnsubscribe;\n        }\n        const { queryToken, unsubscribe } = this.client.subscribe((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        const queryInfo = {\n            queryToken,\n            callback,\n            onError,\n            unsubscribe,\n            hasEverRun: false,\n            query,\n            args\n        };\n        this.listeners.add(queryInfo);\n        if (this.queryResultReady(queryToken) && this.callNewListenersWithCurrentValuesTimer === void 0) {\n            this.callNewListenersWithCurrentValuesTimer = setTimeout(()=>this.callNewListenersWithCurrentValues(), 0);\n        }\n        const unsubscribeProps = {\n            unsubscribe: ()=>{\n                if (this.closed) {\n                    return;\n                }\n                this.listeners.delete(queryInfo);\n                unsubscribe();\n            },\n            getCurrentValue: ()=>this.client.localQueryResultByToken(queryToken),\n            getQueryLogs: ()=>this.client.localQueryLogs(queryToken)\n        };\n        const ret = unsubscribeProps.unsubscribe;\n        Object.assign(ret, unsubscribeProps);\n        return ret;\n    }\n    // Run all callbacks that have never been run before if they have a query\n    // result available now.\n    callNewListenersWithCurrentValues() {\n        this.callNewListenersWithCurrentValuesTimer = void 0;\n        this._transition([], true);\n    }\n    queryResultReady(queryToken) {\n        return this.client.hasLocalQueryResultByToken(queryToken);\n    }\n    async close() {\n        if (this.disabled) return;\n        this.listeners.clear();\n        this._closed = true;\n        return this.client.close();\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user\'s rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT (typically an OpenID Connect Identity Token)\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        if (this.disabled) return;\n        this.client.setAuth(fetchToken, onChange ?? (()=>{}));\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        if (this.closed) {\n            throw new Error("ConvexClient has already been closed.");\n        }\n        if (this.disabled) return;\n        this.client.setAdminAuth(token, identity);\n    }\n    /**\n   * @internal\n   */ _transition(updatedQueries, callNewListeners = false) {\n        for (const queryInfo of this.listeners){\n            const { callback, queryToken, onError, hasEverRun } = queryInfo;\n            if (updatedQueries.includes(queryToken) || callNewListeners && !hasEverRun && this.client.hasLocalQueryResultByToken(queryToken)) {\n                queryInfo.hasEverRun = true;\n                let newValue;\n                try {\n                    newValue = this.client.localQueryResultByToken(queryToken);\n                } catch (error) {\n                    if (!(error instanceof Error)) throw error;\n                    if (onError) {\n                        onError(error, "Second argument to onUpdate onError is reserved for later use");\n                    } else {\n                        void Promise.reject(error);\n                    }\n                    continue;\n                }\n                callback(newValue, "Second argument to onUpdate callback is reserved for later use");\n            }\n        }\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation\'s result.\n   */ async mutation(mutation, args, options) {\n        if (this.disabled) throw new Error("ConvexClient is disabled");\n        return await this.client.mutation((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(mutation), args, options);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action.\n   * @returns A promise of the action\'s result.\n   */ async action(action, args) {\n        if (this.disabled) throw new Error("ConvexClient is disabled");\n        return await this.client.action((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(action), args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query.\n   * @returns A promise of the query\'s result.\n   */ async query(query, args) {\n        if (this.disabled) throw new Error("ConvexClient is disabled");\n        const value = this.client.localQueryResult((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        if (value !== void 0) return Promise.resolve(value);\n        return new Promise((resolve, reject)=>{\n            const { unsubscribe } = this.onUpdate(query, args, (value2)=>{\n                unsubscribe();\n                resolve(value2);\n            }, (e)=>{\n                unsubscribe();\n                reject(e);\n            });\n        });\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        if (this.disabled) throw new Error("ConvexClient is disabled");\n        return this.client.connectionState();\n    }\n    /**\n   * Subscribe to the {@link ConnectionState} between the client and the Convex\n   * backend, calling a callback each time it changes.\n   *\n   * Subscribed callbacks will be called when any part of ConnectionState changes.\n   * ConnectionState may grow in future versions (e.g. to provide a array of\n   * inflight requests) in which case callbacks would be called more frequently.\n   *\n   * @returns An unsubscribe function to stop listening.\n   */ subscribeToConnectionState(cb) {\n        if (this.disabled) return ()=>{};\n        return this.client.subscribeToConnectionState(cb);\n    }\n} //# sourceMappingURL=simple_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zaW1wbGVfY2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWE7QUFDYixJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLGtCQUFrQixDQUFDQyxLQUFLQyxLQUFLQyxRQUFVRCxPQUFPRCxNQUFNSixVQUFVSSxLQUFLQyxLQUFLO1FBQUVFLFlBQVk7UUFBTUMsY0FBYztRQUFNQyxVQUFVO1FBQU1IO0lBQU0sS0FBS0YsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO0FBQzFKLElBQUlJLGdCQUFnQixDQUFDTixLQUFLQyxLQUFLQyxRQUFVSCxnQkFBZ0JDLEtBQUssT0FBT0MsUUFBUSxXQUFXQSxNQUFNLEtBQUtBLEtBQUtDO0FBQzdDO0FBR3ZDO0FBQytCO0FBQ25ELElBQUlRO0FBQ0csU0FBU0MsK0JBQStCQyxFQUFFO0lBQy9DRiw4QkFBOEJFO0FBQ2hDO0FBQ08sTUFBTUM7SUFDWDs7OztHQUlDLEdBQ0RDLFlBQVlDLE9BQU8sRUFBRUMsVUFBVSxDQUFDLENBQUMsQ0FBRTtRQUNqQ1YsY0FBYyxJQUFJLEVBQUU7UUFDcEJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCLDJEQUEyRDtRQUMzREEsY0FBYyxJQUFJLEVBQUU7UUFDcEJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCQSxjQUFjLElBQUksRUFBRTtRQUNwQixJQUFJVSxRQUFRQyw0QkFBNEIsS0FBSyxNQUFNO1lBQ2pEVix1RUFBcUJBLENBQUNRO1FBQ3hCO1FBQ0EsTUFBTSxFQUFFRyxRQUFRLEVBQUUsR0FBR0MsYUFBYSxHQUFHSDtRQUNyQyxJQUFJLENBQUNJLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0MsU0FBUyxHQUFHLENBQUMsQ0FBQ0g7UUFDbkIsSUFBSVIsK0JBQStCLENBQUUsMkJBQTBCUyxXQUFVLEtBQU0sT0FB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QUFJLENBQUNELE1BQU0sQ0FBQ2dELGVBQWU7SUFDcEM7SUFDQTs7Ozs7Ozs7O0dBU0MsR0FDREMsMkJBQTJCQyxFQUFFLEVBQUU7UUFDN0IsSUFBSSxJQUFJLENBQUMvRCxRQUFRLEVBQUUsT0FBTyxLQUMxQjtRQUNBLE9BQU8sSUFBSSxDQUFDYSxNQUFNLENBQUNpRCwwQkFBMEIsQ0FBQ0M7SUFDaEQ7QUFDRixFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc2ltcGxlX2NsaWVudC5qcz9lZDczIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbmltcG9ydCB7IHZhbGlkYXRlRGVwbG95bWVudFVybCB9IGZyb20gXCIuLi9jb21tb24vaW5kZXguanNcIjtcbmltcG9ydCB7XG4gIEJhc2VDb252ZXhDbGllbnRcbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7IGdldEZ1bmN0aW9uTmFtZSB9IGZyb20gXCIuLi9zZXJ2ZXIvYXBpLmpzXCI7XG5sZXQgZGVmYXVsdFdlYlNvY2tldENvbnN0cnVjdG9yO1xuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRXZWJTb2NrZXRDb25zdHJ1Y3Rvcih3cykge1xuICBkZWZhdWx0V2ViU29ja2V0Q29uc3RydWN0b3IgPSB3cztcbn1cbmV4cG9ydCBjbGFzcyBDb252ZXhDbGllbnQge1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgY2xpZW50IGFuZCBpbW1lZGlhdGVseSBpbml0aWF0ZSBhIFdlYlNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBwYXNzZWQgYWRkcmVzcy5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3IoYWRkcmVzcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImxpc3RlbmVyc1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX2NsaWVudFwiKTtcbiAgICAvLyBBIHN5bnRoZXRpYyBzZXJ2ZXIgZXZlbnQgdG8gcnVuIGNhbGxiYWNrcyB0aGUgZmlyc3QgdGltZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXNUaW1lclwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX2Nsb3NlZFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX2Rpc2FibGVkXCIpO1xuICAgIGlmIChvcHRpb25zLnNraXBDb252ZXhEZXBsb3ltZW50VXJsQ2hlY2sgIT09IHRydWUpIHtcbiAgICAgIHZhbGlkYXRlRGVwbG95bWVudFVybChhZGRyZXNzKTtcbiAgICB9XG4gICAgY29uc3QgeyBkaXNhYmxlZCwgLi4uYmFzZU9wdGlvbnMgfSA9IG9wdGlvbnM7XG4gICAgdGhpcy5fY2xvc2VkID0gZmFsc2U7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSAhIWRpc2FibGVkO1xuICAgIGlmIChkZWZhdWx0V2ViU29ja2V0Q29uc3RydWN0b3IgJiYgIShcIndlYlNvY2tldENvbnN0cnVjdG9yXCIgaW4gYmFzZU9wdGlvbnMpICYmIHR5cGVvZiBXZWJTb2NrZXQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGJhc2VPcHRpb25zLndlYlNvY2tldENvbnN0cnVjdG9yID0gZGVmYXVsdFdlYlNvY2tldENvbnN0cnVjdG9yO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiAmJiAhKFwidW5zYXZlZENoYW5nZXNXYXJuaW5nXCIgaW4gYmFzZU9wdGlvbnMpKSB7XG4gICAgICBiYXNlT3B0aW9ucy51bnNhdmVkQ2hhbmdlc1dhcm5pbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLl9jbGllbnQgPSBuZXcgQmFzZUNvbnZleENsaWVudChcbiAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgKHVwZGF0ZWRRdWVyaWVzKSA9PiB0aGlzLl90cmFuc2l0aW9uKHVwZGF0ZWRRdWVyaWVzKSxcbiAgICAgICAgYmFzZU9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgfVxuICAvKipcbiAgICogT25jZSBjbG9zZWQgbm8gcmVnaXN0ZXJlZCBjYWxsYmFja3Mgd2lsbCBmaXJlIGFnYWluLlxuICAgKi9cbiAgZ2V0IGNsb3NlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2xvc2VkO1xuICB9XG4gIGdldCBjbGllbnQoKSB7XG4gICAgaWYgKHRoaXMuX2NsaWVudCkgcmV0dXJuIHRoaXMuX2NsaWVudDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb252ZXhDbGllbnQgaXMgZGlzYWJsZWRcIik7XG4gIH1cbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBhIGNhbGxiYWNrIHdoZW5ldmVyIGEgbmV3IHJlc3VsdCBmb3IgYSBxdWVyeSBpcyByZWNlaXZlZC4gVGhlIGNhbGxiYWNrXG4gICAqIHdpbGwgcnVuIHNvb24gYWZ0ZXIgYmVpbmcgcmVnaXN0ZXJlZCBpZiBhIHJlc3VsdCBmb3IgdGhlIHF1ZXJ5IGlzIGFscmVhZHlcbiAgICogaW4gbWVtb3J5LlxuICAgKlxuICAgKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGFuIHtAbGluayBVbnN1YnNjcmliZX0gb2JqZWN0IHdoaWNoIGlzIGJvdGggYSBmdW5jdGlvblxuICAgKiBhbiBhbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzLiBCb3RoIG9mIHRoZSBwYXR0ZXJucyBiZWxvdyB3b3JrIHdpdGggdGhpcyBvYmplY3Q6XG4gICAqXG4gICAqYGBgdHNcbiAgICogLy8gY2FsbCB0aGUgcmV0dXJuIHZhbHVlIGFzIGEgZnVuY3Rpb25cbiAgICogY29uc3QgdW5zdWJzY3JpYmUgPSBjbGllbnQub25VcGRhdGUoYXBpLm1lc3NhZ2VzLmxpc3QsIHt9LCAobWVzc2FnZXMpID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhtZXNzYWdlcyk7XG4gICAqIH0pO1xuICAgKiB1bnN1YnNjcmliZSgpO1xuICAgKlxuICAgKiAvLyB1bnBhY2sgdGhlIHJldHVybiB2YWx1ZSBpbnRvIGl0cyBwcm9wZXJ0aWVzXG4gICAqIGNvbnN0IHtcbiAgICogICBnZXRDdXJyZW50VmFsdWUsXG4gICAqICAgdW5zdWJzY3JpYmUsXG4gICAqIH0gPSBjbGllbnQub25VcGRhdGUoYXBpLm1lc3NhZ2VzLmxpc3QsIHt9LCAobWVzc2FnZXMpID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhtZXNzYWdlcyk7XG4gICAqIH0pO1xuICAgKmBgYFxuICAgKlxuICAgKiBAcGFyYW0gcXVlcnkgLSBBIHtAbGluayBzZXJ2ZXIuRnVuY3Rpb25SZWZlcmVuY2V9IGZvciB0aGUgcHVibGljIHF1ZXJ5IHRvIHJ1bi5cbiAgICogQHBhcmFtIGFyZ3MgLSBUaGUgYXJndW1lbnRzIHRvIHJ1biB0aGUgcXVlcnkgd2l0aC5cbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBxdWVyeSByZXN1bHQgdXBkYXRlcy5cbiAgICogQHBhcmFtIG9uRXJyb3IgLSBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHF1ZXJ5IHJlc3VsdCB1cGRhdGVzIHdpdGggYW4gZXJyb3IuXG4gICAqIElmIG5vdCBwcm92aWRlZCwgZXJyb3JzIHdpbGwgYmUgdGhyb3duIGluc3RlYWQgb2YgY2FsbGluZyB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIEByZXR1cm4gYW4ge0BsaW5rIFVuc3Vic2NyaWJlfSBmdW5jdGlvbiB0byBzdG9wIGNhbGxpbmcgdGhlIG9uVXBkYXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgb25VcGRhdGUocXVlcnksIGFyZ3MsIGNhbGxiYWNrLCBvbkVycm9yKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIGNvbnN0IGRpc2FibGVkVW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICB9O1xuICAgICAgY29uc3QgdW5zdWJzY3JpYmVQcm9wczIgPSB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiBkaXNhYmxlZFVuc3Vic2NyaWJlLFxuICAgICAgICBnZXRDdXJyZW50VmFsdWU6ICgpID0+IHZvaWQgMCxcbiAgICAgICAgZ2V0UXVlcnlMb2dzOiAoKSA9PiB2b2lkIDBcbiAgICAgIH07XG4gICAgICBPYmplY3QuYXNzaWduKGRpc2FibGVkVW5zdWJzY3JpYmUsIHVuc3Vic2NyaWJlUHJvcHMyKTtcbiAgICAgIHJldHVybiBkaXNhYmxlZFVuc3Vic2NyaWJlO1xuICAgIH1cbiAgICBjb25zdCB7IHF1ZXJ5VG9rZW4sIHVuc3Vic2NyaWJlIH0gPSB0aGlzLmNsaWVudC5zdWJzY3JpYmUoXG4gICAgICBnZXRGdW5jdGlvbk5hbWUocXVlcnkpLFxuICAgICAgYXJnc1xuICAgICk7XG4gICAgY29uc3QgcXVlcnlJbmZvID0ge1xuICAgICAgcXVlcnlUb2tlbixcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgb25FcnJvcixcbiAgICAgIHVuc3Vic2NyaWJlLFxuICAgICAgaGFzRXZlclJ1bjogZmFsc2UsXG4gICAgICBxdWVyeSxcbiAgICAgIGFyZ3NcbiAgICB9O1xuICAgIHRoaXMubGlzdGVuZXJzLmFkZChxdWVyeUluZm8pO1xuICAgIGlmICh0aGlzLnF1ZXJ5UmVzdWx0UmVhZHkocXVlcnlUb2tlbikgJiYgdGhpcy5jYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXNUaW1lciA9PT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLmNhbGxOZXdMaXN0ZW5lcnNXaXRoQ3VycmVudFZhbHVlc1RpbWVyID0gc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4gdGhpcy5jYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXMoKSxcbiAgICAgICAgMFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgdW5zdWJzY3JpYmVQcm9wcyA9IHtcbiAgICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUocXVlcnlJbmZvKTtcbiAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIH0sXG4gICAgICBnZXRDdXJyZW50VmFsdWU6ICgpID0+IHRoaXMuY2xpZW50LmxvY2FsUXVlcnlSZXN1bHRCeVRva2VuKHF1ZXJ5VG9rZW4pLFxuICAgICAgZ2V0UXVlcnlMb2dzOiAoKSA9PiB0aGlzLmNsaWVudC5sb2NhbFF1ZXJ5TG9ncyhxdWVyeVRva2VuKVxuICAgIH07XG4gICAgY29uc3QgcmV0ID0gdW5zdWJzY3JpYmVQcm9wcy51bnN1YnNjcmliZTtcbiAgICBPYmplY3QuYXNzaWduKHJldCwgdW5zdWJzY3JpYmVQcm9wcyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICAvLyBSdW4gYWxsIGNhbGxiYWNrcyB0aGF0IGhhdmUgbmV2ZXIgYmVlbiBydW4gYmVmb3JlIGlmIHRoZXkgaGF2ZSBhIHF1ZXJ5XG4gIC8vIHJlc3VsdCBhdmFpbGFibGUgbm93LlxuICBjYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXMoKSB7XG4gICAgdGhpcy5jYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXNUaW1lciA9IHZvaWQgMDtcbiAgICB0aGlzLl90cmFuc2l0aW9uKFtdLCB0cnVlKTtcbiAgfVxuICBxdWVyeVJlc3VsdFJlYWR5KHF1ZXJ5VG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuaGFzTG9jYWxRdWVyeVJlc3VsdEJ5VG9rZW4ocXVlcnlUb2tlbik7XG4gIH1cbiAgYXN5bmMgY2xvc2UoKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgIHRoaXMuX2Nsb3NlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNsb3NlKCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgYXV0aGVudGljYXRpb24gdG9rZW4gdG8gYmUgdXNlZCBmb3Igc3Vic2VxdWVudCBxdWVyaWVzIGFuZCBtdXRhdGlvbnMuXG4gICAqIGBmZXRjaFRva2VuYCB3aWxsIGJlIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGFnYWluIGlmIGEgdG9rZW4gZXhwaXJlcy5cbiAgICogYGZldGNoVG9rZW5gIHNob3VsZCByZXR1cm4gYG51bGxgIGlmIHRoZSB0b2tlbiBjYW5ub3QgYmUgcmV0cmlldmVkLCBmb3IgZXhhbXBsZVxuICAgKiB3aGVuIHRoZSB1c2VyJ3MgcmlnaHRzIHdlcmUgcGVybWFuZW50bHkgcmV2b2tlZC5cbiAgICogQHBhcmFtIGZldGNoVG9rZW4gLSBhbiBhc3luYyBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIEpXVCAodHlwaWNhbGx5IGFuIE9wZW5JRCBDb25uZWN0IElkZW50aXR5IFRva2VuKVxuICAgKiBAcGFyYW0gb25DaGFuZ2UgLSBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgYXV0aGVudGljYXRpb24gc3RhdHVzIGNoYW5nZXNcbiAgICovXG4gIHNldEF1dGgoZmV0Y2hUb2tlbiwgb25DaGFuZ2UpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgIHRoaXMuY2xpZW50LnNldEF1dGgoXG4gICAgICBmZXRjaFRva2VuLFxuICAgICAgb25DaGFuZ2UgPz8gKCgpID0+IHtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzZXRBZG1pbkF1dGgodG9rZW4sIGlkZW50aXR5KSB7XG4gICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb252ZXhDbGllbnQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQuXCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgIHRoaXMuY2xpZW50LnNldEFkbWluQXV0aCh0b2tlbiwgaWRlbnRpdHkpO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF90cmFuc2l0aW9uKHVwZGF0ZWRRdWVyaWVzLCBjYWxsTmV3TGlzdGVuZXJzID0gZmFsc2UpIHtcbiAgICBmb3IgKGNvbnN0IHF1ZXJ5SW5mbyBvZiB0aGlzLmxpc3RlbmVycykge1xuICAgICAgY29uc3QgeyBjYWxsYmFjaywgcXVlcnlUb2tlbiwgb25FcnJvciwgaGFzRXZlclJ1biB9ID0gcXVlcnlJbmZvO1xuICAgICAgaWYgKHVwZGF0ZWRRdWVyaWVzLmluY2x1ZGVzKHF1ZXJ5VG9rZW4pIHx8IGNhbGxOZXdMaXN0ZW5lcnMgJiYgIWhhc0V2ZXJSdW4gJiYgdGhpcy5jbGllbnQuaGFzTG9jYWxRdWVyeVJlc3VsdEJ5VG9rZW4ocXVlcnlUb2tlbikpIHtcbiAgICAgICAgcXVlcnlJbmZvLmhhc0V2ZXJSdW4gPSB0cnVlO1xuICAgICAgICBsZXQgbmV3VmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmNsaWVudC5sb2NhbFF1ZXJ5UmVzdWx0QnlUb2tlbihxdWVyeVRva2VuKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSkgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoXG4gICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICBcIlNlY29uZCBhcmd1bWVudCB0byBvblVwZGF0ZSBvbkVycm9yIGlzIHJlc2VydmVkIGZvciBsYXRlciB1c2VcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdm9pZCBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgIFwiU2Vjb25kIGFyZ3VtZW50IHRvIG9uVXBkYXRlIGNhbGxiYWNrIGlzIHJlc2VydmVkIGZvciBsYXRlciB1c2VcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZSBhIG11dGF0aW9uIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gbXV0YXRpb24gLSBBIHtAbGluayBzZXJ2ZXIuRnVuY3Rpb25SZWZlcmVuY2V9IGZvciB0aGUgcHVibGljIG11dGF0aW9uXG4gICAqIHRvIHJ1bi5cbiAgICogQHBhcmFtIGFyZ3MgLSBBbiBhcmd1bWVudHMgb2JqZWN0IGZvciB0aGUgbXV0YXRpb24uXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gQSB7QGxpbmsgTXV0YXRpb25PcHRpb25zfSBvcHRpb25zIG9iamVjdCBmb3IgdGhlIG11dGF0aW9uLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2Ugb2YgdGhlIG11dGF0aW9uJ3MgcmVzdWx0LlxuICAgKi9cbiAgYXN5bmMgbXV0YXRpb24obXV0YXRpb24sIGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkgdGhyb3cgbmV3IEVycm9yKFwiQ29udmV4Q2xpZW50IGlzIGRpc2FibGVkXCIpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5tdXRhdGlvbihnZXRGdW5jdGlvbk5hbWUobXV0YXRpb24pLCBhcmdzLCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZSBhbiBhY3Rpb24gZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSBhY3Rpb24gLSBBIHtAbGluayBzZXJ2ZXIuRnVuY3Rpb25SZWZlcmVuY2V9IGZvciB0aGUgcHVibGljIGFjdGlvblxuICAgKiB0byBydW4uXG4gICAqIEBwYXJhbSBhcmdzIC0gQW4gYXJndW1lbnRzIG9iamVjdCBmb3IgdGhlIGFjdGlvbi5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIG9mIHRoZSBhY3Rpb24ncyByZXN1bHQuXG4gICAqL1xuICBhc3luYyBhY3Rpb24oYWN0aW9uLCBhcmdzKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHRocm93IG5ldyBFcnJvcihcIkNvbnZleENsaWVudCBpcyBkaXNhYmxlZFwiKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuYWN0aW9uKGdldEZ1bmN0aW9uTmFtZShhY3Rpb24pLCBhcmdzKTtcbiAgfVxuICAvKipcbiAgICogRmV0Y2ggYSBxdWVyeSByZXN1bHQgb25jZS5cbiAgICpcbiAgICogQHBhcmFtIHF1ZXJ5IC0gQSB7QGxpbmsgc2VydmVyLkZ1bmN0aW9uUmVmZXJlbmNlfSBmb3IgdGhlIHB1YmxpYyBxdWVyeVxuICAgKiB0byBydW4uXG4gICAqIEBwYXJhbSBhcmdzIC0gQW4gYXJndW1lbnRzIG9iamVjdCBmb3IgdGhlIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyBBIHByb21pc2Ugb2YgdGhlIHF1ZXJ5J3MgcmVzdWx0LlxuICAgKi9cbiAgYXN5bmMgcXVlcnkocXVlcnksIGFyZ3MpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkgdGhyb3cgbmV3IEVycm9yKFwiQ29udmV4Q2xpZW50IGlzIGRpc2FibGVkXCIpO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jbGllbnQubG9jYWxRdWVyeVJlc3VsdChnZXRGdW5jdGlvbk5hbWUocXVlcnkpLCBhcmdzKTtcbiAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHsgdW5zdWJzY3JpYmUgfSA9IHRoaXMub25VcGRhdGUoXG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICBhcmdzLFxuICAgICAgICAodmFsdWUyKSA9PiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlMik7XG4gICAgICAgIH0sXG4gICAgICAgIChlKSA9PiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCB7QGxpbmsgQ29ubmVjdGlvblN0YXRlfSBiZXR3ZWVuIHRoZSBjbGllbnQgYW5kIHRoZSBDb252ZXhcbiAgICogYmFja2VuZC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIHtAbGluayBDb25uZWN0aW9uU3RhdGV9IHdpdGggdGhlIENvbnZleCBiYWNrZW5kLlxuICAgKi9cbiAgY29ubmVjdGlvblN0YXRlKCkge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKSB0aHJvdyBuZXcgRXJyb3IoXCJDb252ZXhDbGllbnQgaXMgZGlzYWJsZWRcIik7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNvbm5lY3Rpb25TdGF0ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIHtAbGluayBDb25uZWN0aW9uU3RhdGV9IGJldHdlZW4gdGhlIGNsaWVudCBhbmQgdGhlIENvbnZleFxuICAgKiBiYWNrZW5kLCBjYWxsaW5nIGEgY2FsbGJhY2sgZWFjaCB0aW1lIGl0IGNoYW5nZXMuXG4gICAqXG4gICAqIFN1YnNjcmliZWQgY2FsbGJhY2tzIHdpbGwgYmUgY2FsbGVkIHdoZW4gYW55IHBhcnQgb2YgQ29ubmVjdGlvblN0YXRlIGNoYW5nZXMuXG4gICAqIENvbm5lY3Rpb25TdGF0ZSBtYXkgZ3JvdyBpbiBmdXR1cmUgdmVyc2lvbnMgKGUuZy4gdG8gcHJvdmlkZSBhIGFycmF5IG9mXG4gICAqIGluZmxpZ2h0IHJlcXVlc3RzKSBpbiB3aGljaCBjYXNlIGNhbGxiYWNrcyB3b3VsZCBiZSBjYWxsZWQgbW9yZSBmcmVxdWVudGx5LlxuICAgKlxuICAgKiBAcmV0dXJucyBBbiB1bnN1YnNjcmliZSBmdW5jdGlvbiB0byBzdG9wIGxpc3RlbmluZy5cbiAgICovXG4gIHN1YnNjcmliZVRvQ29ubmVjdGlvblN0YXRlKGNiKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybiAoKSA9PiB7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuc3Vic2NyaWJlVG9Db25uZWN0aW9uU3RhdGUoY2IpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW1wbGVfY2xpZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwidmFsaWRhdGVEZXBsb3ltZW50VXJsIiwiQmFzZUNvbnZleENsaWVudCIsImdldEZ1bmN0aW9uTmFtZSIsImRlZmF1bHRXZWJTb2NrZXRDb25zdHJ1Y3RvciIsInNldERlZmF1bHRXZWJTb2NrZXRDb25zdHJ1Y3RvciIsIndzIiwiQ29udmV4Q2xpZW50IiwiY29uc3RydWN0b3IiLCJhZGRyZXNzIiwib3B0aW9ucyIsInNraXBDb252ZXhEZXBsb3ltZW50VXJsQ2hlY2siLCJkaXNhYmxlZCIsImJhc2VPcHRpb25zIiwiX2Nsb3NlZCIsIl9kaXNhYmxlZCIsIldlYlNvY2tldCIsIndlYlNvY2tldENvbnN0cnVjdG9yIiwidW5zYXZlZENoYW5nZXNXYXJuaW5nIiwiX2NsaWVudCIsInVwZGF0ZWRRdWVyaWVzIiwiX3RyYW5zaXRpb24iLCJsaXN0ZW5lcnMiLCJTZXQiLCJjbG9zZWQiLCJjbGllbnQiLCJFcnJvciIsIm9uVXBkYXRlIiwicXVlcnkiLCJhcmdzIiwiY2FsbGJhY2siLCJvbkVycm9yIiwiZGlzYWJsZWRVbnN1YnNjcmliZSIsInVuc3Vic2NyaWJlUHJvcHMyIiwidW5zdWJzY3JpYmUiLCJnZXRDdXJyZW50VmFsdWUiLCJnZXRRdWVyeUxvZ3MiLCJhc3NpZ24iLCJxdWVyeVRva2VuIiwic3Vic2NyaWJlIiwicXVlcnlJbmZvIiwiaGFzRXZlclJ1biIsImFkZCIsInF1ZXJ5UmVzdWx0UmVhZHkiLCJjYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXNUaW1lciIsInNldFRpbWVvdXQiLCJjYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXMiLCJ1bnN1YnNjcmliZVByb3BzIiwiZGVsZXRlIiwibG9jYWxRdWVyeVJlc3VsdEJ5VG9rZW4iLCJsb2NhbFF1ZXJ5TG9ncyIsInJldCIsImhhc0xvY2FsUXVlcnlSZXN1bHRCeVRva2VuIiwiY2xvc2UiLCJjbGVhciIsInNldEF1dGgiLCJmZXRjaFRva2VuIiwib25DaGFuZ2UiLCJzZXRBZG1pbkF1dGgiLCJ0b2tlbiIsImlkZW50aXR5IiwiY2FsbE5ld0xpc3RlbmVycyIsImluY2x1ZGVzIiwibmV3VmFsdWUiLCJlcnJvciIsIlByb21pc2UiLCJyZWplY3QiLCJtdXRhdGlvbiIsImFjdGlvbiIsImxvY2FsUXVlcnlSZXN1bHQiLCJyZXNvbHZlIiwidmFsdWUyIiwiZSIsImNvbm5lY3Rpb25TdGF0ZSIsInN1YnNjcmliZVRvQ29ubmVjdGlvblN0YXRlIiwiY2IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/simple_client.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/authentication_manager.js':
    /*!*******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/authentication_manager.js ***!
  \*******************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationManager: () => (/* binding */ AuthenticationManager)\n/* harmony export */ });\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jwt-decode */ "(ssr)/../../node_modules/.pnpm/jwt-decode@4.0.0/node_modules/jwt-decode/build/esm/index.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\nconst MAXIMUM_REFRESH_DELAY = 20 * 24 * 60 * 60 * 1e3;\nconst MAX_TOKEN_CONFIRMATION_ATTEMPTS = 2;\nclass AuthenticationManager {\n    constructor(syncState, callbacks, config){\n        __publicField(this, "authState", {\n            state: "noAuth"\n        });\n        // Used to detect races involving `setConfig` calls\n        // while a token is being fetched.\n        __publicField(this, "configVersion", 0);\n        // Shared by the BaseClient so that the auth manager can easily inspect it\n        __publicField(this, "syncState");\n        // Passed down by BaseClient, sends a message to the server\n        __publicField(this, "authenticate");\n        __publicField(this, "stopSocket");\n        __publicField(this, "tryRestartSocket");\n        __publicField(this, "pauseSocket");\n        __publicField(this, "resumeSocket");\n        // Passed down by BaseClient, sends a message to the server\n        __publicField(this, "clearAuth");\n        __publicField(this, "logger");\n        __publicField(this, "refreshTokenLeewaySeconds");\n        // Number of times we have attempted to confirm the latest token. We retry up\n        // to `MAX_TOKEN_CONFIRMATION_ATTEMPTS` times.\n        __publicField(this, "tokenConfirmationAttempts", 0);\n        this.syncState = syncState;\n        this.authenticate = callbacks.authenticate;\n        this.stopSocket = callbacks.stopSocket;\n        this.tryRestartSocket = callbacks.tryRestartSocket;\n        this.pauseSocket = callbacks.pauseSocket;\n        this.resumeSocket = callbacks.resumeSocket;\n        this.clearAuth = callbacks.clearAuth;\n        this.logger = config.logger;\n        this.refreshTokenLeewaySeconds = config.refreshTokenLeewaySeconds;\n    }\n    async setConfig(fetchToken, onChange) {\n        this.resetAuthState();\n        this._logVerbose("pausing WS for auth token fetch");\n        this.pauseSocket();\n        const token = await this.fetchTokenAndGuardAgainstRace(fetchToken, {\n            forceRefreshToken: false\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            this.setAuthState({\n                state: "waitingForServerConfirmationOfCachedToken",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                },\n                hasRetried: false\n            });\n            this.authenticate(token.value);\n        } else {\n            this.setAuthState({\n                state: "initialRefetch",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                }\n            });\n            await this.refetchToken();\n        }\n        this._logVerbose("resuming WS after auth token fetch");\n        this.resumeSocket();\n    }\n    onTransition(serverMessage) {\n        if (!this.syncState.isCurrentOrNewerAuthVersion(serverMessage.endVersion.identity)) {\n            return;\n        }\n        if (serverMessage.endVersion.identity <= serverMessage.startVersion.identity) {\n            return;\n        }\n        if (this.authState.state === "waitingForServerConfirmationOfCachedToken") {\n            this._logVerbose("server confirmed auth token is valid");\n            void this.refetchToken();\n            this.authState.config.onAuthChange(true);\n            return;\n        }\n        if (this.authState.state === "waitingForServerConfirmationOfFreshToken") {\n            this._logVerbose("server confirmed new auth token is valid");\n            this.scheduleTokenRefetch(this.authState.token);\n            this.tokenConfirmationAttempts = 0;\n            if (!this.authState.hadAuth) {\n                this.authState.config.onAuthChange(true);\n            }\n        }\n    }\n    onAuthError(serverMessage) {\n        if (serverMessage.authUpdateAttempted === false && (this.authState.state === "waitingForServerConfirmationOfFreshToken" || this.authState.state === "waitingForServerConfirmationOfCachedToken")) {\n            this._logVerbose("ignoring non-auth token expired error");\n            return;\n        }\n        const { baseVersion } = serverMessage;\n        if (!this.syncState.isCurrentOrNewerAuthVersion(baseVersion + 1)) {\n            this._logVerbose("ignoring auth error for previous auth attempt");\n            return;\n        }\n        void this.tryToReauthenticate(serverMessage);\n        return;\n    }\n    // This is similar to `refetchToken` defined below, in fact we\n    // don\'t represent them as different states, but it is different\n    // in that we pause the WebSocket so that mutations\n    // don\'t retry with bad auth.\n    async tryToReauthenticate(serverMessage) {\n        this._logVerbose(`attempting to reauthenticate: ${serverMessage.error}`);\n        if (// No way to fetch another token, kaboom\n        this.authState.state === "noAuth" || // We failed on a fresh token. After a small number of retries, we give up\n        // and clear the auth state to avoid infinite retries.\n        this.authState.state === "waitingForServerConfirmationOfFreshToken" && this.tokenConfirmationAttempts >= MAX_TOKEN_CONFIRMATION_ATTEMPTS) {\n            this.logger.error(`Failed to authenticate: "${serverMessage.error}", check your server auth config`);\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            if (this.authState.state !== "noAuth") {\n                this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n            }\n            return;\n        }\n        if (this.authState.state === "waitingForServerConfirmationOfFreshToken") {\n            this.tokenConfirmationAttempts++;\n            this._logVerbose(`retrying reauthentication, ${MAX_TOKEN_CONFIRMATION_ATTEMPTS - this.tokenConfirmationAttempts} attempts remaining`);\n        }\n        await this.stopSocket();\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value && this.syncState.isNewAuth(token.value)) {\n            this.authenticate(token.value);\n            this.setAuthState({\n                state: "waitingForServerConfirmationOfFreshToken",\n                config: this.authState.config,\n                token: token.value,\n                hadAuth: this.authState.state === "notRefetching" || this.authState.state === "waitingForScheduledRefetch"\n            });\n        } else {\n            this._logVerbose("reauthentication failed, could not fetch a new token");\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n        this.tryRestartSocket();\n    }\n    // Force refetch the token and schedule another refetch\n    // before the token expires - an active client should never\n    // need to reauthenticate.\n    async refetchToken() {\n        if (this.authState.state === "noAuth") {\n            return;\n        }\n        this._logVerbose("refetching auth token");\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            if (this.syncState.isNewAuth(token.value)) {\n                this.setAuthState({\n                    state: "waitingForServerConfirmationOfFreshToken",\n                    hadAuth: this.syncState.hasAuth(),\n                    token: token.value,\n                    config: this.authState.config\n                });\n                this.authenticate(token.value);\n            } else {\n                this.setAuthState({\n                    state: "notRefetching",\n                    config: this.authState.config\n                });\n            }\n        } else {\n            this._logVerbose("refetching token failed");\n            if (this.syncState.hasAuth()) {\n                this.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n        this._logVerbose("restarting WS after auth token fetch (if currently stopped)");\n        this.tryRestartSocket();\n    }\n    scheduleTokenRefetch(token) {\n        if (this.authState.state === "noAuth") {\n            return;\n        }\n        const decodedToken = this.decodeToken(token);\n        if (!decodedToken) {\n            this.logger.error("Auth token is not a valid JWT, cannot refetch the token");\n            return;\n        }\n        const { iat, exp } = decodedToken;\n        if (!iat || !exp) {\n            this.logger.error("Auth token does not have required fields, cannot refetch the token");\n            return;\n        }\n        const tokenValiditySeconds = exp - iat;\n        if (tokenValiditySeconds <= 2) {\n            this.logger.error("Auth token does not live long enough, cannot refetch the token");\n            return;\n        }\n        let delay = Math.min(MAXIMUM_REFRESH_DELAY, (tokenValiditySeconds - this.refreshTokenLeewaySeconds) * 1e3);\n        if (delay <= 0) {\n            this.logger.warn(`Refetching auth token immediately, configured leeway ${this.refreshTokenLeewaySeconds}s is larger than the token\'s lifetime ${tokenValiditySeconds}s`);\n            delay = 0;\n        }\n        const refetchTokenTimeoutId = setTimeout(()=>{\n            this._logVerbose("running scheduled token refetch");\n            void this.refetchToken();\n        }, delay);\n        this.setAuthState({\n            state: "waitingForScheduledRefetch",\n            refetchTokenTimeoutId,\n            config: this.authState.config\n        });\n        this._logVerbose(`scheduled preemptive auth token refetching in ${delay}ms`);\n    }\n    // Protects against simultaneous calls to `setConfig`\n    // while we\'re fetching a token\n    async fetchTokenAndGuardAgainstRace(fetchToken, fetchArgs) {\n        const originalConfigVersion = ++this.configVersion;\n        this._logVerbose(`fetching token with config version ${originalConfigVersion}`);\n        const token = await fetchToken(fetchArgs);\n        if (this.configVersion !== originalConfigVersion) {\n            this._logVerbose(`stale config version, expected ${originalConfigVersion}, got ${this.configVersion}`);\n            return {\n                isFromOutdatedConfig: true\n            };\n        }\n        return {\n            isFromOutdatedConfig: false,\n            value: token\n        };\n    }\n    stop() {\n        this.resetAuthState();\n        this.configVersion++;\n        this._logVerbose(`config version bumped to ${this.configVersion}`);\n    }\n    setAndReportAuthFailed(onAuthChange) {\n        onAuthChange(false);\n        this.resetAuthState();\n    }\n    resetAuthState() {\n        this.setAuthState({\n            state: "noAuth"\n        });\n    }\n    setAuthState(newAuth) {\n        const authStateForLog = newAuth.state === "waitingForServerConfirmationOfFreshToken" ? {\n            hadAuth: newAuth.hadAuth,\n            state: newAuth.state,\n            token: `...${newAuth.token.slice(-7)}`\n        } : {\n            state: newAuth.state\n        };\n        this._logVerbose(`setting auth state to ${JSON.stringify(authStateForLog)}`);\n        switch(newAuth.state){\n            case "waitingForScheduledRefetch":\n            case "notRefetching":\n            case "noAuth":\n                this.tokenConfirmationAttempts = 0;\n                break;\n            case "waitingForServerConfirmationOfFreshToken":\n            case "waitingForServerConfirmationOfCachedToken":\n            case "initialRefetch":\n                break;\n            default:\n                {\n                    newAuth;\n                }\n        }\n        if (this.authState.state === "waitingForScheduledRefetch") {\n            clearTimeout(this.authState.refetchTokenTimeoutId);\n            this.syncState.markAuthCompletion();\n        }\n        this.authState = newAuth;\n    }\n    decodeToken(token) {\n        try {\n            return (0,jwt_decode__WEBPACK_IMPORTED_MODULE_0__.jwtDecode)(token);\n        } catch (e) {\n            this._logVerbose(`Error decoding token: ${e instanceof Error ? e.message : "Unknown error"}`);\n            return null;\n        }\n    }\n    _logVerbose(message) {\n        this.logger.logVerbose(`${message} [v${this.configVersion}]`);\n    }\n} //# sourceMappingURL=authentication_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/authentication_manager.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/client.js':
    /*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/client.js ***!
  \***************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: () => (/* binding */ BaseConvexClient)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/logging.js");\n/* harmony import */ var _local_state_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./local_state.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/local_state.js");\n/* harmony import */ var _request_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./request_manager.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/request_manager.js");\n/* harmony import */ var _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./optimistic_updates_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js");\n/* harmony import */ var _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./remote_query_set.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/remote_query_set.js");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./udf_path_utils.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/udf_path_utils.js");\n/* harmony import */ var _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./web_socket_manager.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/web_socket_manager.js");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./session.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/session.js");\n/* harmony import */ var _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./authentication_manager.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/authentication_manager.js");\n/* harmony import */ var _metrics_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./metrics.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/metrics.js");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../values/errors.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/errors.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BaseConvexClient {\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param onTransition - A callback receiving an array of query tokens\n   * corresponding to query results that have changed -- additional handlers\n   * can be added via `addOnTransitionHandler`.\n   * @param options - See {@link BaseConvexClientOptions} for a full description.\n   */ constructor(address, onTransition, options){\n        __publicField(this, "address");\n        __publicField(this, "state");\n        __publicField(this, "requestManager");\n        __publicField(this, "webSocketManager");\n        __publicField(this, "authenticationManager");\n        __publicField(this, "remoteQuerySet");\n        __publicField(this, "optimisticQueryResults");\n        __publicField(this, "_transitionHandlerCounter", 0);\n        __publicField(this, "_nextRequestId");\n        __publicField(this, "_onTransitionFns", /* @__PURE__ */ new Map());\n        __publicField(this, "_sessionId");\n        __publicField(this, "firstMessageReceived", false);\n        __publicField(this, "debug");\n        __publicField(this, "logger");\n        __publicField(this, "maxObservedTimestamp");\n        __publicField(this, "connectionStateSubscribers", /* @__PURE__ */ new Map());\n        __publicField(this, "nextConnectionStateSubscriberId", 0);\n        __publicField(this, "_lastPublishedConnectionState");\n        /**\n     * Call this whenever the connection state may have changed in a way that could\n     * require publishing it. Schedules a possibly update.\n     */ __publicField(this, "markConnectionStateDirty", ()=>{\n            void Promise.resolve().then(()=>{\n                const curConnectionState = this.connectionState();\n                if (JSON.stringify(curConnectionState) !== JSON.stringify(this._lastPublishedConnectionState)) {\n                    this._lastPublishedConnectionState = curConnectionState;\n                    for (const cb of this.connectionStateSubscribers.values()){\n                        cb(curConnectionState);\n                    }\n                }\n            });\n        });\n        // Instance property so that `mark()` doesn\'t need to be called as a method.\n        __publicField(this, "mark", (name)=>{\n            if (this.debug) {\n                (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.mark)(name, this.sessionId);\n            }\n        });\n        if (typeof address === "object") {\n            throw new Error("Passing a ClientConfig object is no longer supported. Pass the URL of the Convex deployment as a string directly.");\n        }\n        if (options?.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.validateDeploymentUrl)(address);\n        }\n        options = {\n            ...options\n        };\n        const authRefreshTokenLeewaySeconds = options.authRefreshTokenLeewaySeconds ?? 2;\n        let webSocketConstructor = options.webSocketConstructor;\n        if (!webSocketConstructor && typeof WebSocket === "undefined") {\n            throw new Error("No WebSocket global variable defined! To use Convex in an environment without WebSocket try the HTTP client: https://docs.convex.dev/api/classes/browser.ConvexHttpClient");\n        }\n        webSocketConstructor = webSocketConstructor || WebSocket;\n        this.debug = options.reportDebugInfoToConvex ?? false;\n        this.address = address;\n        this.logger = options.logger === false ? (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.instantiateNoopLogger)({\n            verbose: options.verbose ?? false\n        }) : options.logger !== true && options.logger ? options.logger : (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.instantiateDefaultLogger)({\n            verbose: options.verbose ?? false\n        });\n        const i = address.search("://");\n        if (i === -1) {\n            throw new Error("Provided address was not an absolute URL.");\n        }\n        const origin = address.substring(i + 3);\n        const protocol = address.substring(0, i);\n        let wsProtocol;\n        if (protocol === "http") {\n            wsProtocol = "ws";\n        } else if (protocol === "https") {\n            wsProtocol = "wss";\n        } else {\n            throw new Error(`Unknown parent protocol ${protocol}`);\n        }\n        const wsUri = `${wsProtocol}://${origin}/api/${_index_js__WEBPACK_IMPORTED_MODULE_0__.version}/sync`;\n        this.state = new _local_state_js__WEBPACK_IMPORTED_MODULE_3__.LocalSyncState();\n        this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId), this.logger);\n        this.requestManager = new _request_manager_js__WEBPACK_IMPORTED_MODULE_4__.RequestManager(this.logger, this.markConnectionStateDirty);\n        const pauseSocket = ()=>{\n            this.webSocketManager.pause();\n            this.state.pause();\n        };\n        this.authenticationManager = new _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__.AuthenticationManager(this.state, {\n            authenticate: (token)=>{\n                const message = this.state.setAuth(token);\n                this.webSocketManager.sendMessage(message);\n                return message.baseVersion;\n            },\n            stopSocket: ()=>this.webSocketManager.stop(),\n            tryRestartSocket: ()=>this.webSocketManager.tryRestart(),\n            pauseSocket,\n            resumeSocket: ()=>this.webSocketManager.resume(),\n            clearAuth: ()=>{\n                this.clearAuth();\n            }\n        }, {\n            logger: this.logger,\n            refreshTokenLeewaySeconds: authRefreshTokenLeewaySeconds\n        });\n        this.optimisticQueryResults = new _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__.OptimisticQueryResults();\n        this.addOnTransitionHandler((transition)=>{\n            onTransition(transition.queries.map((q)=>q.token));\n        });\n        this._nextRequestId = 0;\n        this._sessionId = (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.newSessionId)();\n        const { unsavedChangesWarning } = options;\n        if (true) {\n            if (unsavedChangesWarning === true) {\n                throw new Error("unsavedChangesWarning requested, but window.addEventListener not found! Remove {unsavedChangesWarning: true} from Convex client options.");\n            }\n        } else {}\n        this.webSocketManager = new _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__.WebSocketManager(wsUri, {\n            onOpen: (reconnectMetadata)=>{\n                this.mark("convexWebSocketOpen");\n                this.webSocketManager.sendMessage({\n                    ...reconnectMetadata,\n                    type: "Connect",\n                    sessionId: this._sessionId,\n                    maxObservedTimestamp: this.maxObservedTimestamp\n                });\n                const oldRemoteQueryResults = new Set(this.remoteQuerySet.remoteQueryResults().keys());\n                this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId), this.logger);\n                const [querySetModification, authModification] = this.state.restart(oldRemoteQueryResults);\n                if (authModification) {\n                    this.webSocketManager.sendMessage(authModification);\n                }\n                this.webSocketManager.sendMessage(querySetModification);\n                for (const message of this.requestManager.restart()){\n                    this.webSocketManager.sendMessage(message);\n                }\n            },\n            onResume: ()=>{\n                const [querySetModification, authModification] = this.state.resume();\n                if (authModification) {\n                    this.webSocketManager.sendMessage(authModification);\n                }\n                if (querySetModification) {\n                    this.webSocketManager.sendMessage(querySetModification);\n                }\n                for (const message of this.requestManager.resume()){\n                    this.webSocketManager.sendMessage(message);\n                }\n            },\n            onMessage: (serverMessage)=>{\n                if (!this.firstMessageReceived) {\n                    this.firstMessageReceived = true;\n                    this.mark("convexFirstMessageReceived");\n                    this.reportMarks();\n                }\n                switch(serverMessage.type){\n                    case "Transition":\n                        {\n                            this.observedTimestamp(serverMessage.endVersion.ts);\n                            this.authenticationManager.onTransition(serverMessage);\n                            this.remoteQuerySet.transition(serverMessage);\n                            this.state.transition(serverMessage);\n                            const completedRequests = this.requestManager.removeCompleted(this.remoteQuerySet.timestamp());\n                            this.notifyOnQueryResultChanges(completedRequests);\n                            break;\n                        }\n                    case "MutationResponse":\n                        {\n                            if (serverMessage.success) {\n                                this.observedTimestamp(serverMessage.ts);\n                            }\n                            const completedMutationInfo = this.requestManager.onResponse(serverMessage);\n                            if (completedMutationInfo !== null) {\n                                this.notifyOnQueryResultChanges(/* @__PURE__ */ new Map([\n                                    [\n                                        completedMutationInfo.requestId,\n                                        completedMutationInfo.result\n                                    ]\n                                ]));\n                            }\n                            break;\n                        }\n                    case "ActionResponse":\n                        {\n                            this.requestManager.onResponse(serverMessage);\n                            break;\n                        }\n                    case "AuthError":\n                        {\n                            this.authenticationManager.onAuthError(serverMessage);\n                            break;\n                        }\n                    case "FatalError":\n                        {\n                            const error = (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logFatalError)(this.logger, serverMessage.error);\n                            void this.webSocketManager.terminate();\n                            throw error;\n                        }\n                    case "Ping":\n                        break;\n                    // do nothing\n                    default:\n                        {\n                            serverMessage;\n                        }\n                }\n                return {\n                    hasSyncedPastLastReconnect: this.hasSyncedPastLastReconnect()\n                };\n            },\n            onServerDisconnectError: options.onServerDisconnectError\n        }, webSocketConstructor, this.logger, this.markConnectionStateDirty, this.debug);\n        this.mark("convexClientConstructed");\n        if (options.expectAuth) {\n            pauseSocket();\n        }\n    }\n    /**\n   * Return true if there is outstanding work from prior to the time of the most recent restart.\n   * This indicates that the client has not proven itself to have gotten past the issue that\n   * potentially led to the restart. Use this to influence when to reset backoff after a failure.\n   */ hasSyncedPastLastReconnect() {\n        const hasSyncedPastLastReconnect = this.requestManager.hasSyncedPastLastReconnect() || this.state.hasSyncedPastLastReconnect();\n        return hasSyncedPastLastReconnect;\n    }\n    observedTimestamp(observedTs) {\n        if (this.maxObservedTimestamp === void 0 || this.maxObservedTimestamp.lessThanOrEqual(observedTs)) {\n            this.maxObservedTimestamp = observedTs;\n        }\n    }\n    getMaxObservedTimestamp() {\n        return this.maxObservedTimestamp;\n    }\n    /**\n   * Compute the current query results based on the remoteQuerySet and the\n   * current optimistic updates and call `onTransition` for all the changed\n   * queries.\n   *\n   * @param completedMutations - A set of mutation IDs whose optimistic updates\n   * are no longer needed.\n   */ notifyOnQueryResultChanges(completedRequests) {\n        const remoteQueryResults = this.remoteQuerySet.remoteQueryResults();\n        const queryTokenToValue = /* @__PURE__ */ new Map();\n        for (const [queryId, result] of remoteQueryResults){\n            const queryToken = this.state.queryToken(queryId);\n            if (queryToken !== null) {\n                const query = {\n                    result,\n                    udfPath: this.state.queryPath(queryId),\n                    args: this.state.queryArgs(queryId)\n                };\n                queryTokenToValue.set(queryToken, query);\n            }\n        }\n        const changedQueryTokens = this.optimisticQueryResults.ingestQueryResultsFromServer(queryTokenToValue, new Set(completedRequests.keys()));\n        this.handleTransition({\n            queries: changedQueryTokens.map((token)=>{\n                const optimisticResult = this.optimisticQueryResults.rawQueryResult(token);\n                return {\n                    token,\n                    modification: {\n                        kind: "Updated",\n                        result: optimisticResult.result\n                    }\n                };\n            }),\n            reflectedMutations: Array.from(completedRequests).map(([requestId, result])=>({\n                    requestId,\n                    result\n                })),\n            timestamp: this.remoteQuerySet.timestamp()\n        });\n    }\n    handleTransition(transition) {\n        for (const fn of this._onTransitionFns.values()){\n            fn(transition);\n        }\n    }\n    /**\n   * Add a handler that will be called on a transition.\n   *\n   * Any external side effects (e.g. setting React state) should be handled here.\n   *\n   * @param fn\n   *\n   * @returns\n   */ addOnTransitionHandler(fn) {\n        const id = this._transitionHandlerCounter++;\n        this._onTransitionFns.set(id, fn);\n        return ()=>this._onTransitionFns.delete(id);\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user\'s rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        void this.authenticationManager.setConfig(fetchToken, onChange);\n    }\n    hasAuth() {\n        return this.state.hasAuth();\n    }\n    /** @internal */ setAdminAuth(value, fakeUserIdentity) {\n        const message = this.state.setAdminAuth(value, fakeUserIdentity);\n        this.webSocketManager.sendMessage(message);\n    }\n    clearAuth() {\n        const message = this.state.clearAuth();\n        this.webSocketManager.sendMessage(message);\n    }\n    /**\n     * Subscribe to a query function.\n     *\n     * Whenever this query\'s result changes, the `onTransition` callback\n     * passed into the constructor will be called.\n     *\n     * @param name - The name of the query.\n     * @param args - An arguments object for the query. If this is omitted, the\n     * arguments will be `{}`.\n     * @param options - A {@link SubscribeOptions} options object for this query.\n  \n     * @returns An object containing a {@link QueryToken} corresponding to this\n     * query and an `unsubscribe` callback.\n     */ subscribe(name, args, options) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const { modification, queryToken, unsubscribe } = this.state.subscribe(name, argsObject, options?.journal, options?.componentPath);\n        if (modification !== null) {\n            this.webSocketManager.sendMessage(modification);\n        }\n        return {\n            queryToken,\n            unsubscribe: ()=>{\n                const modification2 = unsubscribe();\n                if (modification2) {\n                    this.webSocketManager.sendMessage(modification2);\n                }\n            }\n        };\n    }\n    /**\n   * A query result based only on the current, local state.\n   *\n   * The only way this will return a value is if we\'re already subscribed to the\n   * query or its value has been set optimistically.\n   */ localQueryResult(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Get query result by query token based on current, local state\n   *\n   * The only way this will return a value is if we\'re already subscribed to the\n   * query or its value has been set optimistically.\n   *\n   * @internal\n   */ localQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Whether local query result is available for a toke.\n   *\n   * This method does not throw if the result is an error.\n   *\n   * @internal\n   */ hasLocalQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.hasQueryResult(queryToken);\n    }\n    /**\n   * @internal\n   */ localQueryLogs(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryLogs(queryToken);\n    }\n    /**\n   * Retrieve the current {@link QueryJournal} for this query function.\n   *\n   * If we have not yet received a result for this query, this will be `undefined`.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for this query.\n   * @returns The query\'s {@link QueryJournal} or `undefined`.\n   */ queryJournal(name, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(name, argsObject);\n        return this.state.queryJournal(queryToken);\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        const wsConnectionState = this.webSocketManager.connectionState();\n        return {\n            hasInflightRequests: this.requestManager.hasInflightRequests(),\n            isWebSocketConnected: wsConnectionState.isConnected,\n            hasEverConnected: wsConnectionState.hasEverConnected,\n            connectionCount: wsConnectionState.connectionCount,\n            connectionRetries: wsConnectionState.connectionRetries,\n            timeOfOldestInflightRequest: this.requestManager.timeOfOldestInflightRequest(),\n            inflightMutations: this.requestManager.inflightMutations(),\n            inflightActions: this.requestManager.inflightActions()\n        };\n    }\n    /**\n   * Subscribe to the {@link ConnectionState} between the client and the Convex\n   * backend, calling a callback each time it changes.\n   *\n   * Subscribed callbacks will be called when any part of ConnectionState changes.\n   * ConnectionState may grow in future versions (e.g. to provide a array of\n   * inflight requests) in which case callbacks would be called more frequently.\n   *\n   * @returns An unsubscribe function to stop listening.\n   */ subscribeToConnectionState(cb) {\n        const id = this.nextConnectionStateSubscriberId++;\n        this.connectionStateSubscribers.set(id, cb);\n        return ()=>{\n            this.connectionStateSubscribers.delete(id);\n        };\n    }\n    /**\n     * Execute a mutation function.\n     *\n     * @param name - The name of the mutation.\n     * @param args - An arguments object for the mutation. If this is omitted,\n     * the arguments will be `{}`.\n     * @param options - A {@link MutationOptions} options object for this mutation.\n  \n     * @returns - A promise of the mutation\'s result.\n     */ async mutation(name, args, options) {\n        const result = await this.mutationInternal(name, args, options);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)("mutation", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)("mutation", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async mutationInternal(udfPath, args, options, componentPath) {\n        const { mutationPromise } = this.enqueueMutation(udfPath, args, options, componentPath);\n        return mutationPromise;\n    }\n    /**\n   * @internal\n   */ enqueueMutation(udfPath, args, options, componentPath) {\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        this.tryReportLongDisconnect();\n        const requestId = this.nextRequestId;\n        this._nextRequestId++;\n        if (options !== void 0) {\n            const optimisticUpdate = options.optimisticUpdate;\n            if (optimisticUpdate !== void 0) {\n                const wrappedUpdate = (localQueryStore)=>{\n                    const result = optimisticUpdate(localQueryStore, mutationArgs);\n                    if (result instanceof Promise) {\n                        this.logger.warn("Optimistic update handler returned a Promise. Optimistic updates should be synchronous.");\n                    }\n                };\n                const changedQueryTokens = this.optimisticQueryResults.applyOptimisticUpdate(wrappedUpdate, requestId);\n                const changedQueries = changedQueryTokens.map((token)=>{\n                    const localResult = this.localQueryResultByToken(token);\n                    return {\n                        token,\n                        modification: {\n                            kind: "Updated",\n                            result: localResult === void 0 ? void 0 : {\n                                success: true,\n                                value: localResult,\n                                logLines: []\n                            }\n                        }\n                    };\n                });\n                this.handleTransition({\n                    queries: changedQueries,\n                    reflectedMutations: [],\n                    timestamp: this.remoteQuerySet.timestamp()\n                });\n            }\n        }\n        const message = {\n            type: "Mutation",\n            requestId,\n            udfPath,\n            componentPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(mutationArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        const mutationPromise = this.requestManager.request(message, mightBeSent);\n        return {\n            requestId,\n            mutationPromise\n        };\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param name - The name of the action.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action\'s result.\n   */ async action(name, args) {\n        const result = await this.actionInternal(name, args);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)("action", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)("action", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async actionInternal(udfPath, args, componentPath) {\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const requestId = this.nextRequestId;\n        this._nextRequestId++;\n        this.tryReportLongDisconnect();\n        const message = {\n            type: "Action",\n            requestId,\n            udfPath,\n            componentPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(actionArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        return this.requestManager.request(message, mightBeSent);\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you\'re done with an {@link BaseConvexClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.authenticationManager.stop();\n        return this.webSocketManager.terminate();\n    }\n    /**\n   * Return the address for this client, useful for creating a new client.\n   *\n   * Not guaranteed to match the address with which this client was constructed:\n   * it may be canonicalized.\n   */ get url() {\n        return this.address;\n    }\n    /**\n   * @internal\n   */ get nextRequestId() {\n        return this._nextRequestId;\n    }\n    /**\n   * @internal\n   */ get sessionId() {\n        return this._sessionId;\n    }\n    /**\n   * Reports performance marks to the server. This should only be called when\n   * we have a functional websocket.\n   */ reportMarks() {\n        if (this.debug) {\n            const report = (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.getMarksReport)(this.sessionId);\n            this.webSocketManager.sendMessage({\n                type: "Event",\n                eventType: "ClientConnect",\n                event: report\n            });\n        }\n    }\n    tryReportLongDisconnect() {\n        if (!this.debug) {\n            return;\n        }\n        const timeOfOldestRequest = this.connectionState().timeOfOldestInflightRequest;\n        if (timeOfOldestRequest === null || Date.now() - timeOfOldestRequest.getTime() <= 60 * 1e3) {\n            return;\n        }\n        const endpoint = `${this.address}/api/debug_event`;\n        fetch(endpoint, {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json",\n                "Convex-Client": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_0__.version}`\n            },\n            body: JSON.stringify({\n                event: "LongWebsocketDisconnect"\n            })\n        }).then((response)=>{\n            if (!response.ok) {\n                this.logger.warn("Analytics request failed with response:", response.body);\n            }\n        }).catch((error)=>{\n            this.logger.warn("Analytics response failed with error:", error);\n        });\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDL0Q7QUFDWTtBQU85QjtBQUMyQjtBQUNJO0FBR2hCO0FBQ2lCO0FBQ0k7QUFDQTtBQUNmO0FBR1A7QUFDZTtBQUNxQjtBQUNwQjtBQUM5QyxNQUFNeUI7SUFDWDs7Ozs7OztHQU9DLEdBQ0RDLFlBQVlDLE9BQU8sRUFBRUMsWUFBWSxFQUFFQyxPQUFPLENBQUU7UUFDMUN6QixjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUU7UUFDcEJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCQSxjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUU7UUFDcEJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCQSxjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUUsNkJBQTZCO1FBQ2pEQSxjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUUsb0JBQW9CLGFBQWEsR0FBRyxJQUFJMEI7UUFDNUQxQixjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUUsd0JBQXdCO1FBQzVDQSxjQUFjLElBQUks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LFNBQVM7WUFDNUMsSUFBSSxDQUFDdUIsZ0JBQWdCLENBQUNPLFdBQVcsQ0FBQztnQkFDaEM2QixNQUFNO2dCQUNOaUgsV0FBVztnQkFDWHJILE9BQU9vSDtZQUNUO1FBQ0Y7SUFDRjtJQUNBakIsMEJBQTBCO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMzSixLQUFLLEVBQUU7WUFDZjtRQUNGO1FBQ0EsTUFBTThLLHNCQUFzQixJQUFJLENBQUN0TCxlQUFlLEdBQUd3SiwyQkFBMkI7UUFDOUUsSUFBSThCLHdCQUF3QixRQUFRQyxLQUFLQyxHQUFHLEtBQUtGLG9CQUFvQkcsT0FBTyxNQUFNLEtBQUssS0FBSztZQUMxRjtRQUNGO1FBQ0EsTUFBTUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDbE0sT0FBTyxDQUFDLGdCQUFnQixDQUFDO1FBQ2xEbU0sTUFBTUQsVUFBVTtZQUNkRSxRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsZ0JBQWdCO2dCQUNoQixpQkFBaUIsQ0FBQyxJQUFJLEVBQUUzTiw4Q0FBT0EsQ0FBQyxDQUFDO1lBQ25DO1lBQ0E0TixNQUFNN0wsS0FBS0MsU0FBUyxDQUFDO2dCQUFFOEQsT0FBTztZQUEwQjtRQUMxRCxHQUFHbEUsSUFBSSxDQUFDLENBQUNpTTtZQUNQLElBQUksQ0FBQ0EsU0FBU0MsRUFBRSxFQUFFO2dCQUNoQixJQUFJLENBQUNoTCxNQUFNLENBQUN3SixJQUFJLENBQ2QsMkNBQ0F1QixTQUFTRCxJQUFJO1lBRWpCO1FBQ0YsR0FBR0csS0FBSyxDQUFDLENBQUNsRztZQUNSLElBQUksQ0FBQy9FLE1BQU0sQ0FBQ3dKLElBQUksQ0FBQyx5Q0FBeUN6RTtRQUM1RDtJQUNGO0FBQ0YsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9icm93c2VyL3N5bmMvY2xpZW50LmpzP2FkNWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuLi8uLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY29udmV4VG9Kc29uIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgY3JlYXRlSHlicmlkRXJyb3JTdGFja3RyYWNlLFxuICBmb3J3YXJkRGF0YSxcbiAgaW5zdGFudGlhdGVEZWZhdWx0TG9nZ2VyLFxuICBpbnN0YW50aWF0ZU5vb3BMb2dnZXIsXG4gIGxvZ0ZhdGFsRXJyb3Jcbn0gZnJvbSBcIi4uL2xvZ2dpbmcuanNcIjtcbmltcG9ydCB7IExvY2FsU3luY1N0YXRlIH0gZnJvbSBcIi4vbG9jYWxfc3RhdGUuanNcIjtcbmltcG9ydCB7IFJlcXVlc3RNYW5hZ2VyIH0gZnJvbSBcIi4vcmVxdWVzdF9tYW5hZ2VyLmpzXCI7XG5pbXBvcnQge1xuICBPcHRpbWlzdGljUXVlcnlSZXN1bHRzXG59IGZyb20gXCIuL29wdGltaXN0aWNfdXBkYXRlc19pbXBsLmpzXCI7XG5pbXBvcnQgeyBSZW1vdGVRdWVyeVNldCB9IGZyb20gXCIuL3JlbW90ZV9xdWVyeV9zZXQuanNcIjtcbmltcG9ydCB7IHNlcmlhbGl6ZVBhdGhBbmRBcmdzIH0gZnJvbSBcIi4vdWRmX3BhdGhfdXRpbHMuanNcIjtcbmltcG9ydCB7IFdlYlNvY2tldE1hbmFnZXIgfSBmcm9tIFwiLi93ZWJfc29ja2V0X21hbmFnZXIuanNcIjtcbmltcG9ydCB7IG5ld1Nlc3Npb25JZCB9IGZyb20gXCIuL3Nlc3Npb24uanNcIjtcbmltcG9ydCB7XG4gIEF1dGhlbnRpY2F0aW9uTWFuYWdlclxufSBmcm9tIFwiLi9hdXRoZW50aWNhdGlvbl9tYW5hZ2VyLmpzXCI7XG5pbXBvcnQgeyBnZXRNYXJrc1JlcG9ydCwgbWFyayB9IGZyb20gXCIuL21ldHJpY3MuanNcIjtcbmltcG9ydCB7IHBhcnNlQXJncywgdmFsaWRhdGVEZXBsb3ltZW50VXJsIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQ29udmV4RXJyb3IgfSBmcm9tIFwiLi4vLi4vdmFsdWVzL2Vycm9ycy5qc1wiO1xuZXhwb3J0IGNsYXNzIEJhc2VDb252ZXhDbGllbnQge1xuICAvKipcbiAgICogQHBhcmFtIGFkZHJlc3MgLSBUaGUgdXJsIG9mIHlvdXIgQ29udmV4IGRlcGxveW1lbnQsIG9mdGVuIHByb3ZpZGVkXG4gICAqIGJ5IGFuIGVudmlyb25tZW50IHZhcmlhYmxlLiBFLmcuIGBodHRwczovL3NtYWxsLW1vdXNlLTEyMy5jb252ZXguY2xvdWRgLlxuICAgKiBAcGFyYW0gb25UcmFuc2l0aW9uIC0gQSBjYWxsYmFjayByZWNlaXZpbmcgYW4gYXJyYXkgb2YgcXVlcnkgdG9rZW5zXG4gICAqIGNvcnJlc3BvbmRpbmcgdG8gcXVlcnkgcmVzdWx0cyB0aGF0IGhhdmUgY2hhbmdlZCAtLSBhZGRpdGlvbmFsIGhhbmRsZXJzXG4gICAqIGNhbiBiZSBhZGRlZCB2aWEgYGFkZE9uVHJhbnNpdGlvbkhhbmRsZXJgLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFNlZSB7QGxpbmsgQmFzZUNvbnZleENsaWVudE9wdGlvbnN9IGZvciBhIGZ1bGwgZGVzY3JpcHRpb24uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhZGRyZXNzLCBvblRyYW5zaXRpb24sIG9wdGlvbnMpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiYWRkcmVzc1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwic3RhdGVcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlcXVlc3RNYW5hZ2VyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ3ZWJTb2NrZXRNYW5hZ2VyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJhdXRoZW50aWNhdGlvbk1hbmFnZXJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlbW90ZVF1ZXJ5U2V0XCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvcHRpbWlzdGljUXVlcnlSZXN1bHRzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfdHJhbnNpdGlvbkhhbmRsZXJDb3VudGVyXCIsIDApO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfbmV4dFJlcXVlc3RJZFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX29uVHJhbnNpdGlvbkZuc1wiLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX3Nlc3Npb25JZFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZmlyc3RNZXNzYWdlUmVjZWl2ZWRcIiwgZmFsc2UpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJkZWJ1Z1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibG9nZ2VyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtYXhPYnNlcnZlZFRpbWVzdGFtcFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiY29ubmVjdGlvblN0YXRlU3Vic2NyaWJlcnNcIiwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm5leHRDb25uZWN0aW9uU3RhdGVTdWJzY3JpYmVySWRcIiwgMCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9sYXN0UHVibGlzaGVkQ29ubmVjdGlvblN0YXRlXCIpO1xuICAgIC8qKlxuICAgICAqIENhbGwgdGhpcyB3aGVuZXZlciB0aGUgY29ubmVjdGlvbiBzdGF0ZSBtYXkgaGF2ZSBjaGFuZ2VkIGluIGEgd2F5IHRoYXQgY291bGRcbiAgICAgKiByZXF1aXJlIHB1Ymxpc2hpbmcgaXQuIFNjaGVkdWxlcyBhIHBvc3NpYmx5IHVwZGF0ZS5cbiAgICAgKi9cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibWFya0Nvbm5lY3Rpb25TdGF0ZURpcnR5XCIsICgpID0+IHtcbiAgICAgIHZvaWQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1ckNvbm5lY3Rpb25TdGF0ZSA9IHRoaXMuY29ubmVjdGlvblN0YXRlKCk7XG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShjdXJDb25uZWN0aW9uU3RhdGUpICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLl9sYXN0UHVibGlzaGVkQ29ubmVjdGlvblN0YXRlKSkge1xuICAgICAgICAgIHRoaXMuX2xhc3RQdWJsaXNoZWRDb25uZWN0aW9uU3RhdGUgPSBjdXJDb25uZWN0aW9uU3RhdGU7XG4gICAgICAgICAgZm9yIChjb25zdCBjYiBvZiB0aGlzLmNvbm5lY3Rpb25TdGF0ZVN1YnNjcmliZXJzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBjYihjdXJDb25uZWN0aW9uU3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgLy8gSW5zdGFuY2UgcHJvcGVydHkgc28gdGhhdCBgbWFyaygpYCBkb2Vzbid0IG5lZWQgdG8gYmUgY2FsbGVkIGFzIGEgbWV0aG9kLlxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtYXJrXCIsIChuYW1lKSA9PiB7XG4gICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICBtYXJrKG5hbWUsIHRoaXMuc2Vzc2lvbklkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGFkZHJlc3MgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJQYXNzaW5nIGEgQ2xpZW50Q29uZmlnIG9iamVjdCBpcyBubyBsb25nZXIgc3VwcG9ydGVkLiBQYXNzIHRoZSBVUkwgb2YgdGhlIENvbnZleCBkZXBsb3ltZW50IGFzIGEgc3RyaW5nIGRpcmVjdGx5LlwiXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucz8uc2tpcENvbnZleERlcGxveW1lbnRVcmxDaGVjayAhPT0gdHJ1ZSkge1xuICAgICAgdmFsaWRhdGVEZXBsb3ltZW50VXJsKGFkZHJlc3MpO1xuICAgIH1cbiAgICBvcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgY29uc3QgYXV0aFJlZnJlc2hUb2tlbkxlZXdheVNlY29uZHMgPSBvcHRpb25zLmF1dGhSZWZyZXNoVG9rZW5MZWV3YXlTZWNvbmRzID8/IDI7XG4gICAgbGV0IHdlYlNvY2tldENvbnN0cnVjdG9yID0gb3B0aW9ucy53ZWJTb2NrZXRDb25zdHJ1Y3RvcjtcbiAgICBpZiAoIXdlYlNvY2tldENvbnN0cnVjdG9yICYmIHR5cGVvZiBXZWJTb2NrZXQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJObyBXZWJTb2NrZXQgZ2xvYmFsIHZhcmlhYmxlIGRlZmluZWQhIFRvIHVzZSBDb252ZXggaW4gYW4gZW52aXJvbm1lbnQgd2l0aG91dCBXZWJTb2NrZXQgdHJ5IHRoZSBIVFRQIGNsaWVudDogaHR0cHM6Ly9kb2NzLmNvbnZleC5kZXYvYXBpL2NsYXNzZXMvYnJvd3Nlci5Db252ZXhIdHRwQ2xpZW50XCJcbiAgICAgICk7XG4gICAgfVxuICAgIHdlYlNvY2tldENvbnN0cnVjdG9yID0gd2ViU29ja2V0Q29uc3RydWN0b3IgfHwgV2ViU29ja2V0O1xuICAgIHRoaXMuZGVidWcgPSBvcHRpb25zLnJlcG9ydERlYnVnSW5mb1RvQ29udmV4ID8/IGZhbHNlO1xuICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgdGhpcy5sb2dnZXIgPSBvcHRpb25zLmxvZ2dlciA9PT0gZmFsc2UgPyBpbnN0YW50aWF0ZU5vb3BMb2dnZXIoeyB2ZXJib3NlOiBvcHRpb25zLnZlcmJvc2UgPz8gZmFsc2UgfSkgOiBvcHRpb25zLmxvZ2dlciAhPT0gdHJ1ZSAmJiBvcHRpb25zLmxvZ2dlciA/IG9wdGlvbnMubG9nZ2VyIDogaW5zdGFudGlhdGVEZWZhdWx0TG9nZ2VyKHsgdmVyYm9zZTogb3B0aW9ucy52ZXJib3NlID8/IGZhbHNlIH0pO1xuICAgIGNvbnN0IGkgPSBhZGRyZXNzLnNlYXJjaChcIjovL1wiKTtcbiAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb3ZpZGVkIGFkZHJlc3Mgd2FzIG5vdCBhbiBhYnNvbHV0ZSBVUkwuXCIpO1xuICAgIH1cbiAgICBjb25zdCBvcmlnaW4gPSBhZGRyZXNzLnN1YnN0cmluZyhpICsgMyk7XG4gICAgY29uc3QgcHJvdG9jb2wgPSBhZGRyZXNzLnN1YnN0cmluZygwLCBpKTtcbiAgICBsZXQgd3NQcm90b2NvbDtcbiAgICBpZiAocHJvdG9jb2wgPT09IFwiaHR0cFwiKSB7XG4gICAgICB3c1Byb3RvY29sID0gXCJ3c1wiO1xuICAgIH0gZWxzZSBpZiAocHJvdG9jb2wgPT09IFwiaHR0cHNcIikge1xuICAgICAgd3NQcm90b2NvbCA9IFwid3NzXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwYXJlbnQgcHJvdG9jb2wgJHtwcm90b2NvbH1gKTtcbiAgICB9XG4gICAgY29uc3Qgd3NVcmkgPSBgJHt3c1Byb3RvY29sfTovLyR7b3JpZ2lufS9hcGkvJHt2ZXJzaW9ufS9zeW5jYDtcbiAgICB0aGlzLnN0YXRlID0gbmV3IExvY2FsU3luY1N0YXRlKCk7XG4gICAgdGhpcy5yZW1vdGVRdWVyeVNldCA9IG5ldyBSZW1vdGVRdWVyeVNldChcbiAgICAgIChxdWVyeUlkKSA9PiB0aGlzLnN0YXRlLnF1ZXJ5UGF0aChxdWVyeUlkKSxcbiAgICAgIHRoaXMubG9nZ2VyXG4gICAgKTtcbiAgICB0aGlzLnJlcXVlc3RNYW5hZ2VyID0gbmV3IFJlcXVlc3RNYW5hZ2VyKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICB0aGlzLm1hcmtDb25uZWN0aW9uU3RhdGVEaXJ0eVxuICAgICk7XG4gICAgY29uc3QgcGF1c2VTb2NrZXQgPSAoKSA9PiB7XG4gICAgICB0aGlzLndlYlNvY2tldE1hbmFnZXIucGF1c2UoKTtcbiAgICAgIHRoaXMuc3RhdGUucGF1c2UoKTtcbiAgICB9O1xuICAgIHRoaXMuYXV0aGVudGljYXRpb25NYW5hZ2VyID0gbmV3IEF1dGhlbnRpY2F0aW9uTWFuYWdlcihcbiAgICAgIHRoaXMuc3RhdGUsXG4gICAgICB7XG4gICAgICAgIGF1dGhlbnRpY2F0ZTogKHRva2VuKSA9PiB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMuc3RhdGUuc2V0QXV0aCh0b2tlbik7XG4gICAgICAgICAgdGhpcy53ZWJTb2NrZXRNYW5hZ2VyLnNlbmRNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgIHJldHVybiBtZXNzYWdlLmJhc2VWZXJzaW9uO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wU29ja2V0OiAoKSA9PiB0aGlzLndlYlNvY2tldE1hbmFnZXIuc3RvcCgpLFxuICAgICAgICB0cnlSZXN0YXJ0U29ja2V0OiAoKSA9PiB0aGlzLndlYlNvY2tldE1hbmFnZXIudHJ5UmVzdGFydCgpLFxuICAgICAgICBwYXVzZVNvY2tldCxcbiAgICAgICAgcmVzdW1lU29ja2V0OiAoKSA9PiB0aGlzLndlYlNvY2tldE1hbmFnZXIucmVzdW1lKCksXG4gICAgICAgIGNsZWFyQXV0aDogKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY2xlYXJBdXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGxvZ2dlcjogdGhpcy5sb2dnZXIsXG4gICAgICAgIHJlZnJlc2hUb2tlbkxlZXdheVNlY29uZHM6IGF1dGhSZWZyZXNoVG9rZW5MZWV3YXlTZWNvbmRzXG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLm9wdGltaXN0aWNRdWVyeVJlc3VsdHMgPSBuZXcgT3B0aW1pc3RpY1F1ZXJ5UmVzdWx0cygpO1xuICAgIHRoaXMuYWRkT25UcmFuc2l0aW9uSGFuZGxlcigodHJhbnNpdGlvbikgPT4ge1xuICAgICAgb25UcmFuc2l0aW9uKHRyYW5zaXRpb24ucXVlcmllcy5tYXAoKHEpID0+IHEudG9rZW4pKTtcbiAgICB9KTtcbiAgICB0aGlzLl9uZXh0UmVxdWVzdElkID0gMDtcbiAgICB0aGlzLl9zZXNzaW9uSWQgPSBuZXdTZXNzaW9uSWQoKTtcbiAgICBjb25zdCB7IHVuc2F2ZWRDaGFuZ2VzV2FybmluZyB9ID0gb3B0aW9ucztcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmICh1bnNhdmVkQ2hhbmdlc1dhcm5pbmcgPT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwidW5zYXZlZENoYW5nZXNXYXJuaW5nIHJlcXVlc3RlZCwgYnV0IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIG5vdCBmb3VuZCEgUmVtb3ZlIHt1bnNhdmVkQ2hhbmdlc1dhcm5pbmc6IHRydWV9IGZyb20gQ29udmV4IGNsaWVudCBvcHRpb25zLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh1bnNhdmVkQ2hhbmdlc1dhcm5pbmcgIT09IGZhbHNlKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCAoZSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5yZXF1ZXN0TWFuYWdlci5oYXNJbmNvbXBsZXRlUmVxdWVzdHMoKSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjb25zdCBjb25maXJtYXRpb25NZXNzYWdlID0gXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbGVhdmU/IFlvdXIgY2hhbmdlcyBtYXkgbm90IGJlIHNhdmVkLlwiO1xuICAgICAgICAgIChlIHx8IHdpbmRvdy5ldmVudCkucmV0dXJuVmFsdWUgPSBjb25maXJtYXRpb25NZXNzYWdlO1xuICAgICAgICAgIHJldHVybiBjb25maXJtYXRpb25NZXNzYWdlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy53ZWJTb2NrZXRNYW5hZ2VyID0gbmV3IFdlYlNvY2tldE1hbmFnZXIoXG4gICAgICB3c1VyaSxcbiAgICAgIHtcbiAgICAgICAgb25PcGVuOiAocmVjb25uZWN0TWV0YWRhdGEpID0+IHtcbiAgICAgICAgICB0aGlzLm1hcmsoXCJjb252ZXhXZWJTb2NrZXRPcGVuXCIpO1xuICAgICAgICAgIHRoaXMud2ViU29ja2V0TWFuYWdlci5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAuLi5yZWNvbm5lY3RNZXRhZGF0YSxcbiAgICAgICAgICAgIHR5cGU6IFwiQ29ubmVjdFwiLFxuICAgICAgICAgICAgc2Vzc2lvbklkOiB0aGlzLl9zZXNzaW9uSWQsXG4gICAgICAgICAgICBtYXhPYnNlcnZlZFRpbWVzdGFtcDogdGhpcy5tYXhPYnNlcnZlZFRpbWVzdGFtcFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IG9sZFJlbW90ZVF1ZXJ5UmVzdWx0cyA9IG5ldyBTZXQoXG4gICAgICAgICAgICB0aGlzLnJlbW90ZVF1ZXJ5U2V0LnJlbW90ZVF1ZXJ5UmVzdWx0cygpLmtleXMoKVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5yZW1vdGVRdWVyeVNldCA9IG5ldyBSZW1vdGVRdWVyeVNldChcbiAgICAgICAgICAgIChxdWVyeUlkKSA9PiB0aGlzLnN0YXRlLnF1ZXJ5UGF0aChxdWVyeUlkKSxcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBbcXVlcnlTZXRNb2RpZmljYXRpb24sIGF1dGhNb2RpZmljYXRpb25dID0gdGhpcy5zdGF0ZS5yZXN0YXJ0KFxuICAgICAgICAgICAgb2xkUmVtb3RlUXVlcnlSZXN1bHRzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoYXV0aE1vZGlmaWNhdGlvbikge1xuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRNYW5hZ2VyLnNlbmRNZXNzYWdlKGF1dGhNb2RpZmljYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLndlYlNvY2tldE1hbmFnZXIuc2VuZE1lc3NhZ2UocXVlcnlTZXRNb2RpZmljYXRpb24pO1xuICAgICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiB0aGlzLnJlcXVlc3RNYW5hZ2VyLnJlc3RhcnQoKSkge1xuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRNYW5hZ2VyLnNlbmRNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25SZXN1bWU6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBbcXVlcnlTZXRNb2RpZmljYXRpb24sIGF1dGhNb2RpZmljYXRpb25dID0gdGhpcy5zdGF0ZS5yZXN1bWUoKTtcbiAgICAgICAgICBpZiAoYXV0aE1vZGlmaWNhdGlvbikge1xuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRNYW5hZ2VyLnNlbmRNZXNzYWdlKGF1dGhNb2RpZmljYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocXVlcnlTZXRNb2RpZmljYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0TWFuYWdlci5zZW5kTWVzc2FnZShxdWVyeVNldE1vZGlmaWNhdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiB0aGlzLnJlcXVlc3RNYW5hZ2VyLnJlc3VtZSgpKSB7XG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldE1hbmFnZXIuc2VuZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbk1lc3NhZ2U6IChzZXJ2ZXJNZXNzYWdlKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLmZpcnN0TWVzc2FnZVJlY2VpdmVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpcnN0TWVzc2FnZVJlY2VpdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubWFyayhcImNvbnZleEZpcnN0TWVzc2FnZVJlY2VpdmVkXCIpO1xuICAgICAgICAgICAgdGhpcy5yZXBvcnRNYXJrcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzd2l0Y2ggKHNlcnZlck1lc3NhZ2UudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIlRyYW5zaXRpb25cIjoge1xuICAgICAgICAgICAgICB0aGlzLm9ic2VydmVkVGltZXN0YW1wKHNlcnZlck1lc3NhZ2UuZW5kVmVyc2lvbi50cyk7XG4gICAgICAgICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25NYW5hZ2VyLm9uVHJhbnNpdGlvbihzZXJ2ZXJNZXNzYWdlKTtcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdGVRdWVyeVNldC50cmFuc2l0aW9uKHNlcnZlck1lc3NhZ2UpO1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlLnRyYW5zaXRpb24oc2VydmVyTWVzc2FnZSk7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlZFJlcXVlc3RzID0gdGhpcy5yZXF1ZXN0TWFuYWdlci5yZW1vdmVDb21wbGV0ZWQoXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdGVRdWVyeVNldC50aW1lc3RhbXAoKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLm5vdGlmeU9uUXVlcnlSZXN1bHRDaGFuZ2VzKGNvbXBsZXRlZFJlcXVlc3RzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiTXV0YXRpb25SZXNwb25zZVwiOiB7XG4gICAgICAgICAgICAgIGlmIChzZXJ2ZXJNZXNzYWdlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVkVGltZXN0YW1wKHNlcnZlck1lc3NhZ2UudHMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlZE11dGF0aW9uSW5mbyA9IHRoaXMucmVxdWVzdE1hbmFnZXIub25SZXNwb25zZShzZXJ2ZXJNZXNzYWdlKTtcbiAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZE11dGF0aW9uSW5mbyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5T25RdWVyeVJlc3VsdENoYW5nZXMoXG4gICAgICAgICAgICAgICAgICAvKiBAX19QVVJFX18gKi8gbmV3IE1hcChbXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRNdXRhdGlvbkluZm8ucmVxdWVzdElkLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZE11dGF0aW9uSW5mby5yZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkFjdGlvblJlc3BvbnNlXCI6IHtcbiAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0TWFuYWdlci5vblJlc3BvbnNlKHNlcnZlck1lc3NhZ2UpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJBdXRoRXJyb3JcIjoge1xuICAgICAgICAgICAgICB0aGlzLmF1dGhlbnRpY2F0aW9uTWFuYWdlci5vbkF1dGhFcnJvcihzZXJ2ZXJNZXNzYWdlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiRmF0YWxFcnJvclwiOiB7XG4gICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbG9nRmF0YWxFcnJvcih0aGlzLmxvZ2dlciwgc2VydmVyTWVzc2FnZS5lcnJvcik7XG4gICAgICAgICAgICAgIHZvaWQgdGhpcy53ZWJTb2NrZXRNYW5hZ2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJQaW5nXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICBzZXJ2ZXJNZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGFzU3luY2VkUGFzdExhc3RSZWNvbm5lY3Q6IHRoaXMuaGFzU3luY2VkUGFzdExhc3RSZWNvbm5lY3QoKVxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG9uU2VydmVyRGlzY29ubmVjdEVycm9yOiBvcHRpb25zLm9uU2VydmVyRGlzY29ubmVjdEVycm9yXG4gICAgICB9LFxuICAgICAgd2ViU29ja2V0Q29uc3RydWN0b3IsXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIHRoaXMubWFya0Nvbm5lY3Rpb25TdGF0ZURpcnR5LFxuICAgICAgdGhpcy5kZWJ1Z1xuICAgICk7XG4gICAgdGhpcy5tYXJrKFwiY29udmV4Q2xpZW50Q29uc3RydWN0ZWRcIik7XG4gICAgaWYgKG9wdGlvbnMuZXhwZWN0QXV0aCkge1xuICAgICAgcGF1c2VTb2NrZXQoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZXJlIGlzIG91dHN0YW5kaW5nIHdvcmsgZnJvbSBwcmlvciB0byB0aGUgdGltZSBvZiB0aGUgbW9zdCByZWNlbnQgcmVzdGFydC5cbiAgICogVGhpcyBpbmRpY2F0ZXMgdGhhdCB0aGUgY2xpZW50IGhhcyBub3QgcHJvdmVuIGl0c2VsZiB0byBoYXZlIGdvdHRlbiBwYXN0IHRoZSBpc3N1ZSB0aGF0XG4gICAqIHBvdGVudGlhbGx5IGxlZCB0byB0aGUgcmVzdGFydC4gVXNlIHRoaXMgdG8gaW5mbHVlbmNlIHdoZW4gdG8gcmVzZXQgYmFja29mZiBhZnRlciBhIGZhaWx1cmUuXG4gICAqL1xuICBoYXNTeW5jZWRQYXN0TGFzdFJlY29ubmVjdCgpIHtcbiAgICBjb25zdCBoYXNTeW5jZWRQYXN0TGFzdFJlY29ubmVjdCA9IHRoaXMucmVxdWVzdE1hbmFnZXIuaGFzU3luY2VkUGFzdExhc3RSZWNvbm5lY3QoKSB8fCB0aGlzLnN0YXRlLmhhc1N5bmNlZFBhc3RMYXN0UmVjb25uZWN0KCk7XG4gICAgcmV0dXJuIGhhc1N5bmNlZFBhc3RMYXN0UmVjb25uZWN0O1xuICB9XG4gIG9ic2VydmVkVGltZXN0YW1wKG9ic2VydmVkVHMpIHtcbiAgICBpZiAodGhpcy5tYXhPYnNlcnZlZFRpbWVzdGFtcCA9PT0gdm9pZCAwIHx8IHRoaXMubWF4T2JzZXJ2ZWRUaW1lc3RhbXAubGVzc1RoYW5PckVxdWFsKG9ic2VydmVkVHMpKSB7XG4gICAgICB0aGlzLm1heE9ic2VydmVkVGltZXN0YW1wID0gb2JzZXJ2ZWRUcztcbiAgICB9XG4gIH1cbiAgZ2V0TWF4T2JzZXJ2ZWRUaW1lc3RhbXAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF4T2JzZXJ2ZWRUaW1lc3RhbXA7XG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIGN1cnJlbnQgcXVlcnkgcmVzdWx0cyBiYXNlZCBvbiB0aGUgcmVtb3RlUXVlcnlTZXQgYW5kIHRoZVxuICAgKiBjdXJyZW50IG9wdGltaXN0aWMgdXBkYXRlcyBhbmQgY2FsbCBgb25UcmFuc2l0aW9uYCBmb3IgYWxsIHRoZSBjaGFuZ2VkXG4gICAqIHF1ZXJpZXMuXG4gICAqXG4gICAqIEBwYXJhbSBjb21wbGV0ZWRNdXRhdGlvbnMgLSBBIHNldCBvZiBtdXRhdGlvbiBJRHMgd2hvc2Ugb3B0aW1pc3RpYyB1cGRhdGVzXG4gICAqIGFyZSBubyBsb25nZXIgbmVlZGVkLlxuICAgKi9cbiAgbm90aWZ5T25RdWVyeVJlc3VsdENoYW5nZXMoY29tcGxldGVkUmVxdWVzdHMpIHtcbiAgICBjb25zdCByZW1vdGVRdWVyeVJlc3VsdHMgPSB0aGlzLnJlbW90ZVF1ZXJ5U2V0LnJlbW90ZVF1ZXJ5UmVzdWx0cygpO1xuICAgIGNvbnN0IHF1ZXJ5VG9rZW5Ub1ZhbHVlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IFtxdWVyeUlkLCByZXN1bHRdIG9mIHJlbW90ZVF1ZXJ5UmVzdWx0cykge1xuICAgICAgY29uc3QgcXVlcnlUb2tlbiA9IHRoaXMuc3RhdGUucXVlcnlUb2tlbihxdWVyeUlkKTtcbiAgICAgIGlmIChxdWVyeVRva2VuICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0ge1xuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICB1ZGZQYXRoOiB0aGlzLnN0YXRlLnF1ZXJ5UGF0aChxdWVyeUlkKSxcbiAgICAgICAgICBhcmdzOiB0aGlzLnN0YXRlLnF1ZXJ5QXJncyhxdWVyeUlkKVxuICAgICAgICB9O1xuICAgICAgICBxdWVyeVRva2VuVG9WYWx1ZS5zZXQocXVlcnlUb2tlbiwgcXVlcnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjaGFuZ2VkUXVlcnlUb2tlbnMgPSB0aGlzLm9wdGltaXN0aWNRdWVyeVJlc3VsdHMuaW5nZXN0UXVlcnlSZXN1bHRzRnJvbVNlcnZlcihcbiAgICAgIHF1ZXJ5VG9rZW5Ub1ZhbHVlLFxuICAgICAgbmV3IFNldChjb21wbGV0ZWRSZXF1ZXN0cy5rZXlzKCkpXG4gICAgKTtcbiAgICB0aGlzLmhhbmRsZVRyYW5zaXRpb24oe1xuICAgICAgcXVlcmllczogY2hhbmdlZFF1ZXJ5VG9rZW5zLm1hcCgodG9rZW4pID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW1pc3RpY1Jlc3VsdCA9IHRoaXMub3B0aW1pc3RpY1F1ZXJ5UmVzdWx0cy5yYXdRdWVyeVJlc3VsdCh0b2tlbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgbW9kaWZpY2F0aW9uOiB7XG4gICAgICAgICAgICBraW5kOiBcIlVwZGF0ZWRcIixcbiAgICAgICAgICAgIHJlc3VsdDogb3B0aW1pc3RpY1Jlc3VsdC5yZXN1bHRcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICAgIHJlZmxlY3RlZE11dGF0aW9uczogQXJyYXkuZnJvbShjb21wbGV0ZWRSZXF1ZXN0cykubWFwKFxuICAgICAgICAoW3JlcXVlc3RJZCwgcmVzdWx0XSkgPT4gKHtcbiAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgcmVzdWx0XG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgdGltZXN0YW1wOiB0aGlzLnJlbW90ZVF1ZXJ5U2V0LnRpbWVzdGFtcCgpXG4gICAgfSk7XG4gIH1cbiAgaGFuZGxlVHJhbnNpdGlvbih0cmFuc2l0aW9uKSB7XG4gICAgZm9yIChjb25zdCBmbiBvZiB0aGlzLl9vblRyYW5zaXRpb25GbnMudmFsdWVzKCkpIHtcbiAgICAgIGZuKHRyYW5zaXRpb24pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWRkIGEgaGFuZGxlciB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uIGEgdHJhbnNpdGlvbi5cbiAgICpcbiAgICogQW55IGV4dGVybmFsIHNpZGUgZWZmZWN0cyAoZS5nLiBzZXR0aW5nIFJlYWN0IHN0YXRlKSBzaG91bGQgYmUgaGFuZGxlZCBoZXJlLlxuICAgKlxuICAgKiBAcGFyYW0gZm5cbiAgICpcbiAgICogQHJldHVybnNcbiAgICovXG4gIGFkZE9uVHJhbnNpdGlvbkhhbmRsZXIoZm4pIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuX3RyYW5zaXRpb25IYW5kbGVyQ291bnRlcisrO1xuICAgIHRoaXMuX29uVHJhbnNpdGlvbkZucy5zZXQoaWQsIGZuKTtcbiAgICByZXR1cm4gKCkgPT4gdGhpcy5fb25UcmFuc2l0aW9uRm5zLmRlbGV0ZShpZCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgYXV0aGVudGljYXRpb24gdG9rZW4gdG8gYmUgdXNlZCBmb3Igc3Vic2VxdWVudCBxdWVyaWVzIGFuZCBtdXRhdGlvbnMuXG4gICAqIGBmZXRjaFRva2VuYCB3aWxsIGJlIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGFnYWluIGlmIGEgdG9rZW4gZXhwaXJlcy5cbiAgICogYGZldGNoVG9rZW5gIHNob3VsZCByZXR1cm4gYG51bGxgIGlmIHRoZSB0b2tlbiBjYW5ub3QgYmUgcmV0cmlldmVkLCBmb3IgZXhhbXBsZVxuICAgKiB3aGVuIHRoZSB1c2VyJ3MgcmlnaHRzIHdlcmUgcGVybWFuZW50bHkgcmV2b2tlZC5cbiAgICogQHBhcmFtIGZldGNoVG9rZW4gLSBhbiBhc3luYyBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIEpXVC1lbmNvZGVkIE9wZW5JRCBDb25uZWN0IElkZW50aXR5IFRva2VuXG4gICAqIEBwYXJhbSBvbkNoYW5nZSAtIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBhdXRoZW50aWNhdGlvbiBzdGF0dXMgY2hhbmdlc1xuICAgKi9cbiAgc2V0QXV0aChmZXRjaFRva2VuLCBvbkNoYW5nZSkge1xuICAgIHZvaWQgdGhpcy5hdXRoZW50aWNhdGlvbk1hbmFnZXIuc2V0Q29uZmlnKGZldGNoVG9rZW4sIG9uQ2hhbmdlKTtcbiAgfVxuICBoYXNBdXRoKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmhhc0F1dGgoKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIHNldEFkbWluQXV0aCh2YWx1ZSwgZmFrZVVzZXJJZGVudGl0eSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnN0YXRlLnNldEFkbWluQXV0aCh2YWx1ZSwgZmFrZVVzZXJJZGVudGl0eSk7XG4gICAgdGhpcy53ZWJTb2NrZXRNYW5hZ2VyLnNlbmRNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG4gIGNsZWFyQXV0aCgpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5zdGF0ZS5jbGVhckF1dGgoKTtcbiAgICB0aGlzLndlYlNvY2tldE1hbmFnZXIuc2VuZE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cbiAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRvIGEgcXVlcnkgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBXaGVuZXZlciB0aGlzIHF1ZXJ5J3MgcmVzdWx0IGNoYW5nZXMsIHRoZSBgb25UcmFuc2l0aW9uYCBjYWxsYmFja1xuICAgICAqIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvciB3aWxsIGJlIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSBhcmdzIC0gQW4gYXJndW1lbnRzIG9iamVjdCBmb3IgdGhlIHF1ZXJ5LiBJZiB0aGlzIGlzIG9taXR0ZWQsIHRoZVxuICAgICAqIGFyZ3VtZW50cyB3aWxsIGJlIGB7fWAuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBIHtAbGluayBTdWJzY3JpYmVPcHRpb25zfSBvcHRpb25zIG9iamVjdCBmb3IgdGhpcyBxdWVyeS5cbiAgXG4gICAgICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYSB7QGxpbmsgUXVlcnlUb2tlbn0gY29ycmVzcG9uZGluZyB0byB0aGlzXG4gICAgICogcXVlcnkgYW5kIGFuIGB1bnN1YnNjcmliZWAgY2FsbGJhY2suXG4gICAgICovXG4gIHN1YnNjcmliZShuYW1lLCBhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYXJnc09iamVjdCA9IHBhcnNlQXJncyhhcmdzKTtcbiAgICBjb25zdCB7IG1vZGlmaWNhdGlvbiwgcXVlcnlUb2tlbiwgdW5zdWJzY3JpYmUgfSA9IHRoaXMuc3RhdGUuc3Vic2NyaWJlKFxuICAgICAgbmFtZSxcbiAgICAgIGFyZ3NPYmplY3QsXG4gICAgICBvcHRpb25zPy5qb3VybmFsLFxuICAgICAgb3B0aW9ucz8uY29tcG9uZW50UGF0aFxuICAgICk7XG4gICAgaWYgKG1vZGlmaWNhdGlvbiAhPT0gbnVsbCkge1xuICAgICAgdGhpcy53ZWJTb2NrZXRNYW5hZ2VyLnNlbmRNZXNzYWdlKG1vZGlmaWNhdGlvbik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBxdWVyeVRva2VuLFxuICAgICAgdW5zdWJzY3JpYmU6ICgpID0+IHtcbiAgICAgICAgY29uc3QgbW9kaWZpY2F0aW9uMiA9IHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGlmIChtb2RpZmljYXRpb24yKSB7XG4gICAgICAgICAgdGhpcy53ZWJTb2NrZXRNYW5hZ2VyLnNlbmRNZXNzYWdlKG1vZGlmaWNhdGlvbjIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQSBxdWVyeSByZXN1bHQgYmFzZWQgb25seSBvbiB0aGUgY3VycmVudCwgbG9jYWwgc3RhdGUuXG4gICAqXG4gICAqIFRoZSBvbmx5IHdheSB0aGlzIHdpbGwgcmV0dXJuIGEgdmFsdWUgaXMgaWYgd2UncmUgYWxyZWFkeSBzdWJzY3JpYmVkIHRvIHRoZVxuICAgKiBxdWVyeSBvciBpdHMgdmFsdWUgaGFzIGJlZW4gc2V0IG9wdGltaXN0aWNhbGx5LlxuICAgKi9cbiAgbG9jYWxRdWVyeVJlc3VsdCh1ZGZQYXRoLCBhcmdzKSB7XG4gICAgY29uc3QgYXJnc09iamVjdCA9IHBhcnNlQXJncyhhcmdzKTtcbiAgICBjb25zdCBxdWVyeVRva2VuID0gc2VyaWFsaXplUGF0aEFuZEFyZ3ModWRmUGF0aCwgYXJnc09iamVjdCk7XG4gICAgcmV0dXJuIHRoaXMub3B0aW1pc3RpY1F1ZXJ5UmVzdWx0cy5xdWVyeVJlc3VsdChxdWVyeVRva2VuKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHF1ZXJ5IHJlc3VsdCBieSBxdWVyeSB0b2tlbiBiYXNlZCBvbiBjdXJyZW50LCBsb2NhbCBzdGF0ZVxuICAgKlxuICAgKiBUaGUgb25seSB3YXkgdGhpcyB3aWxsIHJldHVybiBhIHZhbHVlIGlzIGlmIHdlJ3JlIGFscmVhZHkgc3Vic2NyaWJlZCB0byB0aGVcbiAgICogcXVlcnkgb3IgaXRzIHZhbHVlIGhhcyBiZWVuIHNldCBvcHRpbWlzdGljYWxseS5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBsb2NhbFF1ZXJ5UmVzdWx0QnlUb2tlbihxdWVyeVRva2VuKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW1pc3RpY1F1ZXJ5UmVzdWx0cy5xdWVyeVJlc3VsdChxdWVyeVRva2VuKTtcbiAgfVxuICAvKipcbiAgICogV2hldGhlciBsb2NhbCBxdWVyeSByZXN1bHQgaXMgYXZhaWxhYmxlIGZvciBhIHRva2UuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHRocm93IGlmIHRoZSByZXN1bHQgaXMgYW4gZXJyb3IuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgaGFzTG9jYWxRdWVyeVJlc3VsdEJ5VG9rZW4ocXVlcnlUb2tlbikge1xuICAgIHJldHVybiB0aGlzLm9wdGltaXN0aWNRdWVyeVJlc3VsdHMuaGFzUXVlcnlSZXN1bHQocXVlcnlUb2tlbik7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbG9jYWxRdWVyeUxvZ3ModWRmUGF0aCwgYXJncykge1xuICAgIGNvbnN0IGFyZ3NPYmplY3QgPSBwYXJzZUFyZ3MoYXJncyk7XG4gICAgY29uc3QgcXVlcnlUb2tlbiA9IHNlcmlhbGl6ZVBhdGhBbmRBcmdzKHVkZlBhdGgsIGFyZ3NPYmplY3QpO1xuICAgIHJldHVybiB0aGlzLm9wdGltaXN0aWNRdWVyeVJlc3VsdHMucXVlcnlMb2dzKHF1ZXJ5VG9rZW4pO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgY3VycmVudCB7QGxpbmsgUXVlcnlKb3VybmFsfSBmb3IgdGhpcyBxdWVyeSBmdW5jdGlvbi5cbiAgICpcbiAgICogSWYgd2UgaGF2ZSBub3QgeWV0IHJlY2VpdmVkIGEgcmVzdWx0IGZvciB0aGlzIHF1ZXJ5LCB0aGlzIHdpbGwgYmUgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHF1ZXJ5LlxuICAgKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgb2JqZWN0IGZvciB0aGlzIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyBUaGUgcXVlcnkncyB7QGxpbmsgUXVlcnlKb3VybmFsfSBvciBgdW5kZWZpbmVkYC5cbiAgICovXG4gIHF1ZXJ5Sm91cm5hbChuYW1lLCBhcmdzKSB7XG4gICAgY29uc3QgYXJnc09iamVjdCA9IHBhcnNlQXJncyhhcmdzKTtcbiAgICBjb25zdCBxdWVyeVRva2VuID0gc2VyaWFsaXplUGF0aEFuZEFyZ3MobmFtZSwgYXJnc09iamVjdCk7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUucXVlcnlKb3VybmFsKHF1ZXJ5VG9rZW4pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQge0BsaW5rIENvbm5lY3Rpb25TdGF0ZX0gYmV0d2VlbiB0aGUgY2xpZW50IGFuZCB0aGUgQ29udmV4XG4gICAqIGJhY2tlbmQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgQ29ubmVjdGlvblN0YXRlfSB3aXRoIHRoZSBDb252ZXggYmFja2VuZC5cbiAgICovXG4gIGNvbm5lY3Rpb25TdGF0ZSgpIHtcbiAgICBjb25zdCB3c0Nvbm5lY3Rpb25TdGF0ZSA9IHRoaXMud2ViU29ja2V0TWFuYWdlci5jb25uZWN0aW9uU3RhdGUoKTtcbiAgICByZXR1cm4ge1xuICAgICAgaGFzSW5mbGlnaHRSZXF1ZXN0czogdGhpcy5yZXF1ZXN0TWFuYWdlci5oYXNJbmZsaWdodFJlcXVlc3RzKCksXG4gICAgICBpc1dlYlNvY2tldENvbm5lY3RlZDogd3NDb25uZWN0aW9uU3RhdGUuaXNDb25uZWN0ZWQsXG4gICAgICBoYXNFdmVyQ29ubmVjdGVkOiB3c0Nvbm5lY3Rpb25TdGF0ZS5oYXNFdmVyQ29ubmVjdGVkLFxuICAgICAgY29ubmVjdGlvbkNvdW50OiB3c0Nvbm5lY3Rpb25TdGF0ZS5jb25uZWN0aW9uQ291bnQsXG4gICAgICBjb25uZWN0aW9uUmV0cmllczogd3NDb25uZWN0aW9uU3RhdGUuY29ubmVjdGlvblJldHJpZXMsXG4gICAgICB0aW1lT2ZPbGRlc3RJbmZsaWdodFJlcXVlc3Q6IHRoaXMucmVxdWVzdE1hbmFnZXIudGltZU9mT2xkZXN0SW5mbGlnaHRSZXF1ZXN0KCksXG4gICAgICBpbmZsaWdodE11dGF0aW9uczogdGhpcy5yZXF1ZXN0TWFuYWdlci5pbmZsaWdodE11dGF0aW9ucygpLFxuICAgICAgaW5mbGlnaHRBY3Rpb25zOiB0aGlzLnJlcXVlc3RNYW5hZ2VyLmluZmxpZ2h0QWN0aW9ucygpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSB7QGxpbmsgQ29ubmVjdGlvblN0YXRlfSBiZXR3ZWVuIHRoZSBjbGllbnQgYW5kIHRoZSBDb252ZXhcbiAgICogYmFja2VuZCwgY2FsbGluZyBhIGNhbGxiYWNrIGVhY2ggdGltZSBpdCBjaGFuZ2VzLlxuICAgKlxuICAgKiBTdWJzY3JpYmVkIGNhbGxiYWNrcyB3aWxsIGJlIGNhbGxlZCB3aGVuIGFueSBwYXJ0IG9mIENvbm5lY3Rpb25TdGF0ZSBjaGFuZ2VzLlxuICAgKiBDb25uZWN0aW9uU3RhdGUgbWF5IGdyb3cgaW4gZnV0dXJlIHZlcnNpb25zIChlLmcuIHRvIHByb3ZpZGUgYSBhcnJheSBvZlxuICAgKiBpbmZsaWdodCByZXF1ZXN0cykgaW4gd2hpY2ggY2FzZSBjYWxsYmFja3Mgd291bGQgYmUgY2FsbGVkIG1vcmUgZnJlcXVlbnRseS5cbiAgICpcbiAgICogQHJldHVybnMgQW4gdW5zdWJzY3JpYmUgZnVuY3Rpb24gdG8gc3RvcCBsaXN0ZW5pbmcuXG4gICAqL1xuICBzdWJzY3JpYmVUb0Nvbm5lY3Rpb25TdGF0ZShjYikge1xuICAgIGNvbnN0IGlkID0gdGhpcy5uZXh0Q29ubmVjdGlvblN0YXRlU3Vic2NyaWJlcklkKys7XG4gICAgdGhpcy5jb25uZWN0aW9uU3RhdGVTdWJzY3JpYmVycy5zZXQoaWQsIGNiKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGVTdWJzY3JpYmVycy5kZWxldGUoaWQpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAgICogRXhlY3V0ZSBhIG11dGF0aW9uIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgbXV0YXRpb24uXG4gICAgICogQHBhcmFtIGFyZ3MgLSBBbiBhcmd1bWVudHMgb2JqZWN0IGZvciB0aGUgbXV0YXRpb24uIElmIHRoaXMgaXMgb21pdHRlZCxcbiAgICAgKiB0aGUgYXJndW1lbnRzIHdpbGwgYmUgYHt9YC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEEge0BsaW5rIE11dGF0aW9uT3B0aW9uc30gb3B0aW9ucyBvYmplY3QgZm9yIHRoaXMgbXV0YXRpb24uXG4gIFxuICAgICAqIEByZXR1cm5zIC0gQSBwcm9taXNlIG9mIHRoZSBtdXRhdGlvbidzIHJlc3VsdC5cbiAgICAgKi9cbiAgYXN5bmMgbXV0YXRpb24obmFtZSwgYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubXV0YXRpb25JbnRlcm5hbChuYW1lLCBhcmdzLCBvcHRpb25zKTtcbiAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICBpZiAocmVzdWx0LmVycm9yRGF0YSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHRocm93IGZvcndhcmREYXRhKFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBuZXcgQ29udmV4RXJyb3IoXG4gICAgICAgICAgICBjcmVhdGVIeWJyaWRFcnJvclN0YWNrdHJhY2UoXCJtdXRhdGlvblwiLCBuYW1lLCByZXN1bHQpXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGNyZWF0ZUh5YnJpZEVycm9yU3RhY2t0cmFjZShcIm11dGF0aW9uXCIsIG5hbWUsIHJlc3VsdCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIG11dGF0aW9uSW50ZXJuYWwodWRmUGF0aCwgYXJncywgb3B0aW9ucywgY29tcG9uZW50UGF0aCkge1xuICAgIGNvbnN0IHsgbXV0YXRpb25Qcm9taXNlIH0gPSB0aGlzLmVucXVldWVNdXRhdGlvbihcbiAgICAgIHVkZlBhdGgsXG4gICAgICBhcmdzLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIGNvbXBvbmVudFBhdGhcbiAgICApO1xuICAgIHJldHVybiBtdXRhdGlvblByb21pc2U7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZU11dGF0aW9uKHVkZlBhdGgsIGFyZ3MsIG9wdGlvbnMsIGNvbXBvbmVudFBhdGgpIHtcbiAgICBjb25zdCBtdXRhdGlvbkFyZ3MgPSBwYXJzZUFyZ3MoYXJncyk7XG4gICAgdGhpcy50cnlSZXBvcnRMb25nRGlzY29ubmVjdCgpO1xuICAgIGNvbnN0IHJlcXVlc3RJZCA9IHRoaXMubmV4dFJlcXVlc3RJZDtcbiAgICB0aGlzLl9uZXh0UmVxdWVzdElkKys7XG4gICAgaWYgKG9wdGlvbnMgIT09IHZvaWQgMCkge1xuICAgICAgY29uc3Qgb3B0aW1pc3RpY1VwZGF0ZSA9IG9wdGlvbnMub3B0aW1pc3RpY1VwZGF0ZTtcbiAgICAgIGlmIChvcHRpbWlzdGljVXBkYXRlICE9PSB2b2lkIDApIHtcbiAgICAgICAgY29uc3Qgd3JhcHBlZFVwZGF0ZSA9IChsb2NhbFF1ZXJ5U3RvcmUpID0+IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpbWlzdGljVXBkYXRlKFxuICAgICAgICAgICAgbG9jYWxRdWVyeVN0b3JlLFxuICAgICAgICAgICAgbXV0YXRpb25BcmdzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcbiAgICAgICAgICAgICAgXCJPcHRpbWlzdGljIHVwZGF0ZSBoYW5kbGVyIHJldHVybmVkIGEgUHJvbWlzZS4gT3B0aW1pc3RpYyB1cGRhdGVzIHNob3VsZCBiZSBzeW5jaHJvbm91cy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNoYW5nZWRRdWVyeVRva2VucyA9IHRoaXMub3B0aW1pc3RpY1F1ZXJ5UmVzdWx0cy5hcHBseU9wdGltaXN0aWNVcGRhdGUoXG4gICAgICAgICAgd3JhcHBlZFVwZGF0ZSxcbiAgICAgICAgICByZXF1ZXN0SWRcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgY2hhbmdlZFF1ZXJpZXMgPSBjaGFuZ2VkUXVlcnlUb2tlbnMubWFwKCh0b2tlbikgPT4ge1xuICAgICAgICAgIGNvbnN0IGxvY2FsUmVzdWx0ID0gdGhpcy5sb2NhbFF1ZXJ5UmVzdWx0QnlUb2tlbih0b2tlbik7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgbW9kaWZpY2F0aW9uOiB7XG4gICAgICAgICAgICAgIGtpbmQ6IFwiVXBkYXRlZFwiLFxuICAgICAgICAgICAgICByZXN1bHQ6IGxvY2FsUmVzdWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbG9jYWxSZXN1bHQsXG4gICAgICAgICAgICAgICAgbG9nTGluZXM6IFtdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oYW5kbGVUcmFuc2l0aW9uKHtcbiAgICAgICAgICBxdWVyaWVzOiBjaGFuZ2VkUXVlcmllcyxcbiAgICAgICAgICByZWZsZWN0ZWRNdXRhdGlvbnM6IFtdLFxuICAgICAgICAgIHRpbWVzdGFtcDogdGhpcy5yZW1vdGVRdWVyeVNldC50aW1lc3RhbXAoKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgIHR5cGU6IFwiTXV0YXRpb25cIixcbiAgICAgIHJlcXVlc3RJZCxcbiAgICAgIHVkZlBhdGgsXG4gICAgICBjb21wb25lbnRQYXRoLFxuICAgICAgYXJnczogW2NvbnZleFRvSnNvbihtdXRhdGlvbkFyZ3MpXVxuICAgIH07XG4gICAgY29uc3QgbWlnaHRCZVNlbnQgPSB0aGlzLndlYlNvY2tldE1hbmFnZXIuc2VuZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgY29uc3QgbXV0YXRpb25Qcm9taXNlID0gdGhpcy5yZXF1ZXN0TWFuYWdlci5yZXF1ZXN0KG1lc3NhZ2UsIG1pZ2h0QmVTZW50KTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVxdWVzdElkLFxuICAgICAgbXV0YXRpb25Qcm9taXNlXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZSBhbiBhY3Rpb24gZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGFjdGlvbi5cbiAgICogQHBhcmFtIGFyZ3MgLSBBbiBhcmd1bWVudHMgb2JqZWN0IGZvciB0aGUgYWN0aW9uLiBJZiB0aGlzIGlzIG9taXR0ZWQsXG4gICAqIHRoZSBhcmd1bWVudHMgd2lsbCBiZSBge31gLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2Ugb2YgdGhlIGFjdGlvbidzIHJlc3VsdC5cbiAgICovXG4gIGFzeW5jIGFjdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hY3Rpb25JbnRlcm5hbChuYW1lLCBhcmdzKTtcbiAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICBpZiAocmVzdWx0LmVycm9yRGF0YSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHRocm93IGZvcndhcmREYXRhKFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBuZXcgQ29udmV4RXJyb3IoY3JlYXRlSHlicmlkRXJyb3JTdGFja3RyYWNlKFwiYWN0aW9uXCIsIG5hbWUsIHJlc3VsdCkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoY3JlYXRlSHlicmlkRXJyb3JTdGFja3RyYWNlKFwiYWN0aW9uXCIsIG5hbWUsIHJlc3VsdCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIGFjdGlvbkludGVybmFsKHVkZlBhdGgsIGFyZ3MsIGNvbXBvbmVudFBhdGgpIHtcbiAgICBjb25zdCBhY3Rpb25BcmdzID0gcGFyc2VBcmdzKGFyZ3MpO1xuICAgIGNvbnN0IHJlcXVlc3RJZCA9IHRoaXMubmV4dFJlcXVlc3RJZDtcbiAgICB0aGlzLl9uZXh0UmVxdWVzdElkKys7XG4gICAgdGhpcy50cnlSZXBvcnRMb25nRGlzY29ubmVjdCgpO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICB0eXBlOiBcIkFjdGlvblwiLFxuICAgICAgcmVxdWVzdElkLFxuICAgICAgdWRmUGF0aCxcbiAgICAgIGNvbXBvbmVudFBhdGgsXG4gICAgICBhcmdzOiBbY29udmV4VG9Kc29uKGFjdGlvbkFyZ3MpXVxuICAgIH07XG4gICAgY29uc3QgbWlnaHRCZVNlbnQgPSB0aGlzLndlYlNvY2tldE1hbmFnZXIuc2VuZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdE1hbmFnZXIucmVxdWVzdChtZXNzYWdlLCBtaWdodEJlU2VudCk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlIGFueSBuZXR3b3JrIGhhbmRsZXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY2xpZW50IGFuZCBzdG9wIGFsbCBzdWJzY3JpcHRpb25zLlxuICAgKlxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHdoZW4geW91J3JlIGRvbmUgd2l0aCBhbiB7QGxpbmsgQmFzZUNvbnZleENsaWVudH0gdG9cbiAgICogZGlzcG9zZSBvZiBpdHMgc29ja2V0cyBhbmQgcmVzb3VyY2VzLlxuICAgKlxuICAgKiBAcmV0dXJucyBBIGBQcm9taXNlYCBmdWxmaWxsZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBjb21wbGV0ZWx5IGNsb3NlZC5cbiAgICovXG4gIGFzeW5jIGNsb3NlKCkge1xuICAgIHRoaXMuYXV0aGVudGljYXRpb25NYW5hZ2VyLnN0b3AoKTtcbiAgICByZXR1cm4gdGhpcy53ZWJTb2NrZXRNYW5hZ2VyLnRlcm1pbmF0ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGFkZHJlc3MgZm9yIHRoaXMgY2xpZW50LCB1c2VmdWwgZm9yIGNyZWF0aW5nIGEgbmV3IGNsaWVudC5cbiAgICpcbiAgICogTm90IGd1YXJhbnRlZWQgdG8gbWF0Y2ggdGhlIGFkZHJlc3Mgd2l0aCB3aGljaCB0aGlzIGNsaWVudCB3YXMgY29uc3RydWN0ZWQ6XG4gICAqIGl0IG1heSBiZSBjYW5vbmljYWxpemVkLlxuICAgKi9cbiAgZ2V0IHVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5hZGRyZXNzO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldCBuZXh0UmVxdWVzdElkKCkge1xuICAgIHJldHVybiB0aGlzLl9uZXh0UmVxdWVzdElkO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldCBzZXNzaW9uSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nlc3Npb25JZDtcbiAgfVxuICAvKipcbiAgICogUmVwb3J0cyBwZXJmb3JtYW5jZSBtYXJrcyB0byB0aGUgc2VydmVyLiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gICAqIHdlIGhhdmUgYSBmdW5jdGlvbmFsIHdlYnNvY2tldC5cbiAgICovXG4gIHJlcG9ydE1hcmtzKCkge1xuICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICBjb25zdCByZXBvcnQgPSBnZXRNYXJrc1JlcG9ydCh0aGlzLnNlc3Npb25JZCk7XG4gICAgICB0aGlzLndlYlNvY2tldE1hbmFnZXIuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcIkV2ZW50XCIsXG4gICAgICAgIGV2ZW50VHlwZTogXCJDbGllbnRDb25uZWN0XCIsXG4gICAgICAgIGV2ZW50OiByZXBvcnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICB0cnlSZXBvcnRMb25nRGlzY29ubmVjdCgpIHtcbiAgICBpZiAoIXRoaXMuZGVidWcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGltZU9mT2xkZXN0UmVxdWVzdCA9IHRoaXMuY29ubmVjdGlvblN0YXRlKCkudGltZU9mT2xkZXN0SW5mbGlnaHRSZXF1ZXN0O1xuICAgIGlmICh0aW1lT2ZPbGRlc3RSZXF1ZXN0ID09PSBudWxsIHx8IERhdGUubm93KCkgLSB0aW1lT2ZPbGRlc3RSZXF1ZXN0LmdldFRpbWUoKSA8PSA2MCAqIDFlMykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBlbmRwb2ludCA9IGAke3RoaXMuYWRkcmVzc30vYXBpL2RlYnVnX2V2ZW50YDtcbiAgICBmZXRjaChlbmRwb2ludCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiQ29udmV4LUNsaWVudFwiOiBgbnBtLSR7dmVyc2lvbn1gXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBldmVudDogXCJMb25nV2Vic29ja2V0RGlzY29ubmVjdFwiIH0pXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihcbiAgICAgICAgICBcIkFuYWx5dGljcyByZXF1ZXN0IGZhaWxlZCB3aXRoIHJlc3BvbnNlOlwiLFxuICAgICAgICAgIHJlc3BvbnNlLmJvZHlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJBbmFseXRpY3MgcmVzcG9uc2UgZmFpbGVkIHdpdGggZXJyb3I6XCIsIGVycm9yKTtcbiAgICB9KTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwidmVyc2lvbiIsImNvbnZleFRvSnNvbiIsImNyZWF0ZUh5YnJpZEVycm9yU3RhY2t0cmFjZSIsImZvcndhcmREYXRhIiwiaW5zdGFudGlhdGVEZWZhdWx0TG9nZ2VyIiwiaW5zdGFudGlhdGVOb29wTG9nZ2VyIiwibG9nRmF0YWxFcnJvciIsIkxvY2FsU3luY1N0YXRlIiwiUmVxdWVzdE1hbmFnZXIiLCJPcHRpbWlzdGljUXVlcnlSZXN1bHRzIiwiUmVtb3RlUXVlcnlTZXQiLCJzZXJpYWxpemVQYXRoQW5kQXJncyIsIldlYlNvY2tldE1hbmFnZXIiLCJuZXdTZXNzaW9uSWQiLCJBdXRoZW50aWNhdGlvbk1hbmFnZXIiLCJnZXRNYXJrc1JlcG9ydCIsIm1hcmsiLCJwYXJzZUFyZ3MiLCJ2YWxpZGF0ZURlcGxveW1lbnRVcmwiLCJDb252ZXhFcnJvciIsIkJhc2VDb252ZXhDbGllbnQiLCJjb25zdHJ1Y3RvciIsImFkZHJlc3MiLCJvblRyYW5zaXRpb24iLCJvcHRpb25zIiwiTWFwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiY3VyQ29ubmVjdGlvblN0YXRlIiwiY29ubmVjdGlvblN0YXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9sYXN0UHVibGlzaGVkQ29ubmVjdGlvblN0YXRlIiwiY2IiLCJjb25uZWN0aW9uU3RhdGVTdWJzY3JpYmVycyIsInZhbHVlcyIsIm5hbWUiLCJkZWJ1ZyIsInNlc3Npb25JZCIsIkVycm9yIiwic2tpcENvbnZleERlcGxveW1lbnRVcmxDaGVjayIsImF1dGhSZWZyZXNoVG9rZW5MZWV3YXlTZWNvbmRzIiwid2ViU29ja2V0Q29uc3RydWN0b3IiLCJXZWJTb2NrZXQiLCJyZXBvcnREZWJ1Z0luZm9Ub0NvbnZleCIsImxvZ2dlciIsInZlcmJvc2UiLCJpIiwic2VhcmNoIiwib3JpZ2luIiwic3Vic3RyaW5nIiwicHJvdG9jb2wiLCJ3c1Byb3RvY29sIiwid3NVcmkiLCJzdGF0ZSIsInJlbW90ZVF1ZXJ5U2V0IiwicXVlcnlJZCIsInF1ZXJ5UGF0aCIsInJlcXVlc3RNYW5hZ2VyIiwibWFya0Nvbm5lY3Rpb25TdGF0ZURpcnR5IiwicGF1c2VTb2NrZXQiLCJ3ZWJTb2NrZXRNYW5hZ2VyIiwicGF1c2UiLCJhdXRoZW50aWNhdGlvbk1hbmFnZXIiLCJhdXRoZW50aWNhdGUiLCJ0b2tlbiIsIm1lc3NhZ2UiLCJzZXRBdXRoIiwic2VuZE1lc3NhZ2UiLCJiYXNlVmVyc2lvbiIsInN0b3BTb2NrZXQiLCJzdG9wIiwidHJ5UmVzdGFydFNvY2tldCIsInRyeVJlc3RhcnQiLCJyZXN1bWVTb2NrZXQiLCJyZXN1bWUiLCJjbGVhckF1dGgiLCJyZWZyZXNoVG9rZW5MZWV3YXlTZWNvbmRzIiwib3B0aW1pc3RpY1F1ZXJ5UmVzdWx0cyIsImFkZE9uVHJhbnNpdGlvbkhhbmRsZXIiLCJ0cmFuc2l0aW9uIiwicXVlcmllcyIsIm1hcCIsInEiLCJfbmV4dFJlcXVlc3RJZCIsIl9zZXNzaW9uSWQiLCJ1bnNhdmVkQ2hhbmdlc1dhcm5pbmciLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImhhc0luY29tcGxldGVSZXF1ZXN0cyIsInByZXZlbnREZWZhdWx0IiwiY29uZmlybWF0aW9uTWVzc2FnZSIsImV2ZW50IiwicmV0dXJuVmFsdWUiLCJvbk9wZW4iLCJyZWNvbm5lY3RNZXRhZGF0YSIsInR5cGUiLCJtYXhPYnNlcnZlZFRpbWVzdGFtcCIsIm9sZFJlbW90ZVF1ZXJ5UmVzdWx0cyIsIlNldCIsInJlbW90ZVF1ZXJ5UmVzdWx0cyIsImtleXMiLCJxdWVyeVNldE1vZGlmaWNhdGlvbiIsImF1dGhNb2RpZmljYXRpb24iLCJyZXN0YXJ0Iiwib25SZXN1bWUiLCJvbk1lc3NhZ2UiLCJzZXJ2ZXJNZXNzYWdlIiwiZmlyc3RNZXNzYWdlUmVjZWl2ZWQiLCJyZXBvcnRNYXJrcyIsIm9ic2VydmVkVGltZXN0YW1wIiwiZW5kVmVyc2lvbiIsInRzIiwiY29tcGxldGVkUmVxdWVzdHMiLCJyZW1vdmVDb21wbGV0ZWQiLCJ0aW1lc3RhbXAiLCJub3RpZnlPblF1ZXJ5UmVzdWx0Q2hhbmdlcyIsInN1Y2Nlc3MiLCJjb21wbGV0ZWRNdXRhdGlvbkluZm8iLCJvblJlc3BvbnNlIiwicmVxdWVzdElkIiwicmVzdWx0Iiwib25BdXRoRXJyb3IiLCJlcnJvciIsInRlcm1pbmF0ZSIsImhhc1N5bmNlZFBhc3RMYXN0UmVjb25uZWN0Iiwib25TZXJ2ZXJEaXNjb25uZWN0RXJyb3IiLCJleHBlY3RBdXRoIiwib2JzZXJ2ZWRUcyIsImxlc3NUaGFuT3JFcXVhbCIsImdldE1heE9ic2VydmVkVGltZXN0YW1wIiwicXVlcnlUb2tlblRvVmFsdWUiLCJxdWVyeVRva2VuIiwicXVlcnkiLCJ1ZGZQYXRoIiwiYXJncyIsInF1ZXJ5QXJncyIsInNldCIsImNoYW5nZWRRdWVyeVRva2VucyIsImluZ2VzdFF1ZXJ5UmVzdWx0c0Zyb21TZXJ2ZXIiLCJoYW5kbGVUcmFuc2l0aW9uIiwib3B0aW1pc3RpY1Jlc3VsdCIsInJhd1F1ZXJ5UmVzdWx0IiwibW9kaWZpY2F0aW9uIiwia2luZCIsInJlZmxlY3RlZE11dGF0aW9ucyIsIkFycmF5IiwiZnJvbSIsImZuIiwiX29uVHJhbnNpdGlvbkZucyIsImlkIiwiX3RyYW5zaXRpb25IYW5kbGVyQ291bnRlciIsImRlbGV0ZSIsImZldGNoVG9rZW4iLCJvbkNoYW5nZSIsInNldENvbmZpZyIsImhhc0F1dGgiLCJzZXRBZG1pbkF1dGgiLCJmYWtlVXNlcklkZW50aXR5Iiwic3Vic2NyaWJlIiwiYXJnc09iamVjdCIsInVuc3Vic2NyaWJlIiwiam91cm5hbCIsImNvbXBvbmVudFBhdGgiLCJtb2RpZmljYXRpb24yIiwibG9jYWxRdWVyeVJlc3VsdCIsInF1ZXJ5UmVzdWx0IiwibG9jYWxRdWVyeVJlc3VsdEJ5VG9rZW4iLCJoYXNMb2NhbFF1ZXJ5UmVzdWx0QnlUb2tlbiIsImhhc1F1ZXJ5UmVzdWx0IiwibG9jYWxRdWVyeUxvZ3MiLCJxdWVyeUxvZ3MiLCJxdWVyeUpvdXJuYWwiLCJ3c0Nvbm5lY3Rpb25TdGF0ZSIsImhhc0luZmxpZ2h0UmVxdWVzdHMiLCJpc1dlYlNvY2tldENvbm5lY3RlZCIsImlzQ29ubmVjdGVkIiwiaGFzRXZlckNvbm5lY3RlZCIsImNvbm5lY3Rpb25Db3VudCIsImNvbm5lY3Rpb25SZXRyaWVzIiwidGltZU9mT2xkZXN0SW5mbGlnaHRSZXF1ZXN0IiwiaW5mbGlnaHRNdXRhdGlvbnMiLCJpbmZsaWdodEFjdGlvbnMiLCJzdWJzY3JpYmVUb0Nvbm5lY3Rpb25TdGF0ZSIsIm5leHRDb25uZWN0aW9uU3RhdGVTdWJzY3JpYmVySWQiLCJtdXRhdGlvbiIsIm11dGF0aW9uSW50ZXJuYWwiLCJlcnJvckRhdGEiLCJtdXRhdGlvblByb21pc2UiLCJlbnF1ZXVlTXV0YXRpb24iLCJtdXRhdGlvbkFyZ3MiLCJ0cnlSZXBvcnRMb25nRGlzY29ubmVjdCIsIm5leHRSZXF1ZXN0SWQiLCJvcHRpbWlzdGljVXBkYXRlIiwid3JhcHBlZFVwZGF0ZSIsImxvY2FsUXVlcnlTdG9yZSIsIndhcm4iLCJhcHBseU9wdGltaXN0aWNVcGRhdGUiLCJjaGFuZ2VkUXVlcmllcyIsImxvY2FsUmVzdWx0IiwibG9nTGluZXMiLCJtaWdodEJlU2VudCIsInJlcXVlc3QiLCJhY3Rpb24iLCJhY3Rpb25JbnRlcm5hbCIsImFjdGlvbkFyZ3MiLCJjbG9zZSIsInVybCIsInJlcG9ydCIsImV2ZW50VHlwZSIsInRpbWVPZk9sZGVzdFJlcXVlc3QiLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsImVuZHBvaW50IiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsInJlc3BvbnNlIiwib2siLCJjYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/client.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/local_state.js':
    /*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/local_state.js ***!
  \********************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalSyncState: () => (/* binding */ LocalSyncState)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./udf_path_utils.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/udf_path_utils.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\nclass LocalSyncState {\n    constructor(){\n        __publicField(this, "nextQueryId");\n        __publicField(this, "querySetVersion");\n        __publicField(this, "querySet");\n        __publicField(this, "queryIdToToken");\n        __publicField(this, "identityVersion");\n        __publicField(this, "auth");\n        __publicField(this, "outstandingQueriesOlderThanRestart");\n        __publicField(this, "outstandingAuthOlderThanRestart");\n        __publicField(this, "paused");\n        __publicField(this, "pendingQuerySetModifications");\n        this.nextQueryId = 0;\n        this.querySetVersion = 0;\n        this.identityVersion = 0;\n        this.querySet = /* @__PURE__ */ new Map();\n        this.queryIdToToken = /* @__PURE__ */ new Map();\n        this.outstandingQueriesOlderThanRestart = /* @__PURE__ */ new Set();\n        this.outstandingAuthOlderThanRestart = false;\n        this.paused = false;\n        this.pendingQuerySetModifications = /* @__PURE__ */ new Map();\n    }\n    hasSyncedPastLastReconnect() {\n        return this.outstandingQueriesOlderThanRestart.size === 0 && !this.outstandingAuthOlderThanRestart;\n    }\n    markAuthCompletion() {\n        this.outstandingAuthOlderThanRestart = false;\n    }\n    subscribe(udfPath, args, journal, componentPath) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            existingEntry.numSubscribers += 1;\n            return {\n                queryToken,\n                modification: null,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        } else {\n            const queryId = this.nextQueryId++;\n            const query = {\n                id: queryId,\n                canonicalizedUdfPath,\n                args,\n                numSubscribers: 1,\n                journal,\n                componentPath\n            };\n            this.querySet.set(queryToken, query);\n            this.queryIdToToken.set(queryId, queryToken);\n            const baseVersion = this.querySetVersion;\n            const newVersion = this.querySetVersion + 1;\n            const add = {\n                type: "Add",\n                queryId,\n                udfPath: canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n                ],\n                journal,\n                componentPath\n            };\n            if (this.paused) {\n                this.pendingQuerySetModifications.set(queryId, add);\n            } else {\n                this.querySetVersion = newVersion;\n            }\n            const modification = {\n                type: "ModifyQuerySet",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    add\n                ]\n            };\n            return {\n                queryToken,\n                modification,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        }\n    }\n    transition(transition) {\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case "QueryUpdated":\n                case "QueryFailed":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        const journal = modification.journal;\n                        if (journal !== void 0) {\n                            const queryToken = this.queryIdToToken.get(modification.queryId);\n                            if (queryToken !== void 0) {\n                                this.querySet.get(queryToken).journal = journal;\n                            }\n                        }\n                        break;\n                    }\n                case "QueryRemoved":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        modification;\n                        throw new Error(`Invalid modification ${modification.type}`);\n                    }\n            }\n        }\n    }\n    queryId(udfPath, args) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            return existingEntry.id;\n        }\n        return null;\n    }\n    isCurrentOrNewerAuthVersion(version) {\n        return version >= this.identityVersion;\n    }\n    setAuth(value) {\n        this.auth = {\n            tokenType: "User",\n            value\n        };\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: "Authenticate",\n            baseVersion,\n            ...this.auth\n        };\n    }\n    setAdminAuth(value, actingAs) {\n        const auth = {\n            tokenType: "Admin",\n            value,\n            impersonating: actingAs\n        };\n        this.auth = auth;\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: "Authenticate",\n            baseVersion,\n            ...auth\n        };\n    }\n    clearAuth() {\n        this.auth = void 0;\n        this.markAuthCompletion();\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: "Authenticate",\n            tokenType: "None",\n            baseVersion\n        };\n    }\n    hasAuth() {\n        return !!this.auth;\n    }\n    isNewAuth(value) {\n        return this.auth?.value !== value;\n    }\n    queryPath(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).canonicalizedUdfPath;\n        }\n        return null;\n    }\n    queryArgs(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).args;\n        }\n        return null;\n    }\n    queryToken(queryId) {\n        return this.queryIdToToken.get(queryId) ?? null;\n    }\n    queryJournal(queryToken) {\n        return this.querySet.get(queryToken)?.journal;\n    }\n    restart(oldRemoteQueryResults) {\n        this.unpause();\n        this.outstandingQueriesOlderThanRestart.clear();\n        const modifications = [];\n        for (const localQuery of this.querySet.values()){\n            const add = {\n                type: "Add",\n                queryId: localQuery.id,\n                udfPath: localQuery.canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(localQuery.args)\n                ],\n                journal: localQuery.journal,\n                componentPath: localQuery.componentPath\n            };\n            modifications.push(add);\n            if (!oldRemoteQueryResults.has(localQuery.id)) {\n                this.outstandingQueriesOlderThanRestart.add(localQuery.id);\n            }\n        }\n        this.querySetVersion = 1;\n        const querySet = {\n            type: "ModifyQuerySet",\n            baseVersion: 0,\n            newVersion: 1,\n            modifications\n        };\n        if (!this.auth) {\n            this.identityVersion = 0;\n            return [\n                querySet,\n                void 0\n            ];\n        }\n        this.outstandingAuthOlderThanRestart = true;\n        const authenticate = {\n            type: "Authenticate",\n            baseVersion: 0,\n            ...this.auth\n        };\n        this.identityVersion = 1;\n        return [\n            querySet,\n            authenticate\n        ];\n    }\n    pause() {\n        this.paused = true;\n    }\n    resume() {\n        const querySet = this.pendingQuerySetModifications.size > 0 ? {\n            type: "ModifyQuerySet",\n            baseVersion: this.querySetVersion,\n            newVersion: ++this.querySetVersion,\n            modifications: Array.from(this.pendingQuerySetModifications.values())\n        } : void 0;\n        const authenticate = this.auth !== void 0 ? {\n            type: "Authenticate",\n            baseVersion: this.identityVersion++,\n            ...this.auth\n        } : void 0;\n        this.unpause();\n        return [\n            querySet,\n            authenticate\n        ];\n    }\n    unpause() {\n        this.paused = false;\n        this.pendingQuerySetModifications.clear();\n    }\n    removeSubscriber(queryToken) {\n        const localQuery = this.querySet.get(queryToken);\n        if (localQuery.numSubscribers > 1) {\n            localQuery.numSubscribers -= 1;\n            return null;\n        } else {\n            this.querySet.delete(queryToken);\n            this.queryIdToToken.delete(localQuery.id);\n            this.outstandingQueriesOlderThanRestart.delete(localQuery.id);\n            const baseVersion = this.querySetVersion;\n            const newVersion = this.querySetVersion + 1;\n            const remove = {\n                type: "Remove",\n                queryId: localQuery.id\n            };\n            if (this.paused) {\n                if (this.pendingQuerySetModifications.has(localQuery.id)) {\n                    this.pendingQuerySetModifications.delete(localQuery.id);\n                } else {\n                    this.pendingQuerySetModifications.set(localQuery.id, remove);\n                }\n            } else {\n                this.querySetVersion = newVersion;\n            }\n            return {\n                type: "ModifyQuerySet",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    remove\n                ]\n            };\n        }\n    }\n} //# sourceMappingURL=local_state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/local_state.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/metrics.js':
    /*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/metrics.js ***!
  \****************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMarksReport: () => (/* binding */ getMarksReport),\n/* harmony export */   mark: () => (/* binding */ mark)\n/* harmony export */ });\n\nconst markNames = [\n    "convexClientConstructed",\n    "convexWebSocketOpen",\n    "convexFirstMessageReceived"\n];\nfunction mark(name, sessionId) {\n    const detail = {\n        sessionId\n    };\n    if (typeof performance === "undefined" || !performance.mark) return;\n    performance.mark(name, {\n        detail\n    });\n}\nfunction performanceMarkToJson(mark2) {\n    let name = mark2.name.slice("convex".length);\n    name = name.charAt(0).toLowerCase() + name.slice(1);\n    return {\n        name,\n        startTime: mark2.startTime\n    };\n}\nfunction getMarksReport(sessionId) {\n    if (typeof performance === "undefined" || !performance.getEntriesByName) {\n        return [];\n    }\n    const allMarks = [];\n    for (const name of markNames){\n        const marks = performance.getEntriesByName(name).filter((entry)=>entry.entryType === "mark").filter((mark2)=>mark2.detail.sessionId === sessionId);\n        allMarks.push(...marks);\n    }\n    return allMarks.map(performanceMarkToJson);\n} //# sourceMappingURL=metrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL21ldHJpY3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBYTtBQUNiLE1BQU1BLFlBQVk7SUFDaEI7SUFDQTtJQUNBO0NBQ0Q7QUFDTSxTQUFTQyxLQUFLQyxJQUFJLEVBQUVDLFNBQVM7SUFDbEMsTUFBTUMsU0FBUztRQUFFRDtJQUFVO0lBQzNCLElBQUksT0FBT0UsZ0JBQWdCLGVBQWUsQ0FBQ0EsWUFBWUosSUFBSSxFQUFFO0lBQzdESSxZQUFZSixJQUFJLENBQUNDLE1BQU07UUFBRUU7SUFBTztBQUNsQztBQUNBLFNBQVNFLHNCQUFzQkMsS0FBSztJQUNsQyxJQUFJTCxPQUFPSyxNQUFNTCxJQUFJLENBQUNNLEtBQUssQ0FBQyxTQUFTQyxNQUFNO0lBQzNDUCxPQUFPQSxLQUFLUSxNQUFNLENBQUMsR0FBR0MsV0FBVyxLQUFLVCxLQUFLTSxLQUFLLENBQUM7SUFDakQsT0FBTztRQUNMTjtRQUNBVSxXQUFXTCxNQUFNSyxTQUFTO0lBQzVCO0FBQ0Y7QUFDTyxTQUFTQyxlQUFlVixTQUFTO0lBQ3RDLElBQUksT0FBT0UsZ0JBQWdCLGVBQWUsQ0FBQ0EsWUFBWVMsZ0JBQWdCLEVBQUU7UUFDdkUsT0FBTyxFQUFFO0lBQ1g7SUFDQSxNQUFNQyxXQUFXLEVBQUU7SUFDbkIsS0FBSyxNQUFNYixRQUFRRixVQUFXO1FBQzVCLE1BQU1nQixRQUFRWCxZQUFZUyxnQkFBZ0IsQ0FBQ1osTUFBTWUsTUFBTSxDQUFDLENBQUNDLFFBQVVBLE1BQU1DLFNBQVMsS0FBSyxRQUFRRixNQUFNLENBQUMsQ0FBQ1YsUUFBVUEsTUFBTUgsTUFBTSxDQUFDRCxTQUFTLEtBQUtBO1FBQzVJWSxTQUFTSyxJQUFJLElBQUlKO0lBQ25CO0lBQ0EsT0FBT0QsU0FBU00sR0FBRyxDQUFDZjtBQUN0QixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9tZXRyaWNzLmpzPzliYWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBtYXJrTmFtZXMgPSBbXG4gIFwiY29udmV4Q2xpZW50Q29uc3RydWN0ZWRcIixcbiAgXCJjb252ZXhXZWJTb2NrZXRPcGVuXCIsXG4gIFwiY29udmV4Rmlyc3RNZXNzYWdlUmVjZWl2ZWRcIlxuXTtcbmV4cG9ydCBmdW5jdGlvbiBtYXJrKG5hbWUsIHNlc3Npb25JZCkge1xuICBjb25zdCBkZXRhaWwgPSB7IHNlc3Npb25JZCB9O1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlID09PSBcInVuZGVmaW5lZFwiIHx8ICFwZXJmb3JtYW5jZS5tYXJrKSByZXR1cm47XG4gIHBlcmZvcm1hbmNlLm1hcmsobmFtZSwgeyBkZXRhaWwgfSk7XG59XG5mdW5jdGlvbiBwZXJmb3JtYW5jZU1hcmtUb0pzb24obWFyazIpIHtcbiAgbGV0IG5hbWUgPSBtYXJrMi5uYW1lLnNsaWNlKFwiY29udmV4XCIubGVuZ3RoKTtcbiAgbmFtZSA9IG5hbWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgc3RhcnRUaW1lOiBtYXJrMi5zdGFydFRpbWVcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXJrc1JlcG9ydChzZXNzaW9uSWQpIHtcbiAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhcGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5TmFtZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBhbGxNYXJrcyA9IFtdO1xuICBmb3IgKGNvbnN0IG5hbWUgb2YgbWFya05hbWVzKSB7XG4gICAgY29uc3QgbWFya3MgPSBwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lKG5hbWUpLmZpbHRlcigoZW50cnkpID0+IGVudHJ5LmVudHJ5VHlwZSA9PT0gXCJtYXJrXCIpLmZpbHRlcigobWFyazIpID0+IG1hcmsyLmRldGFpbC5zZXNzaW9uSWQgPT09IHNlc3Npb25JZCk7XG4gICAgYWxsTWFya3MucHVzaCguLi5tYXJrcyk7XG4gIH1cbiAgcmV0dXJuIGFsbE1hcmtzLm1hcChwZXJmb3JtYW5jZU1hcmtUb0pzb24pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cmljcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJtYXJrTmFtZXMiLCJtYXJrIiwibmFtZSIsInNlc3Npb25JZCIsImRldGFpbCIsInBlcmZvcm1hbmNlIiwicGVyZm9ybWFuY2VNYXJrVG9Kc29uIiwibWFyazIiLCJzbGljZSIsImxlbmd0aCIsImNoYXJBdCIsInRvTG93ZXJDYXNlIiwic3RhcnRUaW1lIiwiZ2V0TWFya3NSZXBvcnQiLCJnZXRFbnRyaWVzQnlOYW1lIiwiYWxsTWFya3MiLCJtYXJrcyIsImZpbHRlciIsImVudHJ5IiwiZW50cnlUeXBlIiwicHVzaCIsIm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/metrics.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js':
    /*!********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js ***!
  \********************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OptimisticQueryResults: () => (/* binding */ OptimisticQueryResults)\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../server/api.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/logging.js");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./udf_path_utils.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/udf_path_utils.js");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../values/errors.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/errors.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\n\n\nclass OptimisticLocalStoreImpl {\n    constructor(queryResults){\n        // A references of the query results in OptimisticQueryResults\n        __publicField(this, "queryResults");\n        // All of the queries modified by this class\n        __publicField(this, "modifiedQueries");\n        this.queryResults = queryResults;\n        this.modifiedQueries = [];\n    }\n    getQuery(query, ...args) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const queryResult = this.queryResults.get((0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs));\n        if (queryResult === void 0) {\n            return void 0;\n        }\n        return OptimisticLocalStoreImpl.queryValue(queryResult.result);\n    }\n    getAllQueries(query) {\n        const queriesWithName = [];\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        for (const queryResult of this.queryResults.values()){\n            if (queryResult.udfPath === (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.canonicalizeUdfPath)(name)) {\n                queriesWithName.push({\n                    args: queryResult.args,\n                    value: OptimisticLocalStoreImpl.queryValue(queryResult.result)\n                });\n            }\n        }\n        return queriesWithName;\n    }\n    setQuery(queryReference, args, value) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(queryReference);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs);\n        let result;\n        if (value === void 0) {\n            result = void 0;\n        } else {\n            result = {\n                success: true,\n                value,\n                // It\'s an optimistic update, so there are no function logs to show.\n                logLines: []\n            };\n        }\n        const query = {\n            udfPath: name,\n            args: queryArgs,\n            result\n        };\n        this.queryResults.set(queryToken, query);\n        this.modifiedQueries.push(queryToken);\n    }\n    static queryValue(result) {\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            return void 0;\n        }\n    }\n}\nclass OptimisticQueryResults {\n    constructor(){\n        __publicField(this, "queryResults");\n        __publicField(this, "optimisticUpdates");\n        this.queryResults = /* @__PURE__ */ new Map();\n        this.optimisticUpdates = [];\n    }\n    /**\n   * Apply all optimistic updates on top of server query results\n   */ ingestQueryResultsFromServer(serverQueryResults, optimisticUpdatesToDrop) {\n        this.optimisticUpdates = this.optimisticUpdates.filter((updateAndId)=>{\n            return !optimisticUpdatesToDrop.has(updateAndId.mutationId);\n        });\n        const oldQueryResults = this.queryResults;\n        this.queryResults = new Map(serverQueryResults);\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        for (const updateAndId of this.optimisticUpdates){\n            updateAndId.update(localStore);\n        }\n        const changedQueries = [];\n        for (const [queryToken, query] of this.queryResults){\n            const oldQuery = oldQueryResults.get(queryToken);\n            if (oldQuery === void 0 || oldQuery.result !== query.result) {\n                changedQueries.push(queryToken);\n            }\n        }\n        return changedQueries;\n    }\n    applyOptimisticUpdate(update, mutationId) {\n        this.optimisticUpdates.push({\n            update,\n            mutationId\n        });\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        update(localStore);\n        return localStore.modifiedQueries;\n    }\n    /**\n   * @internal\n   */ rawQueryResult(queryToken) {\n        return this.queryResults.get(queryToken);\n    }\n    queryResult(queryToken) {\n        const query = this.queryResults.get(queryToken);\n        if (query === void 0) {\n            return void 0;\n        }\n        const result = query.result;\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_4__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)("query", query.udfPath, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)("query", query.udfPath, result));\n        }\n    }\n    hasQueryResult(queryToken) {\n        return this.queryResults.get(queryToken) !== void 0;\n    }\n    /**\n   * @internal\n   */ queryLogs(queryToken) {\n        const query = this.queryResults.get(queryToken);\n        return query?.result?.logLines;\n    }\n} //# sourceMappingURL=optimistic_updates_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL29wdGltaXN0aWNfdXBkYXRlc19pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFhO0FBQ2IsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0MsUUFBVUgsZ0JBQWdCQyxLQUFLLE9BQU9DLFFBQVEsV0FBV0EsTUFBTSxLQUFLQSxLQUFLQztBQUczRTtBQUNxQjtBQUN1QjtBQUk1QztBQUN3QjtBQUNyRCxNQUFNWTtJQUNKQyxZQUFZQyxZQUFZLENBQUU7UUFDeEIsOERBQThEO1FBQzlEVixjQUFjLElBQUksRUFBRTtRQUNwQiw0Q0FBNEM7UUFDNUNBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQ1UsWUFBWSxHQUFHQTtRQUNwQixJQUFJLENBQUNDLGVBQWUsR0FBRyxFQUFFO0lBQzNCO0lBQ0FDLFNBQVNDLEtBQUssRUFBRSxHQUFHQyxJQUFJLEVBQUU7UUFDdkIsTUFBTUMsWUFBWWIsMkRBQVNBLENBQUNZLElBQUksQ0FBQyxFQUFFO1FBQ25DLE1BQU1FLE9BQU9mLCtEQUFlQSxDQUFDWTtRQUM3QixNQUFNSSxjQUFjLElBQUksQ0FBQ1AsWUFBWSxDQUFDUSxHQUFHLENBQ3ZDWix3RUFBb0JBLENBQUNVLE1BQU1EO1FBRTdCLElBQUlFLGdCQUFnQixLQUFLLEdBQUc7WUFDMUIsT0FBTyxLQUFLO1FBQ2Q7UUFDQSxPQUFPVCx5QkFBeUJXLFVBQVUsQ0FB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L2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL29wdGltaXN0aWNfdXBkYXRlc19pbXBsLmpzP2E1ODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuaW1wb3J0IHtcbiAgZ2V0RnVuY3Rpb25OYW1lXG59IGZyb20gXCIuLi8uLi9zZXJ2ZXIvYXBpLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUFyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVIeWJyaWRFcnJvclN0YWNrdHJhY2UsIGZvcndhcmREYXRhIH0gZnJvbSBcIi4uL2xvZ2dpbmcuanNcIjtcbmltcG9ydCB7XG4gIGNhbm9uaWNhbGl6ZVVkZlBhdGgsXG4gIHNlcmlhbGl6ZVBhdGhBbmRBcmdzXG59IGZyb20gXCIuL3VkZl9wYXRoX3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBDb252ZXhFcnJvciB9IGZyb20gXCIuLi8uLi92YWx1ZXMvZXJyb3JzLmpzXCI7XG5jbGFzcyBPcHRpbWlzdGljTG9jYWxTdG9yZUltcGwge1xuICBjb25zdHJ1Y3RvcihxdWVyeVJlc3VsdHMpIHtcbiAgICAvLyBBIHJlZmVyZW5jZXMgb2YgdGhlIHF1ZXJ5IHJlc3VsdHMgaW4gT3B0aW1pc3RpY1F1ZXJ5UmVzdWx0c1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJxdWVyeVJlc3VsdHNcIik7XG4gICAgLy8gQWxsIG9mIHRoZSBxdWVyaWVzIG1vZGlmaWVkIGJ5IHRoaXMgY2xhc3NcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibW9kaWZpZWRRdWVyaWVzXCIpO1xuICAgIHRoaXMucXVlcnlSZXN1bHRzID0gcXVlcnlSZXN1bHRzO1xuICAgIHRoaXMubW9kaWZpZWRRdWVyaWVzID0gW107XG4gIH1cbiAgZ2V0UXVlcnkocXVlcnksIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBxdWVyeUFyZ3MgPSBwYXJzZUFyZ3MoYXJnc1swXSk7XG4gICAgY29uc3QgbmFtZSA9IGdldEZ1bmN0aW9uTmFtZShxdWVyeSk7XG4gICAgY29uc3QgcXVlcnlSZXN1bHQgPSB0aGlzLnF1ZXJ5UmVzdWx0cy5nZXQoXG4gICAgICBzZXJpYWxpemVQYXRoQW5kQXJncyhuYW1lLCBxdWVyeUFyZ3MpXG4gICAgKTtcbiAgICBpZiAocXVlcnlSZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIE9wdGltaXN0aWNMb2NhbFN0b3JlSW1wbC5xdWVyeVZhbHVlKHF1ZXJ5UmVzdWx0LnJlc3VsdCk7XG4gIH1cbiAgZ2V0QWxsUXVlcmllcyhxdWVyeSkge1xuICAgIGNvbnN0IHF1ZXJpZXNXaXRoTmFtZSA9IFtdO1xuICAgIGNvbnN0IG5hbWUgPSBnZXRGdW5jdGlvbk5hbWUocXVlcnkpO1xuICAgIGZvciAoY29uc3QgcXVlcnlSZXN1bHQgb2YgdGhpcy5xdWVyeVJlc3VsdHMudmFsdWVzKCkpIHtcbiAgICAgIGlmIChxdWVyeVJlc3VsdC51ZGZQYXRoID09PSBjYW5vbmljYWxpemVVZGZQYXRoKG5hbWUpKSB7XG4gICAgICAgIHF1ZXJpZXNXaXRoTmFtZS5wdXNoKHtcbiAgICAgICAgICBhcmdzOiBxdWVyeVJlc3VsdC5hcmdzLFxuICAgICAgICAgIHZhbHVlOiBPcHRpbWlzdGljTG9jYWxTdG9yZUltcGwucXVlcnlWYWx1ZShxdWVyeVJlc3VsdC5yZXN1bHQpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXVlcmllc1dpdGhOYW1lO1xuICB9XG4gIHNldFF1ZXJ5KHF1ZXJ5UmVmZXJlbmNlLCBhcmdzLCB2YWx1ZSkge1xuICAgIGNvbnN0IHF1ZXJ5QXJncyA9IHBhcnNlQXJncyhhcmdzKTtcbiAgICBjb25zdCBuYW1lID0gZ2V0RnVuY3Rpb25OYW1lKHF1ZXJ5UmVmZXJlbmNlKTtcbiAgICBjb25zdCBxdWVyeVRva2VuID0gc2VyaWFsaXplUGF0aEFuZEFyZ3MobmFtZSwgcXVlcnlBcmdzKTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQgPSB2b2lkIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIC8vIEl0J3MgYW4gb3B0aW1pc3RpYyB1cGRhdGUsIHNvIHRoZXJlIGFyZSBubyBmdW5jdGlvbiBsb2dzIHRvIHNob3cuXG4gICAgICAgIGxvZ0xpbmVzOiBbXVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcXVlcnkgPSB7XG4gICAgICB1ZGZQYXRoOiBuYW1lLFxuICAgICAgYXJnczogcXVlcnlBcmdzLFxuICAgICAgcmVzdWx0XG4gICAgfTtcbiAgICB0aGlzLnF1ZXJ5UmVzdWx0cy5zZXQocXVlcnlUb2tlbiwgcXVlcnkpO1xuICAgIHRoaXMubW9kaWZpZWRRdWVyaWVzLnB1c2gocXVlcnlUb2tlbik7XG4gIH1cbiAgc3RhdGljIHF1ZXJ5VmFsdWUocmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICB9XG59XG5leHBvcnQgY2xhc3MgT3B0aW1pc3RpY1F1ZXJ5UmVzdWx0cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJxdWVyeVJlc3VsdHNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9wdGltaXN0aWNVcGRhdGVzXCIpO1xuICAgIHRoaXMucXVlcnlSZXN1bHRzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB0aGlzLm9wdGltaXN0aWNVcGRhdGVzID0gW107XG4gIH1cbiAgLyoqXG4gICAqIEFwcGx5IGFsbCBvcHRpbWlzdGljIHVwZGF0ZXMgb24gdG9wIG9mIHNlcnZlciBxdWVyeSByZXN1bHRzXG4gICAqL1xuICBpbmdlc3RRdWVyeVJlc3VsdHNGcm9tU2VydmVyKHNlcnZlclF1ZXJ5UmVzdWx0cywgb3B0aW1pc3RpY1VwZGF0ZXNUb0Ryb3ApIHtcbiAgICB0aGlzLm9wdGltaXN0aWNVcGRhdGVzID0gdGhpcy5vcHRpbWlzdGljVXBkYXRlcy5maWx0ZXIoKHVwZGF0ZUFuZElkKSA9PiB7XG4gICAgICByZXR1cm4gIW9wdGltaXN0aWNVcGRhdGVzVG9Ecm9wLmhhcyh1cGRhdGVBbmRJZC5tdXRhdGlvbklkKTtcbiAgICB9KTtcbiAgICBjb25zdCBvbGRRdWVyeVJlc3VsdHMgPSB0aGlzLnF1ZXJ5UmVzdWx0cztcbiAgICB0aGlzLnF1ZXJ5UmVzdWx0cyA9IG5ldyBNYXAoc2VydmVyUXVlcnlSZXN1bHRzKTtcbiAgICBjb25zdCBsb2NhbFN0b3JlID0gbmV3IE9wdGltaXN0aWNMb2NhbFN0b3JlSW1wbCh0aGlzLnF1ZXJ5UmVzdWx0cyk7XG4gICAgZm9yIChjb25zdCB1cGRhdGVBbmRJZCBvZiB0aGlzLm9wdGltaXN0aWNVcGRhdGVzKSB7XG4gICAgICB1cGRhdGVBbmRJZC51cGRhdGUobG9jYWxTdG9yZSk7XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWRRdWVyaWVzID0gW107XG4gICAgZm9yIChjb25zdCBbcXVlcnlUb2tlbiwgcXVlcnldIG9mIHRoaXMucXVlcnlSZXN1bHRzKSB7XG4gICAgICBjb25zdCBvbGRRdWVyeSA9IG9sZFF1ZXJ5UmVzdWx0cy5nZXQocXVlcnlUb2tlbik7XG4gICAgICBpZiAob2xkUXVlcnkgPT09IHZvaWQgMCB8fCBvbGRRdWVyeS5yZXN1bHQgIT09IHF1ZXJ5LnJlc3VsdCkge1xuICAgICAgICBjaGFuZ2VkUXVlcmllcy5wdXNoKHF1ZXJ5VG9rZW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZFF1ZXJpZXM7XG4gIH1cbiAgYXBwbHlPcHRpbWlzdGljVXBkYXRlKHVwZGF0ZSwgbXV0YXRpb25JZCkge1xuICAgIHRoaXMub3B0aW1pc3RpY1VwZGF0ZXMucHVzaCh7XG4gICAgICB1cGRhdGUsXG4gICAgICBtdXRhdGlvbklkXG4gICAgfSk7XG4gICAgY29uc3QgbG9jYWxTdG9yZSA9IG5ldyBPcHRpbWlzdGljTG9jYWxTdG9yZUltcGwodGhpcy5xdWVyeVJlc3VsdHMpO1xuICAgIHVwZGF0ZShsb2NhbFN0b3JlKTtcbiAgICByZXR1cm4gbG9jYWxTdG9yZS5tb2RpZmllZFF1ZXJpZXM7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmF3UXVlcnlSZXN1bHQocXVlcnlUb2tlbikge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5UmVzdWx0cy5nZXQocXVlcnlUb2tlbik7XG4gIH1cbiAgcXVlcnlSZXN1bHQocXVlcnlUb2tlbikge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5xdWVyeVJlc3VsdHMuZ2V0KHF1ZXJ5VG9rZW4pO1xuICAgIGlmIChxdWVyeSA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBxdWVyeS5yZXN1bHQ7XG4gICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3JEYXRhICE9PSB2b2lkIDApIHtcbiAgICAgICAgdGhyb3cgZm9yd2FyZERhdGEoXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIG5ldyBDb252ZXhFcnJvcihcbiAgICAgICAgICAgIGNyZWF0ZUh5YnJpZEVycm9yU3RhY2t0cmFjZShcInF1ZXJ5XCIsIHF1ZXJ5LnVkZlBhdGgsIHJlc3VsdClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGNyZWF0ZUh5YnJpZEVycm9yU3RhY2t0cmFjZShcInF1ZXJ5XCIsIHF1ZXJ5LnVkZlBhdGgsIHJlc3VsdClcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGhhc1F1ZXJ5UmVzdWx0KHF1ZXJ5VG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVJlc3VsdHMuZ2V0KHF1ZXJ5VG9rZW4pICE9PSB2b2lkIDA7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcXVlcnlMb2dzKHF1ZXJ5VG9rZW4pIHtcbiAgICBjb25zdCBxdWVyeSA9IHRoaXMucXVlcnlSZXN1bHRzLmdldChxdWVyeVRva2VuKTtcbiAgICByZXR1cm4gcXVlcnk/LnJlc3VsdD8ubG9nTGluZXM7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wdGltaXN0aWNfdXBkYXRlc19pbXBsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiZ2V0RnVuY3Rpb25OYW1lIiwicGFyc2VBcmdzIiwiY3JlYXRlSHlicmlkRXJyb3JTdGFja3RyYWNlIiwiZm9yd2FyZERhdGEiLCJjYW5vbmljYWxpemVVZGZQYXRoIiwic2VyaWFsaXplUGF0aEFuZEFyZ3MiLCJDb252ZXhFcnJvciIsIk9wdGltaXN0aWNMb2NhbFN0b3JlSW1wbCIsImNvbnN0cnVjdG9yIiwicXVlcnlSZXN1bHRzIiwibW9kaWZpZWRRdWVyaWVzIiwiZ2V0UXVlcnkiLCJxdWVyeSIsImFyZ3MiLCJxdWVyeUFyZ3MiLCJuYW1lIiwicXVlcnlSZXN1bHQiLCJnZXQiLCJxdWVyeVZhbHVlIiwicmVzdWx0IiwiZ2V0QWxsUXVlcmllcyIsInF1ZXJpZXNXaXRoTmFtZSIsInZhbHVlcyIsInVkZlBhdGgiLCJwdXNoIiwic2V0UXVlcnkiLCJxdWVyeVJlZmVyZW5jZSIsInF1ZXJ5VG9rZW4iLCJzdWNjZXNzIiwibG9nTGluZXMiLCJzZXQiLCJPcHRpbWlzdGljUXVlcnlSZXN1bHRzIiwiTWFwIiwib3B0aW1pc3RpY1VwZGF0ZXMiLCJpbmdlc3RRdWVyeVJlc3VsdHNGcm9tU2VydmVyIiwic2VydmVyUXVlcnlSZXN1bHRzIiwib3B0aW1pc3RpY1VwZGF0ZXNUb0Ryb3AiLCJmaWx0ZXIiLCJ1cGRhdGVBbmRJZCIsImhhcyIsIm11dGF0aW9uSWQiLCJvbGRRdWVyeVJlc3VsdHMiLCJsb2NhbFN0b3JlIiwidXBkYXRlIiwiY2hhbmdlZFF1ZXJpZXMiLCJvbGRRdWVyeSIsImFwcGx5T3B0aW1pc3RpY1VwZGF0ZSIsInJhd1F1ZXJ5UmVzdWx0IiwiZXJyb3JEYXRhIiwiRXJyb3IiLCJoYXNRdWVyeVJlc3VsdCIsInF1ZXJ5TG9ncyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/protocol.js':
    /*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/protocol.js ***!
  \*****************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeClientMessage: () => (/* binding */ encodeClientMessage),\n/* harmony export */   longToU64: () => (/* binding */ longToU64),\n/* harmony export */   parseServerMessage: () => (/* binding */ parseServerMessage),\n/* harmony export */   u64ToLong: () => (/* binding */ u64ToLong)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/long.js");\n\n\n\nfunction u64ToLong(encoded) {\n    const integerBytes = _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.toByteArray(encoded);\n    return _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromBytesLE(Array.from(integerBytes));\n}\nfunction longToU64(raw) {\n    const integerBytes = new Uint8Array(raw.toBytesLE());\n    return _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.fromByteArray(integerBytes);\n}\nfunction parseServerMessage(encoded) {\n    switch(encoded.type){\n        case "FatalError":\n        case "AuthError":\n        case "ActionResponse":\n        case "Ping":\n            {\n                return {\n                    ...encoded\n                };\n            }\n        case "MutationResponse":\n            {\n                if (encoded.success) {\n                    return {\n                        ...encoded,\n                        ts: u64ToLong(encoded.ts)\n                    };\n                } else {\n                    return {\n                        ...encoded\n                    };\n                }\n            }\n        case "Transition":\n            {\n                return {\n                    ...encoded,\n                    startVersion: {\n                        ...encoded.startVersion,\n                        ts: u64ToLong(encoded.startVersion.ts)\n                    },\n                    endVersion: {\n                        ...encoded.endVersion,\n                        ts: u64ToLong(encoded.endVersion.ts)\n                    }\n                };\n            }\n        default:\n            {\n                encoded;\n            }\n    }\n    return void 0;\n}\nfunction encodeClientMessage(message) {\n    switch(message.type){\n        case "Authenticate":\n        case "ModifyQuerySet":\n        case "Mutation":\n        case "Action":\n        case "Event":\n            {\n                return {\n                    ...message\n                };\n            }\n        case "Connect":\n            {\n                if (message.maxObservedTimestamp !== void 0) {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: longToU64(message.maxObservedTimestamp)\n                    };\n                } else {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: void 0\n                    };\n                }\n            }\n        default:\n            {\n                message;\n            }\n    }\n    return void 0;\n} //# sourceMappingURL=protocol.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3Byb3RvY29sLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFhO0FBQ2tDO0FBQ2I7QUFDM0IsU0FBU0UsVUFBVUMsT0FBTztJQUMvQixNQUFNQyxlQUFlSixnRUFBa0IsQ0FBQ0c7SUFDeEMsT0FBT0YsMENBQUlBLENBQUNLLFdBQVcsQ0FBQ0MsTUFBTUMsSUFBSSxDQUFDSjtBQUNyQztBQUNPLFNBQVNLLFVBQVVDLEdBQUc7SUFDM0IsTUFBTU4sZUFBZSxJQUFJTyxXQUFXRCxJQUFJRSxTQUFTO0lBQ2pELE9BQU9aLGtFQUFvQixDQUFDSTtBQUM5QjtBQUNPLFNBQVNVLG1CQUFtQlgsT0FBTztJQUN4QyxPQUFRQSxRQUFRWSxJQUFJO1FBQ2xCLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFBUTtnQkFDWCxPQUFPO29CQUFFLEdBQUdaLE9BQU87Z0JBQUM7WUFDdEI7UUFDQSxLQUFLO1lBQW9CO2dCQUN2QixJQUFJQSxRQUFRYSxPQUFPLEVBQUU7b0JBQ25CLE9BQU87d0JBQUUsR0FBR2IsT0FBTzt3QkFBRWMsSUFBSWYsVUFBVUMsUUFBUWMsRUFBRTtvQkFBRTtnQkFDakQsT0FBTztvQkFDTCxPQUFPO3dCQUFFLEdBQUdkLE9BQU87b0JBQUM7Z0JBQ3RCO1lBQ0Y7UUFDQSxLQUFLO1lBQWM7Z0JBQ2pCLE9BQU87b0JBQ0wsR0FBR0EsT0FBTztvQkFDVmUsY0FBYzt3QkFDWixHQUFHZixRQUFRZSxZQUFZO3dCQUN2QkQsSUFBSWYsVUFBVUMsUUFBUWUsWUFBWSxDQUFDRCxFQUFFO29CQUN2QztvQkFDQUUsWUFBWTt3QkFDVixHQUFHaEIsUUFBUWdCLFVBQVU7d0JBQ3JCRixJQUFJZixVQUFVQyxRQUFRZ0IsVUFBVSxDQUFDRixFQUFFO29CQUNyQztnQkFDRjtZQUNGO1FBQ0E7WUFBUztnQkFDUGQ7WUFDRjtJQUNGO0lBQ0EsT0FBTyxLQUFLO0FBQ2Q7QUFDTyxTQUFTaUIsb0JBQW9CQyxPQUFPO0lBQ3pDLE9BQVFBLFFBQVFOLElBQUk7UUFDbEIsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFBUztnQkFDWixPQUFPO29CQUFFLEdBQUdNLE9BQU87Z0JBQUM7WUFDdEI7UUFDQSxLQUFLO1lBQVc7Z0JBQ2QsSUFBSUEsUUFBUUMsb0JBQW9CLEtBQUssS0FBSyxHQUFHO29CQUMzQyxPQUFPO3dCQUNMLEdBQUdELE9BQU87d0JBQ1ZDLHNCQUFzQmIsVUFBVVksUUFBUUMsb0JBQW9CO29CQUM5RDtnQkFDRixPQUFPO29CQUNMLE9BQU87d0JBQUUsR0FBR0QsT0FBTzt3QkFBRUMsc0JBQXNCLEtBQUs7b0JBQUU7Z0JBQ3BEO1lBQ0Y7UUFDQTtZQUFTO2dCQUNQRDtZQUNGO0lBQ0Y7SUFDQSxPQUFPLEtBQUs7QUFDZCxFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9wcm90b2NvbC5qcz81ODUwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgQmFzZTY0IH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgTG9uZyB9IGZyb20gXCIuLi9sb25nLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdTY0VG9Mb25nKGVuY29kZWQpIHtcbiAgY29uc3QgaW50ZWdlckJ5dGVzID0gQmFzZTY0LnRvQnl0ZUFycmF5KGVuY29kZWQpO1xuICByZXR1cm4gTG9uZy5mcm9tQnl0ZXNMRShBcnJheS5mcm9tKGludGVnZXJCeXRlcykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGxvbmdUb1U2NChyYXcpIHtcbiAgY29uc3QgaW50ZWdlckJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocmF3LnRvQnl0ZXNMRSgpKTtcbiAgcmV0dXJuIEJhc2U2NC5mcm9tQnl0ZUFycmF5KGludGVnZXJCeXRlcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTZXJ2ZXJNZXNzYWdlKGVuY29kZWQpIHtcbiAgc3dpdGNoIChlbmNvZGVkLnR5cGUpIHtcbiAgICBjYXNlIFwiRmF0YWxFcnJvclwiOlxuICAgIGNhc2UgXCJBdXRoRXJyb3JcIjpcbiAgICBjYXNlIFwiQWN0aW9uUmVzcG9uc2VcIjpcbiAgICBjYXNlIFwiUGluZ1wiOiB7XG4gICAgICByZXR1cm4geyAuLi5lbmNvZGVkIH07XG4gICAgfVxuICAgIGNhc2UgXCJNdXRhdGlvblJlc3BvbnNlXCI6IHtcbiAgICAgIGlmIChlbmNvZGVkLnN1Y2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4uZW5jb2RlZCwgdHM6IHU2NFRvTG9uZyhlbmNvZGVkLnRzKSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgLi4uZW5jb2RlZCB9O1xuICAgICAgfVxuICAgIH1cbiAgICBjYXNlIFwiVHJhbnNpdGlvblwiOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5lbmNvZGVkLFxuICAgICAgICBzdGFydFZlcnNpb246IHtcbiAgICAgICAgICAuLi5lbmNvZGVkLnN0YXJ0VmVyc2lvbixcbiAgICAgICAgICB0czogdTY0VG9Mb25nKGVuY29kZWQuc3RhcnRWZXJzaW9uLnRzKVxuICAgICAgICB9LFxuICAgICAgICBlbmRWZXJzaW9uOiB7XG4gICAgICAgICAgLi4uZW5jb2RlZC5lbmRWZXJzaW9uLFxuICAgICAgICAgIHRzOiB1NjRUb0xvbmcoZW5jb2RlZC5lbmRWZXJzaW9uLnRzKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICBlbmNvZGVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUNsaWVudE1lc3NhZ2UobWVzc2FnZSkge1xuICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgIGNhc2UgXCJBdXRoZW50aWNhdGVcIjpcbiAgICBjYXNlIFwiTW9kaWZ5UXVlcnlTZXRcIjpcbiAgICBjYXNlIFwiTXV0YXRpb25cIjpcbiAgICBjYXNlIFwiQWN0aW9uXCI6XG4gICAgY2FzZSBcIkV2ZW50XCI6IHtcbiAgICAgIHJldHVybiB7IC4uLm1lc3NhZ2UgfTtcbiAgICB9XG4gICAgY2FzZSBcIkNvbm5lY3RcIjoge1xuICAgICAgaWYgKG1lc3NhZ2UubWF4T2JzZXJ2ZWRUaW1lc3RhbXAgIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm1lc3NhZ2UsXG4gICAgICAgICAgbWF4T2JzZXJ2ZWRUaW1lc3RhbXA6IGxvbmdUb1U2NChtZXNzYWdlLm1heE9ic2VydmVkVGltZXN0YW1wKVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ubWVzc2FnZSwgbWF4T2JzZXJ2ZWRUaW1lc3RhbXA6IHZvaWQgMCB9O1xuICAgICAgfVxuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICBtZXNzYWdlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdG9jb2wuanMubWFwXG4iXSwibmFtZXMiOlsiQmFzZTY0IiwiTG9uZyIsInU2NFRvTG9uZyIsImVuY29kZWQiLCJpbnRlZ2VyQnl0ZXMiLCJ0b0J5dGVBcnJheSIsImZyb21CeXRlc0xFIiwiQXJyYXkiLCJmcm9tIiwibG9uZ1RvVTY0IiwicmF3IiwiVWludDhBcnJheSIsInRvQnl0ZXNMRSIsImZyb21CeXRlQXJyYXkiLCJwYXJzZVNlcnZlck1lc3NhZ2UiLCJ0eXBlIiwic3VjY2VzcyIsInRzIiwic3RhcnRWZXJzaW9uIiwiZW5kVmVyc2lvbiIsImVuY29kZUNsaWVudE1lc3NhZ2UiLCJtZXNzYWdlIiwibWF4T2JzZXJ2ZWRUaW1lc3RhbXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/protocol.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/remote_query_set.js':
    /*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/remote_query_set.js ***!
  \*************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RemoteQuerySet: () => (/* binding */ RemoteQuerySet)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/long.js");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/logging.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\nclass RemoteQuerySet {\n    constructor(queryPath, logger){\n        __publicField(this, "version");\n        __publicField(this, "remoteQuerySet");\n        __publicField(this, "queryPath");\n        __publicField(this, "logger");\n        this.version = {\n            querySet: 0,\n            ts: _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromNumber(0),\n            identity: 0\n        };\n        this.remoteQuerySet = /* @__PURE__ */ new Map();\n        this.queryPath = queryPath;\n        this.logger = logger;\n    }\n    transition(transition) {\n        const start = transition.startVersion;\n        if (this.version.querySet !== start.querySet || this.version.ts.notEquals(start.ts) || this.version.identity !== start.identity) {\n            throw new Error(`Invalid start version: ${start.ts.toString()}:${start.querySet}`);\n        }\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case "QueryUpdated":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logForFunction)(this.logger, "info", "query", queryPath, line);\n                            }\n                        }\n                        const value = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(modification.value ?? null);\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: true,\n                            value,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case "QueryFailed":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logForFunction)(this.logger, "info", "query", queryPath, line);\n                            }\n                        }\n                        const { errorData } = modification;\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: false,\n                            errorMessage: modification.errorMessage,\n                            errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case "QueryRemoved":\n                    {\n                        this.remoteQuerySet.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        modification;\n                        throw new Error(`Invalid modification ${modification.type}`);\n                    }\n            }\n        }\n        this.version = transition.endVersion;\n    }\n    remoteQueryResults() {\n        return this.remoteQuerySet;\n    }\n    timestamp() {\n        return this.version.ts;\n    }\n} //# sourceMappingURL=remote_query_set.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/remote_query_set.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/request_manager.js':
    /*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/request_manager.js ***!
  \************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestManager: () => (/* binding */ RequestManager)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logging.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/logging.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\nclass RequestManager {\n    constructor(logger, markConnectionStateDirty){\n        this.logger = logger;\n        this.markConnectionStateDirty = markConnectionStateDirty;\n        __publicField(this, "inflightRequests");\n        __publicField(this, "requestsOlderThanRestart");\n        __publicField(this, "inflightMutationsCount", 0);\n        __publicField(this, "inflightActionsCount", 0);\n        this.inflightRequests = /* @__PURE__ */ new Map();\n        this.requestsOlderThanRestart = /* @__PURE__ */ new Set();\n    }\n    request(message, sent) {\n        const result = new Promise((resolve)=>{\n            const status = sent ? "Requested" : "NotSent";\n            this.inflightRequests.set(message.requestId, {\n                message,\n                status: {\n                    status,\n                    requestedAt: /* @__PURE__ */ new Date(),\n                    onResult: resolve\n                }\n            });\n            if (message.type === "Mutation") {\n                this.inflightMutationsCount++;\n            } else if (message.type === "Action") {\n                this.inflightActionsCount++;\n            }\n        });\n        this.markConnectionStateDirty();\n        return result;\n    }\n    /**\n   * Update the state after receiving a response.\n   *\n   * @returns A RequestId if the request is complete and its optimistic update\n   * can be dropped, null otherwise.\n   */ onResponse(response) {\n        const requestInfo = this.inflightRequests.get(response.requestId);\n        if (requestInfo === void 0) {\n            return null;\n        }\n        if (requestInfo.status.status === "Completed") {\n            return null;\n        }\n        const udfType = requestInfo.message.type === "Mutation" ? "mutation" : "action";\n        const udfPath = requestInfo.message.udfPath;\n        for (const line of response.logLines){\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logForFunction)(this.logger, "info", udfType, udfPath, line);\n        }\n        const status = requestInfo.status;\n        let result;\n        let onResolve;\n        if (response.success) {\n            result = {\n                success: true,\n                logLines: response.logLines,\n                value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(response.result)\n            };\n            onResolve = ()=>status.onResult(result);\n        } else {\n            const errorMessage = response.result;\n            const { errorData } = response;\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logForFunction)(this.logger, "error", udfType, udfPath, errorMessage);\n            result = {\n                success: false,\n                errorMessage,\n                errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                logLines: response.logLines\n            };\n            onResolve = ()=>status.onResult(result);\n        }\n        if (response.type === "ActionResponse" || !response.success) {\n            onResolve();\n            this.inflightRequests.delete(response.requestId);\n            this.requestsOlderThanRestart.delete(response.requestId);\n            if (requestInfo.message.type === "Action") {\n                this.inflightActionsCount--;\n            } else if (requestInfo.message.type === "Mutation") {\n                this.inflightMutationsCount--;\n            }\n            this.markConnectionStateDirty();\n            return {\n                requestId: response.requestId,\n                result\n            };\n        }\n        requestInfo.status = {\n            status: "Completed",\n            result,\n            ts: response.ts,\n            onResolve\n        };\n        return null;\n    }\n    // Remove and returns completed requests.\n    removeCompleted(ts) {\n        const completeRequests = /* @__PURE__ */ new Map();\n        for (const [requestId, requestInfo] of this.inflightRequests.entries()){\n            const status = requestInfo.status;\n            if (status.status === "Completed" && status.ts.lessThanOrEqual(ts)) {\n                status.onResolve();\n                completeRequests.set(requestId, status.result);\n                if (requestInfo.message.type === "Mutation") {\n                    this.inflightMutationsCount--;\n                } else if (requestInfo.message.type === "Action") {\n                    this.inflightActionsCount--;\n                }\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n            }\n        }\n        if (completeRequests.size > 0) {\n            this.markConnectionStateDirty();\n        }\n        return completeRequests;\n    }\n    restart() {\n        this.requestsOlderThanRestart = new Set(this.inflightRequests.keys());\n        const allMessages = [];\n        for (const [requestId, value] of this.inflightRequests){\n            if (value.status.status === "NotSent") {\n                value.status.status = "Requested";\n                allMessages.push(value.message);\n                continue;\n            }\n            if (value.message.type === "Mutation") {\n                allMessages.push(value.message);\n            } else if (value.message.type === "Action") {\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n                this.inflightActionsCount--;\n                if (value.status.status === "Completed") {\n                    throw new Error("Action should never be in \'Completed\' state");\n                }\n                value.status.onResult({\n                    success: false,\n                    errorMessage: "Connection lost while action was in flight",\n                    logLines: []\n                });\n            }\n        }\n        this.markConnectionStateDirty();\n        return allMessages;\n    }\n    resume() {\n        const allMessages = [];\n        for (const [, value] of this.inflightRequests){\n            if (value.status.status === "NotSent") {\n                value.status.status = "Requested";\n                allMessages.push(value.message);\n                continue;\n            }\n        }\n        return allMessages;\n    }\n    /**\n   * @returns true if there are any requests that have been requested but have\n   * not be completed yet.\n   */ hasIncompleteRequests() {\n        for (const requestInfo of this.inflightRequests.values()){\n            if (requestInfo.status.status === "Requested") {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * @returns true if there are any inflight requests, including ones that have\n   * completed on the server, but have not been applied.\n   */ hasInflightRequests() {\n        return this.inflightRequests.size > 0;\n    }\n    /**\n   * @returns true if there are any inflight requests, that have been hanging around\n   * since prior to the most recent restart.\n   */ hasSyncedPastLastReconnect() {\n        return this.requestsOlderThanRestart.size === 0;\n    }\n    timeOfOldestInflightRequest() {\n        if (this.inflightRequests.size === 0) {\n            return null;\n        }\n        let oldestInflightRequest = Date.now();\n        for (const request of this.inflightRequests.values()){\n            if (request.status.status !== "Completed") {\n                if (request.status.requestedAt.getTime() < oldestInflightRequest) {\n                    oldestInflightRequest = request.status.requestedAt.getTime();\n                }\n            }\n        }\n        return new Date(oldestInflightRequest);\n    }\n    /**\n   * @returns The number of mutations currently in flight.\n   */ inflightMutations() {\n        return this.inflightMutationsCount;\n    }\n    /**\n   * @returns The number of actions currently in flight.\n   */ inflightActions() {\n        return this.inflightActionsCount;\n    }\n} //# sourceMappingURL=request_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/request_manager.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/session.js':
    /*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/session.js ***!
  \****************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newSessionId: () => (/* binding */ newSessionId)\n/* harmony export */ });\n\nfunction newSessionId() {\n    return uuidv4();\n}\nfunction uuidv4() {\n    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;\n        return v.toString(16);\n    });\n} //# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3Nlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhO0FBQ04sU0FBU0E7SUFDZCxPQUFPQztBQUNUO0FBQ0EsU0FBU0E7SUFDUCxPQUFPLHVDQUF1Q0MsT0FBTyxDQUFDLFNBQVMsQ0FBQ0M7UUFDOUQsTUFBTUMsSUFBSUMsS0FBS0MsTUFBTSxLQUFLLEtBQUssR0FBR0MsSUFBSUosTUFBTSxNQUFNQyxJQUFJQSxJQUFJLElBQUk7UUFDOUQsT0FBT0csRUFBRUMsUUFBUSxDQUFDO0lBQ3BCO0FBQ0YsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9icm93c2VyL3N5bmMvc2Vzc2lvbi5qcz9iMzIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIG5ld1Nlc3Npb25JZCgpIHtcbiAgcmV0dXJuIHV1aWR2NCgpO1xufVxuZnVuY3Rpb24gdXVpZHY0KCkge1xuICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XG4gICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsIHYgPSBjID09PSBcInhcIiA/IHIgOiByICYgMyB8IDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb24uanMubWFwXG4iXSwibmFtZXMiOlsibmV3U2Vzc2lvbklkIiwidXVpZHY0IiwicmVwbGFjZSIsImMiLCJyIiwiTWF0aCIsInJhbmRvbSIsInYiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/session.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/udf_path_utils.js':
    /*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/udf_path_utils.js ***!
  \***********************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalizeUdfPath: () => (/* binding */ canonicalizeUdfPath),\n/* harmony export */   serializePathAndArgs: () => (/* binding */ serializePathAndArgs)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n\n\nfunction canonicalizeUdfPath(udfPath) {\n    const pieces = udfPath.split(":");\n    let moduleName;\n    let functionName;\n    if (pieces.length === 1) {\n        moduleName = pieces[0];\n        functionName = "default";\n    } else {\n        moduleName = pieces.slice(0, pieces.length - 1).join(":");\n        functionName = pieces[pieces.length - 1];\n    }\n    if (moduleName.endsWith(".js")) {\n        moduleName = moduleName.slice(0, -3);\n    }\n    return `${moduleName}:${functionName}`;\n}\nfunction serializePathAndArgs(udfPath, args) {\n    return JSON.stringify({\n        udfPath: canonicalizeUdfPath(udfPath),\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n    });\n} //# sourceMappingURL=udf_path_utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3VkZl9wYXRoX3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFhO0FBQ3dDO0FBQzlDLFNBQVNDLG9CQUFvQkMsT0FBTztJQUN6QyxNQUFNQyxTQUFTRCxRQUFRRSxLQUFLLENBQUM7SUFDN0IsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlILE9BQU9JLE1BQU0sS0FBSyxHQUFHO1FBQ3ZCRixhQUFhRixNQUFNLENBQUMsRUFBRTtRQUN0QkcsZUFBZTtJQUNqQixPQUFPO1FBQ0xELGFBQWFGLE9BQU9LLEtBQUssQ0FBQyxHQUFHTCxPQUFPSSxNQUFNLEdBQUcsR0FBR0UsSUFBSSxDQUFDO1FBQ3JESCxlQUFlSCxNQUFNLENBQUNBLE9BQU9JLE1BQU0sR0FBRyxFQUFFO0lBQzFDO0lBQ0EsSUFBSUYsV0FBV0ssUUFBUSxDQUFDLFFBQVE7UUFDOUJMLGFBQWFBLFdBQVdHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDcEM7SUFDQSxPQUFPLENBQUMsRUFBRUgsV0FBVyxDQUFDLEVBQUVDLGFBQWEsQ0FBQztBQUN4QztBQUNPLFNBQVNLLHFCQUFxQlQsT0FBTyxFQUFFVSxJQUFJO0lBQ2hELE9BQU9DLEtBQUtDLFNBQVMsQ0FBQztRQUNwQlosU0FBU0Qsb0JBQW9CQztRQUM3QlUsTUFBTVosOERBQVlBLENBQUNZO0lBQ3JCO0FBQ0YsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9icm93c2VyL3N5bmMvdWRmX3BhdGhfdXRpbHMuanM/YzI0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGNvbnZleFRvSnNvbiB9IGZyb20gXCIuLi8uLi92YWx1ZXMvaW5kZXguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBjYW5vbmljYWxpemVVZGZQYXRoKHVkZlBhdGgpIHtcbiAgY29uc3QgcGllY2VzID0gdWRmUGF0aC5zcGxpdChcIjpcIik7XG4gIGxldCBtb2R1bGVOYW1lO1xuICBsZXQgZnVuY3Rpb25OYW1lO1xuICBpZiAocGllY2VzLmxlbmd0aCA9PT0gMSkge1xuICAgIG1vZHVsZU5hbWUgPSBwaWVjZXNbMF07XG4gICAgZnVuY3Rpb25OYW1lID0gXCJkZWZhdWx0XCI7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlTmFtZSA9IHBpZWNlcy5zbGljZSgwLCBwaWVjZXMubGVuZ3RoIC0gMSkuam9pbihcIjpcIik7XG4gICAgZnVuY3Rpb25OYW1lID0gcGllY2VzW3BpZWNlcy5sZW5ndGggLSAxXTtcbiAgfVxuICBpZiAobW9kdWxlTmFtZS5lbmRzV2l0aChcIi5qc1wiKSkge1xuICAgIG1vZHVsZU5hbWUgPSBtb2R1bGVOYW1lLnNsaWNlKDAsIC0zKTtcbiAgfVxuICByZXR1cm4gYCR7bW9kdWxlTmFtZX06JHtmdW5jdGlvbk5hbWV9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVQYXRoQW5kQXJncyh1ZGZQYXRoLCBhcmdzKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgdWRmUGF0aDogY2Fub25pY2FsaXplVWRmUGF0aCh1ZGZQYXRoKSxcbiAgICBhcmdzOiBjb252ZXhUb0pzb24oYXJncylcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11ZGZfcGF0aF91dGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjb252ZXhUb0pzb24iLCJjYW5vbmljYWxpemVVZGZQYXRoIiwidWRmUGF0aCIsInBpZWNlcyIsInNwbGl0IiwibW9kdWxlTmFtZSIsImZ1bmN0aW9uTmFtZSIsImxlbmd0aCIsInNsaWNlIiwiam9pbiIsImVuZHNXaXRoIiwic2VyaWFsaXplUGF0aEFuZEFyZ3MiLCJhcmdzIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/web_socket_manager.js':
    /*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/web_socket_manager.js ***!
  \***************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketManager: () => (/* binding */ WebSocketManager)\n/* harmony export */ });\n/* harmony import */ var _protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./protocol.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/protocol.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\nconst CLOSE_NORMAL = 1e3;\nconst CLOSE_GOING_AWAY = 1001;\nconst CLOSE_NO_STATUS = 1005;\nconst CLOSE_NOT_FOUND = 4040;\nlet firstTime;\nfunction monotonicMillis() {\n    if (firstTime === void 0) {\n        firstTime = Date.now();\n    }\n    if (typeof performance === "undefined" || !performance.now) {\n        return Date.now();\n    }\n    return Math.round(firstTime + performance.now());\n}\nfunction prettyNow() {\n    return `t=${Math.round((monotonicMillis() - firstTime) / 100) / 10}s`;\n}\nconst serverDisconnectErrors = {\n    // A known error, e.g. during a restart or push\n    InternalServerError: {\n        timeout: 1e3\n    },\n    // ErrorMetadata::overloaded() messages that we realy should back off\n    SubscriptionsWorkerFullError: {\n        timeout: 3e3\n    },\n    TooManyConcurrentRequests: {\n        timeout: 3e3\n    },\n    CommitterFullError: {\n        timeout: 3e3\n    },\n    AwsTooManyRequestsException: {\n        timeout: 3e3\n    },\n    ExecuteFullError: {\n        timeout: 3e3\n    },\n    SystemTimeoutError: {\n        timeout: 3e3\n    },\n    ExpiredInQueue: {\n        timeout: 3e3\n    },\n    // ErrorMetadata::feature_temporarily_unavailable() that typically indicate a deploy just happened\n    VectorIndexesUnavailable: {\n        timeout: 1e3\n    },\n    SearchIndexesUnavailable: {\n        timeout: 1e3\n    },\n    TableSummariesUnavailable: {\n        timeout: 1e3\n    },\n    // More ErrorMetadata::overloaded()\n    VectorIndexTooLarge: {\n        timeout: 3e3\n    },\n    SearchIndexTooLarge: {\n        timeout: 3e3\n    },\n    TooManyWritesInTimePeriod: {\n        timeout: 3e3\n    }\n};\nfunction classifyDisconnectError(s) {\n    if (s === void 0) return "Unknown";\n    for (const prefix of Object.keys(serverDisconnectErrors)){\n        if (s.startsWith(prefix)) {\n            return prefix;\n        }\n    }\n    return "Unknown";\n}\nclass WebSocketManager {\n    constructor(uri, callbacks, webSocketConstructor, logger, markConnectionStateDirty, debug){\n        this.markConnectionStateDirty = markConnectionStateDirty;\n        this.debug = debug;\n        __publicField(this, "socket");\n        __publicField(this, "connectionCount");\n        __publicField(this, "_hasEverConnected", false);\n        __publicField(this, "lastCloseReason");\n        /** Upon HTTPS/WSS failure, the first jittered backoff duration, in ms. */ __publicField(this, "defaultInitialBackoff");\n        /** We backoff exponentially, but we need to cap that--this is the jittered max. */ __publicField(this, "maxBackoff");\n        /** How many times have we failed consecutively? */ __publicField(this, "retries");\n        /** How long before lack of server response causes us to initiate a reconnect,\n     * in ms */ __publicField(this, "serverInactivityThreshold");\n        __publicField(this, "reconnectDueToServerInactivityTimeout");\n        __publicField(this, "uri");\n        __publicField(this, "onOpen");\n        __publicField(this, "onResume");\n        __publicField(this, "onMessage");\n        __publicField(this, "webSocketConstructor");\n        __publicField(this, "logger");\n        __publicField(this, "onServerDisconnectError");\n        this.webSocketConstructor = webSocketConstructor;\n        this.socket = {\n            state: "disconnected"\n        };\n        this.connectionCount = 0;\n        this.lastCloseReason = "InitialConnect";\n        this.defaultInitialBackoff = 1e3;\n        this.maxBackoff = 16e3;\n        this.retries = 0;\n        this.serverInactivityThreshold = 6e4;\n        this.reconnectDueToServerInactivityTimeout = null;\n        this.uri = uri;\n        this.onOpen = callbacks.onOpen;\n        this.onResume = callbacks.onResume;\n        this.onMessage = callbacks.onMessage;\n        this.onServerDisconnectError = callbacks.onServerDisconnectError;\n        this.logger = logger;\n        this.connect();\n    }\n    setSocketState(state) {\n        this.socket = state;\n        this._logVerbose(`socket state changed: ${this.socket.state}, paused: ${"paused" in this.socket ? this.socket.paused : void 0}`);\n        this.markConnectionStateDirty();\n    }\n    connect() {\n        if (this.socket.state === "terminated") {\n            return;\n        }\n        if (this.socket.state !== "disconnected" && this.socket.state !== "stopped") {\n            throw new Error("Didn\'t start connection from disconnected state: " + this.socket.state);\n        }\n        const ws = new this.webSocketConstructor(this.uri);\n        this._logVerbose("constructed WebSocket");\n        this.setSocketState({\n            state: "connecting",\n            ws,\n            paused: "no"\n        });\n        this.resetServerInactivityTimeout();\n        ws.onopen = ()=>{\n            this.logger.logVerbose("begin ws.onopen");\n            if (this.socket.state !== "connecting") {\n                throw new Error("onopen called with socket not in connecting state");\n            }\n            this.setSocketState({\n                state: "ready",\n                ws,\n                paused: this.socket.paused === "yes" ? "uninitialized" : "no"\n            });\n            this.resetServerInactivityTimeout();\n            if (this.socket.paused === "no") {\n                this._hasEverConnected = true;\n                this.onOpen({\n                    connectionCount: this.connectionCount,\n                    lastCloseReason: this.lastCloseReason,\n                    clientTs: monotonicMillis()\n                });\n            }\n            if (this.lastCloseReason !== "InitialConnect") {\n                if (this.lastCloseReason) {\n                    this.logger.log("WebSocket reconnected at", prettyNow(), "after disconnect due to", this.lastCloseReason);\n                } else {\n                    this.logger.log("WebSocket reconnected at", prettyNow());\n                }\n            }\n            this.connectionCount += 1;\n            this.lastCloseReason = null;\n        };\n        ws.onerror = (error)=>{\n            const message = error.message;\n            if (message) {\n                this.logger.log(`WebSocket error message: ${message}`);\n            }\n        };\n        ws.onmessage = (message)=>{\n            this.resetServerInactivityTimeout();\n            const messageLength = message.data.length;\n            const serverMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.parseServerMessage)(JSON.parse(message.data));\n            this._logVerbose(`received ws message with type ${serverMessage.type}`);\n            if (serverMessage.type === "Transition") {\n                this.reportLargeTransition({\n                    messageLength,\n                    transition: serverMessage\n                });\n            }\n            const response = this.onMessage(serverMessage);\n            if (response.hasSyncedPastLastReconnect) {\n                this.retries = 0;\n                this.markConnectionStateDirty();\n            }\n        };\n        ws.onclose = (event)=>{\n            this._logVerbose("begin ws.onclose");\n            if (this.lastCloseReason === null) {\n                this.lastCloseReason = event.reason || `closed with code ${event.code}`;\n            }\n            if (event.code !== CLOSE_NORMAL && event.code !== CLOSE_GOING_AWAY && // This commonly gets fired on mobile apps when the app is backgrounded\n            event.code !== CLOSE_NO_STATUS && event.code !== CLOSE_NOT_FOUND) {\n                let msg = `WebSocket closed with code ${event.code}`;\n                if (event.reason) {\n                    msg += `: ${event.reason}`;\n                }\n                this.logger.log(msg);\n                if (this.onServerDisconnectError && event.reason) {\n                    this.onServerDisconnectError(msg);\n                }\n            }\n            const reason = classifyDisconnectError(event.reason);\n            this.scheduleReconnect(reason);\n            return;\n        };\n    }\n    /**\n   * @returns The state of the {@link Socket}.\n   */ socketState() {\n        return this.socket.state;\n    }\n    /**\n   * @param message - A ClientMessage to send.\n   * @returns Whether the message (might have been) sent.\n   */ sendMessage(message) {\n        const messageForLog = {\n            type: message.type,\n            ...message.type === "Authenticate" && message.tokenType === "User" ? {\n                value: `...${message.value.slice(-7)}`\n            } : {}\n        };\n        if (this.socket.state === "ready" && this.socket.paused === "no") {\n            const encodedMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.encodeClientMessage)(message);\n            const request = JSON.stringify(encodedMessage);\n            let sent = false;\n            try {\n                this.socket.ws.send(request);\n                sent = true;\n            } catch (error) {\n                this.logger.log(`Failed to send message on WebSocket, reconnecting: ${error}`);\n                this.closeAndReconnect("FailedToSendMessage");\n            }\n            this._logVerbose(`${sent ? "sent" : "failed to send"} message with type ${message.type}: ${JSON.stringify(messageForLog)}`);\n            return true;\n        }\n        this._logVerbose(`message not sent (socket state: ${this.socket.state}, paused: ${"paused" in this.socket ? this.socket.paused : void 0}): ${JSON.stringify(messageForLog)}`);\n        return false;\n    }\n    resetServerInactivityTimeout() {\n        if (this.socket.state === "terminated") {\n            return;\n        }\n        if (this.reconnectDueToServerInactivityTimeout !== null) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n            this.reconnectDueToServerInactivityTimeout = null;\n        }\n        this.reconnectDueToServerInactivityTimeout = setTimeout(()=>{\n            this.closeAndReconnect("InactiveServer");\n        }, this.serverInactivityThreshold);\n    }\n    scheduleReconnect(reason) {\n        this.socket = {\n            state: "disconnected"\n        };\n        const backoff = this.nextBackoff(reason);\n        this.markConnectionStateDirty();\n        this.logger.log(`Attempting reconnect in ${Math.round(backoff)}ms`);\n        setTimeout(()=>this.connect(), backoff);\n    }\n    /**\n   * Close the WebSocket and schedule a reconnect.\n   *\n   * This should be used when we hit an error and would like to restart the session.\n   */ closeAndReconnect(closeReason) {\n        this._logVerbose(`begin closeAndReconnect with reason ${closeReason}`);\n        switch(this.socket.state){\n            case "disconnected":\n            case "terminated":\n            case "stopped":\n                return;\n            case "connecting":\n            case "ready":\n                {\n                    this.lastCloseReason = closeReason;\n                    void this.close();\n                    this.scheduleReconnect("client");\n                    return;\n                }\n            default:\n                {\n                    this.socket;\n                }\n        }\n    }\n    /**\n   * Close the WebSocket, being careful to clear the onclose handler to avoid re-entrant\n   * calls. Use this instead of directly calling `ws.close()`\n   *\n   * It is the callers responsibility to update the state after this method is called so that the\n   * closed socket is not accessible or used again after this method is called\n   */ close() {\n        switch(this.socket.state){\n            case "disconnected":\n            case "terminated":\n            case "stopped":\n                return Promise.resolve();\n            case "connecting":\n                {\n                    const ws = this.socket.ws;\n                    return new Promise((r)=>{\n                        ws.onclose = ()=>{\n                            this._logVerbose("Closed after connecting");\n                            r();\n                        };\n                        ws.onopen = ()=>{\n                            this._logVerbose("Opened after connecting");\n                            ws.close();\n                        };\n                    });\n                }\n            case "ready":\n                {\n                    this._logVerbose("ws.close called");\n                    const ws = this.socket.ws;\n                    const result = new Promise((r)=>{\n                        ws.onclose = ()=>{\n                            r();\n                        };\n                    });\n                    ws.close();\n                    return result;\n                }\n            default:\n                {\n                    this.socket;\n                    return Promise.resolve();\n                }\n        }\n    }\n    /**\n   * Close the WebSocket and do not reconnect.\n   * @returns A Promise that resolves when the WebSocket `onClose` callback is called.\n   */ terminate() {\n        if (this.reconnectDueToServerInactivityTimeout) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n        }\n        switch(this.socket.state){\n            case "terminated":\n            case "stopped":\n            case "disconnected":\n            case "connecting":\n            case "ready":\n                {\n                    const result = this.close();\n                    this.setSocketState({\n                        state: "terminated"\n                    });\n                    return result;\n                }\n            default:\n                {\n                    this.socket;\n                    throw new Error(`Invalid websocket state: ${this.socket.state}`);\n                }\n        }\n    }\n    stop() {\n        switch(this.socket.state){\n            case "terminated":\n                return Promise.resolve();\n            case "connecting":\n            case "stopped":\n            case "disconnected":\n            case "ready":\n                {\n                    const result = this.close();\n                    this.socket = {\n                        state: "stopped"\n                    };\n                    return result;\n                }\n            default:\n                {\n                    this.socket;\n                    return Promise.resolve();\n                }\n        }\n    }\n    /**\n   * Create a new WebSocket after a previous `stop()`, unless `terminate()` was\n   * called before.\n   */ tryRestart() {\n        switch(this.socket.state){\n            case "stopped":\n                break;\n            case "terminated":\n            case "connecting":\n            case "ready":\n            case "disconnected":\n                this.logger.logVerbose("Restart called without stopping first");\n                return;\n            default:\n                {\n                    this.socket;\n                }\n        }\n        this.connect();\n    }\n    pause() {\n        switch(this.socket.state){\n            case "disconnected":\n            case "stopped":\n            case "terminated":\n                return;\n            case "connecting":\n            case "ready":\n                {\n                    this.socket = {\n                        ...this.socket,\n                        paused: "yes"\n                    };\n                    return;\n                }\n            default:\n                {\n                    this.socket;\n                    return;\n                }\n        }\n    }\n    /**\n   * Resume the state machine if previously paused.\n   */ resume() {\n        switch(this.socket.state){\n            case "connecting":\n                this.socket = {\n                    ...this.socket,\n                    paused: "no"\n                };\n                return;\n            case "ready":\n                if (this.socket.paused === "uninitialized") {\n                    this.socket = {\n                        ...this.socket,\n                        paused: "no"\n                    };\n                    this.onOpen({\n                        connectionCount: this.connectionCount,\n                        lastCloseReason: this.lastCloseReason,\n                        clientTs: monotonicMillis()\n                    });\n                } else if (this.socket.paused === "yes") {\n                    this.socket = {\n                        ...this.socket,\n                        paused: "no"\n                    };\n                    this.onResume();\n                }\n                return;\n            case "terminated":\n            case "stopped":\n            case "disconnected":\n                return;\n            default:\n                {\n                    this.socket;\n                }\n        }\n        this.connect();\n    }\n    connectionState() {\n        return {\n            isConnected: this.socket.state === "ready",\n            hasEverConnected: this._hasEverConnected,\n            connectionCount: this.connectionCount,\n            connectionRetries: this.retries\n        };\n    }\n    _logVerbose(message) {\n        this.logger.logVerbose(message);\n    }\n    nextBackoff(reason) {\n        const initialBackoff = reason === "client" ? 100 : reason === "Unknown" ? this.defaultInitialBackoff : serverDisconnectErrors[reason].timeout;\n        const baseBackoff = initialBackoff * Math.pow(2, this.retries);\n        this.retries += 1;\n        const actualBackoff = Math.min(baseBackoff, this.maxBackoff);\n        const jitter = actualBackoff * (Math.random() - 0.5);\n        return actualBackoff + jitter;\n    }\n    reportLargeTransition({ transition, messageLength }) {\n        if (transition.clientClockSkew === void 0 || transition.serverTs === void 0) {\n            return;\n        }\n        const transitionTransitTime = monotonicMillis() - // client time now\n        // clientClockSkew = (server time + upstream latency) - client time\n        // clientClockSkew is "how many milliseconds behind (slow) is the client clock"\n        // but the latency of the Connect message inflates this, making it appear further behind\n        transition.clientClockSkew - transition.serverTs / 1e6;\n        const prettyTransitionTime = `${Math.round(transitionTransitTime)}ms`;\n        const prettyMessageMB = `${Math.round(messageLength / 1e4) / 100}MB`;\n        const bytesPerSecond = messageLength / (transitionTransitTime / 1e3);\n        const prettyBytesPerSecond = `${Math.round(bytesPerSecond / 1e4) / 100}MB per second`;\n        this._logVerbose(`received ${prettyMessageMB} transition in ${prettyTransitionTime} at ${prettyBytesPerSecond}`);\n        if (transitionTransitTime > 1e4 && messageLength > 1e7) {\n            this.logger.log(`received query results totalling more than 10MB (${prettyMessageMB}) which took more than 10s (${prettyTransitionTime}) to arrive`);\n        } else if (messageLength > 2e7) {\n            this.logger.log(`received query results totalling more that 20MB (${prettyMessageMB}) which will take a long time to download on slower connections`);\n        } else if (transitionTransitTime > 2e4) {\n            this.logger.log(`received query results totalling ${prettyMessageMB} which took more than 20s to arrive (${prettyTransitionTime})`);\n        }\n        if (this.debug) {\n            if (transitionTransitTime > 1e4 || messageLength > 1e7) {\n                this.sendMessage({\n                    type: "Event",\n                    eventType: "ClientReceivedTransition",\n                    event: {\n                        transitionTransitTime,\n                        messageLength\n                    }\n                });\n            }\n        }\n    }\n} //# sourceMappingURL=web_socket_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/sync/web_socket_manager.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js':
    /*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js ***!
  \********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSimpleObject: () => (/* binding */ isSimpleObject),\n/* harmony export */   parseArgs: () => (/* binding */ parseArgs),\n/* harmony export */   validateDeploymentUrl: () => (/* binding */ validateDeploymentUrl)\n/* harmony export */ });\n\nfunction parseArgs(args) {\n    if (args === void 0) {\n        return {};\n    }\n    if (!isSimpleObject(args)) {\n        throw new Error(`The arguments to a Convex function must be an object. Received: ${args}`);\n    }\n    return args;\n}\nfunction validateDeploymentUrl(deploymentUrl) {\n    if (typeof deploymentUrl === "undefined") {\n        throw new Error(`Client created with undefined deployment address. If you used an environment variable, check that it\'s set.`);\n    }\n    if (typeof deploymentUrl !== "string") {\n        throw new Error(`Invalid deployment address: found ${deploymentUrl}".`);\n    }\n    if (!(deploymentUrl.startsWith("http:") || deploymentUrl.startsWith("https:"))) {\n        throw new Error(`Invalid deployment address: Must start with "https://" or "http://". Found "${deploymentUrl}".`);\n    }\n    try {\n        new URL(deploymentUrl);\n    } catch  {\n        throw new Error(`Invalid deployment address: "${deploymentUrl}" is not a valid URL. If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`);\n    }\n    if (deploymentUrl.endsWith(".convex.site")) {\n        throw new Error(`Invalid deployment address: "${deploymentUrl}" ends with .convex.site, which is used for HTTP Actions. Convex deployment URLs typically end with .convex.cloud? If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`);\n    }\n}\nfunction isSimpleObject(value) {\n    const isObject = typeof value === "object";\n    const prototype = Object.getPrototypeOf(value);\n    const isSimple = prototype === null || prototype === Object.prototype || // Objects generated from other contexts (e.g. across Node.js `vm` modules) will not satisfy the previous\n    // conditions but are still simple objects.\n    prototype?.constructor?.name === "Object";\n    return isObject && isSimple;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vY29tbW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFhO0FBQ04sU0FBU0EsVUFBVUMsSUFBSTtJQUM1QixJQUFJQSxTQUFTLEtBQUssR0FBRztRQUNuQixPQUFPLENBQUM7SUFDVjtJQUNBLElBQUksQ0FBQ0MsZUFBZUQsT0FBTztRQUN6QixNQUFNLElBQUlFLE1BQ1IsQ0FBQyxnRUFBZ0UsRUFBRUYsS0FBSyxDQUFDO0lBRTdFO0lBQ0EsT0FBT0E7QUFDVDtBQUNPLFNBQVNHLHNCQUFzQkMsYUFBYTtJQUNqRCxJQUFJLE9BQU9BLGtCQUFrQixhQUFhO1FBQ3hDLE1BQU0sSUFBSUYsTUFDUixDQUFDLDJHQUEyRyxDQUFDO0lBRWpIO0lBQ0EsSUFBSSxPQUFPRSxrQkFBa0IsVUFBVTtRQUNyQyxNQUFNLElBQUlGLE1BQ1IsQ0FBQyxrQ0FBa0MsRUFBRUUsY0FBYyxFQUFFLENBQUM7SUFFMUQ7SUFDQSxJQUFJLENBQUVBLENBQUFBLGNBQWNDLFVBQVUsQ0FBQyxZQUFZRCxjQUFjQyxVQUFVLENBQUMsU0FBUSxHQUFJO1FBQzlFLE1BQU0sSUFBSUgsTUFDUixDQUFDLDRFQUE0RSxFQUFFRSxjQUFjLEVBQUUsQ0FBQztJQUVwRztJQUNBLElBQUk7UUFDRixJQUFJRSxJQUFJRjtJQUNWLEVBQUUsT0FBTTtRQUNOLE1BQU0sSUFBSUYsTUFDUixDQUFDLDZCQUE2QixFQUFFRSxjQUFjLHlIQUF5SCxDQUFDO0lBRTVLO0lBQ0EsSUFBSUEsY0FBY0csUUFBUSxDQUFDLGlCQUFpQjtRQUMxQyxNQUFNLElBQUlMLE1BQ1IsQ0FBQyw2QkFBNkIsRUFBRUUsY0FBYyxzTkFBc04sQ0FBQztJQUV6UTtBQUNGO0FBQ08sU0FBU0gsZUFBZU8sS0FBSztJQUNsQyxNQUFNQyxXQUFXLE9BQU9ELFVBQVU7SUFDbEMsTUFBTUUsWUFBWUMsT0FBT0MsY0FBYyxDQUFDSjtJQUN4QyxNQUFNSyxXQUFXSCxjQUFjLFFBQVFBLGNBQWNDLE9BQU9ELFNBQVMsSUFBSSx5R0FBeUc7SUFDbEwsMkNBQTJDO0lBQzNDQSxXQUFXSSxhQUFhQyxTQUFTO0lBQ2pDLE9BQU9OLFlBQVlJO0FBQ3JCLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vY29tbW9uL2luZGV4LmpzPzE5MDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcmdzKGFyZ3MpIHtcbiAgaWYgKGFyZ3MgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBpZiAoIWlzU2ltcGxlT2JqZWN0KGFyZ3MpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFRoZSBhcmd1bWVudHMgdG8gYSBDb252ZXggZnVuY3Rpb24gbXVzdCBiZSBhbiBvYmplY3QuIFJlY2VpdmVkOiAke2FyZ3N9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGFyZ3M7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEZXBsb3ltZW50VXJsKGRlcGxveW1lbnRVcmwpIHtcbiAgaWYgKHR5cGVvZiBkZXBsb3ltZW50VXJsID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYENsaWVudCBjcmVhdGVkIHdpdGggdW5kZWZpbmVkIGRlcGxveW1lbnQgYWRkcmVzcy4gSWYgeW91IHVzZWQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUsIGNoZWNrIHRoYXQgaXQncyBzZXQuYFxuICAgICk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkZXBsb3ltZW50VXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgZGVwbG95bWVudCBhZGRyZXNzOiBmb3VuZCAke2RlcGxveW1lbnRVcmx9XCIuYFxuICAgICk7XG4gIH1cbiAgaWYgKCEoZGVwbG95bWVudFVybC5zdGFydHNXaXRoKFwiaHR0cDpcIikgfHwgZGVwbG95bWVudFVybC5zdGFydHNXaXRoKFwiaHR0cHM6XCIpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIGRlcGxveW1lbnQgYWRkcmVzczogTXVzdCBzdGFydCB3aXRoIFwiaHR0cHM6Ly9cIiBvciBcImh0dHA6Ly9cIi4gRm91bmQgXCIke2RlcGxveW1lbnRVcmx9XCIuYFxuICAgICk7XG4gIH1cbiAgdHJ5IHtcbiAgICBuZXcgVVJMKGRlcGxveW1lbnRVcmwpO1xuICB9IGNhdGNoIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgSW52YWxpZCBkZXBsb3ltZW50IGFkZHJlc3M6IFwiJHtkZXBsb3ltZW50VXJsfVwiIGlzIG5vdCBhIHZhbGlkIFVSTC4gSWYgeW91IGJlbGlldmUgdGhpcyBVUkwgaXMgY29ycmVjdCwgdXNlIHRoZSBcXGBza2lwQ29udmV4RGVwbG95bWVudFVybENoZWNrXFxgIG9wdGlvbiB0byBieXBhc3MgdGhpcy5gXG4gICAgKTtcbiAgfVxuICBpZiAoZGVwbG95bWVudFVybC5lbmRzV2l0aChcIi5jb252ZXguc2l0ZVwiKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIGRlcGxveW1lbnQgYWRkcmVzczogXCIke2RlcGxveW1lbnRVcmx9XCIgZW5kcyB3aXRoIC5jb252ZXguc2l0ZSwgd2hpY2ggaXMgdXNlZCBmb3IgSFRUUCBBY3Rpb25zLiBDb252ZXggZGVwbG95bWVudCBVUkxzIHR5cGljYWxseSBlbmQgd2l0aCAuY29udmV4LmNsb3VkPyBJZiB5b3UgYmVsaWV2ZSB0aGlzIFVSTCBpcyBjb3JyZWN0LCB1c2UgdGhlIFxcYHNraXBDb252ZXhEZXBsb3ltZW50VXJsQ2hlY2tcXGAgb3B0aW9uIHRvIGJ5cGFzcyB0aGlzLmBcbiAgICApO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTaW1wbGVPYmplY3QodmFsdWUpIHtcbiAgY29uc3QgaXNPYmplY3QgPSB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG4gIGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gIGNvbnN0IGlzU2ltcGxlID0gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCAvLyBPYmplY3RzIGdlbmVyYXRlZCBmcm9tIG90aGVyIGNvbnRleHRzIChlLmcuIGFjcm9zcyBOb2RlLmpzIGB2bWAgbW9kdWxlcykgd2lsbCBub3Qgc2F0aXNmeSB0aGUgcHJldmlvdXNcbiAgLy8gY29uZGl0aW9ucyBidXQgYXJlIHN0aWxsIHNpbXBsZSBvYmplY3RzLlxuICBwcm90b3R5cGU/LmNvbnN0cnVjdG9yPy5uYW1lID09PSBcIk9iamVjdFwiO1xuICByZXR1cm4gaXNPYmplY3QgJiYgaXNTaW1wbGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJwYXJzZUFyZ3MiLCJhcmdzIiwiaXNTaW1wbGVPYmplY3QiLCJFcnJvciIsInZhbGlkYXRlRGVwbG95bWVudFVybCIsImRlcGxveW1lbnRVcmwiLCJzdGFydHNXaXRoIiwiVVJMIiwiZW5kc1dpdGgiLCJ2YWx1ZSIsImlzT2JqZWN0IiwicHJvdG90eXBlIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJpc1NpbXBsZSIsImNvbnN0cnVjdG9yIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js':
    /*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js ***!
  \*************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n\nconst version = "1.27.1"; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhO0FBQ04sTUFBTUEsVUFBVSxTQUFTLENBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2luZGV4LmpzPzQ5M2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiMS4yNy4xXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/ConvexAuthState.js':
    /*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/ConvexAuthState.js ***!
  \*****************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProviderWithAuth: () => (/* binding */ ConvexProviderWithAuth),\n/* harmony export */   useConvexAuth: () => (/* binding */ useConvexAuth)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "(ssr)/../../node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/client.js");\n\n\n\nconst ConvexAuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useConvexAuth() {\n    const authContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ConvexAuthContext);\n    if (authContext === void 0) {\n        throw new Error("Could not find `ConvexProviderWithAuth` (or `ConvexProviderWithClerk` or `ConvexProviderWithAuth0`) as an ancestor component. This component may be missing, or you might have two instances of the `convex/react` module loaded in your project.");\n    }\n    return authContext;\n}\nfunction ConvexProviderWithAuth({ children, client, useAuth }) {\n    const { isLoading: authProviderLoading, isAuthenticated: authProviderAuthenticated, fetchAccessToken } = useAuth();\n    const [isConvexAuthenticated, setIsConvexAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    if (authProviderLoading && isConvexAuthenticated !== null) {\n        setIsConvexAuthenticated(null);\n    }\n    if (!authProviderLoading && !authProviderAuthenticated && isConvexAuthenticated !== false) {\n        setIsConvexAuthenticated(false);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthContext.Provider, {\n        value: {\n            isLoading: isConvexAuthenticated === null,\n            isAuthenticated: authProviderAuthenticated && (isConvexAuthenticated ?? false)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthStateFirstEffect, {\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexProvider, {\n        client\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthStateLastEffect, {\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    }));\n}\nfunction ConvexAuthStateFirstEffect({ authProviderAuthenticated, fetchAccessToken, authProviderLoading, client, setIsConvexAuthenticated }) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isThisEffectRelevant = true;\n        if (authProviderAuthenticated) {\n            client.setAuth(fetchAccessToken, (backendReportsIsAuthenticated)=>{\n                if (isThisEffectRelevant) {\n                    setIsConvexAuthenticated(()=>backendReportsIsAuthenticated);\n                }\n            });\n            return ()=>{\n                isThisEffectRelevant = false;\n                setIsConvexAuthenticated((isConvexAuthenticated)=>isConvexAuthenticated ? false : null);\n            };\n        }\n    }, [\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    ]);\n    return null;\n}\nfunction ConvexAuthStateLastEffect({ authProviderAuthenticated, fetchAccessToken, authProviderLoading, client, setIsConvexAuthenticated }) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (authProviderAuthenticated) {\n            return ()=>{\n                client.clearAuth();\n                setIsConvexAuthenticated(()=>null);\n            };\n        }\n    }, [\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    ]);\n    return null;\n} //# sourceMappingURL=ConvexAuthState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvQ29udmV4QXV0aFN0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBYTtBQU1FO0FBQzhCO0FBQzdDLE1BQU1NLGtDQUFvQkwsb0RBQWFBLENBQUMsS0FBSztBQUN0QyxTQUFTTTtJQUNkLE1BQU1DLGNBQWNOLGlEQUFVQSxDQUFDSTtJQUMvQixJQUFJRSxnQkFBZ0IsS0FBSyxHQUFHO1FBQzFCLE1BQU0sSUFBSUMsTUFDUjtJQUVKO0lBQ0EsT0FBT0Q7QUFDVDtBQUNPLFNBQVNFLHVCQUF1QixFQUNyQ0MsUUFBUSxFQUNSQyxNQUFNLEVBQ05DLE9BQU8sRUFDUjtJQUNDLE1BQU0sRUFDSkMsV0FBV0MsbUJBQW1CLEVBQzlCQyxpQkFBaUJDLHlCQUF5QixFQUMxQ0MsZ0JBQWdCLEVBQ2pCLEdBQUdMO0lBQ0osTUFBTSxDQUFDTSx1QkFBdUJDLHlCQUF5QixHQUFHaEIsK0NBQVFBLENBQUM7SUFDbkUsSUFBSVcsdUJBQXVCSSwwQkFBMEIsTUFBTTtRQUN6REMseUJBQXlCO0lBQzNCO0lBQ0EsSUFBSSxDQUFDTCx1QkFBdUIsQ0FBQ0UsNkJBQTZCRSwwQkFBMEIsT0FBTztRQUN6RkMseUJBQXlCO0lBQzNCO0lBQ0EsT0FBTyxhQUFhLGlCQUFHcEIsZ0RBQW1CLENBQ3hDTSxrQkFBa0JnQixRQUFRLEVBQzFCO1FBQ0VDLE9BQU87WUFDTFQsV0FBV0ssMEJBQTBCO1lBQ3JDSCxpQkFBaUJDLDZCQUE4QkUsQ0FBQUEseUJBQXlCLEtBQUk7UUFDOUU7SUFDRixHQUNBLGFBQWEsaUJBQUduQixnREFBbUIsQ0FDakN3Qiw0QkFDQTtRQUNFUDtRQUNBQztRQUNBSDtRQUNBSDtRQUNBUTtJQUNGLElBRUYsYUFBYSxpQkFBR3BCLGdEQUFtQixDQUFDSyxzREFBY0EsRUFBRTtRQUFFTztJQUFPLEdBQUdELFdBQ2hFLGFBQWEsaUJBQUdYLGdEQUFtQixDQUNqQ3lCLDJCQUNBO1FBQ0VSO1FBQ0FDO1FBQ0FIO1FBQ0FIO1FBQ0FRO0lBQ0Y7QUFHTjtBQUNBLFNBQVNJLDJCQUEyQixFQUNsQ1AseUJBQXlCLEVBQ3pCQyxnQkFBZ0IsRUFDaEJILG1CQUFtQixFQUNuQkgsTUFBTSxFQUNOUSx3QkFBd0IsRUFDekI7SUFDQ2pCLGdEQUFTQSxDQUFDO1FBQ1IsSUFBSXVCLHVCQUF1QjtRQUMzQixJQUFJVCwyQkFBMkI7WUFDN0JMLE9BQU9lLE9BQU8sQ0FBQ1Qsa0JBQWtCLENBQUNVO2dCQUNoQyxJQUFJRixzQkFBc0I7b0JBQ3hCTix5QkFBeUIsSUFBTVE7Z0JBQ2pDO1lBQ0Y7WUFDQSxPQUFPO2dCQUNMRix1QkFBdUI7Z0JBQ3ZCTix5QkFDRSxDQUFDRCx3QkFBMEJBLHdCQUF3QixRQUFRO1lBRS9EO1FBQ0Y7SUFDRixHQUFHO1FBQ0RGO1FBQ0FDO1FBQ0FIO1FBQ0FIO1FBQ0FRO0tBQ0Q7SUFDRCxPQUFPO0FBQ1Q7QUFDQSxTQUFTSywwQkFBMEIsRUFDakNSLHlCQUF5QixFQUN6QkMsZ0JBQWdCLEVBQ2hCSCxtQkFBbUIsRUFDbkJILE1BQU0sRUFDTlEsd0JBQXdCLEVBQ3pCO0lBQ0NqQixnREFBU0EsQ0FBQztRQUNSLElBQUljLDJCQUEyQjtZQUM3QixPQUFPO2dCQUNMTCxPQUFPaUIsU0FBUztnQkFDaEJULHlCQUF5QixJQUFNO1lBQ2pDO1FBQ0Y7SUFDRixHQUFHO1FBQ0RIO1FBQ0FDO1FBQ0FIO1FBQ0FIO1FBQ0FRO0tBQ0Q7SUFDRCxPQUFPO0FBQ1QsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9yZWFjdC9Db252ZXhBdXRoU3RhdGUuanM/ZGZiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBSZWFjdCwge1xuICBjcmVhdGVDb250ZXh0LFxuICB1c2VDb250ZXh0LFxuICB1c2VFZmZlY3QsXG4gIHVzZVN0YXRlXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ29udmV4UHJvdmlkZXIgfSBmcm9tIFwiLi9jbGllbnQuanNcIjtcbmNvbnN0IENvbnZleEF1dGhDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh2b2lkIDApO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbnZleEF1dGgoKSB7XG4gIGNvbnN0IGF1dGhDb250ZXh0ID0gdXNlQ29udGV4dChDb252ZXhBdXRoQ29udGV4dCk7XG4gIGlmIChhdXRoQ29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDb3VsZCBub3QgZmluZCBgQ29udmV4UHJvdmlkZXJXaXRoQXV0aGAgKG9yIGBDb252ZXhQcm92aWRlcldpdGhDbGVya2Agb3IgYENvbnZleFByb3ZpZGVyV2l0aEF1dGgwYCkgYXMgYW4gYW5jZXN0b3IgY29tcG9uZW50LiBUaGlzIGNvbXBvbmVudCBtYXkgYmUgbWlzc2luZywgb3IgeW91IG1pZ2h0IGhhdmUgdHdvIGluc3RhbmNlcyBvZiB0aGUgYGNvbnZleC9yZWFjdGAgbW9kdWxlIGxvYWRlZCBpbiB5b3VyIHByb2plY3QuXCJcbiAgICApO1xuICB9XG4gIHJldHVybiBhdXRoQ29udGV4dDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBDb252ZXhQcm92aWRlcldpdGhBdXRoKHtcbiAgY2hpbGRyZW4sXG4gIGNsaWVudCxcbiAgdXNlQXV0aFxufSkge1xuICBjb25zdCB7XG4gICAgaXNMb2FkaW5nOiBhdXRoUHJvdmlkZXJMb2FkaW5nLFxuICAgIGlzQXV0aGVudGljYXRlZDogYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCxcbiAgICBmZXRjaEFjY2Vzc1Rva2VuXG4gIH0gPSB1c2VBdXRoKCk7XG4gIGNvbnN0IFtpc0NvbnZleEF1dGhlbnRpY2F0ZWQsIHNldElzQ29udmV4QXV0aGVudGljYXRlZF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgaWYgKGF1dGhQcm92aWRlckxvYWRpbmcgJiYgaXNDb252ZXhBdXRoZW50aWNhdGVkICE9PSBudWxsKSB7XG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKG51bGwpO1xuICB9XG4gIGlmICghYXV0aFByb3ZpZGVyTG9hZGluZyAmJiAhYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCAmJiBpc0NvbnZleEF1dGhlbnRpY2F0ZWQgIT09IGZhbHNlKSB7XG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKGZhbHNlKTtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgQ29udmV4QXV0aENvbnRleHQuUHJvdmlkZXIsXG4gICAge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaXNMb2FkaW5nOiBpc0NvbnZleEF1dGhlbnRpY2F0ZWQgPT09IG51bGwsXG4gICAgICAgIGlzQXV0aGVudGljYXRlZDogYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCAmJiAoaXNDb252ZXhBdXRoZW50aWNhdGVkID8/IGZhbHNlKVxuICAgICAgfVxuICAgIH0sXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb252ZXhBdXRoU3RhdGVGaXJzdEVmZmVjdCxcbiAgICAgIHtcbiAgICAgICAgYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCxcbiAgICAgICAgZmV0Y2hBY2Nlc3NUb2tlbixcbiAgICAgICAgYXV0aFByb3ZpZGVyTG9hZGluZyxcbiAgICAgICAgY2xpZW50LFxuICAgICAgICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWRcbiAgICAgIH1cbiAgICApLFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnZleFByb3ZpZGVyLCB7IGNsaWVudCB9LCBjaGlsZHJlbiksXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb252ZXhBdXRoU3RhdGVMYXN0RWZmZWN0LFxuICAgICAge1xuICAgICAgICBhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkLFxuICAgICAgICBmZXRjaEFjY2Vzc1Rva2VuLFxuICAgICAgICBhdXRoUHJvdmlkZXJMb2FkaW5nLFxuICAgICAgICBjbGllbnQsXG4gICAgICAgIHNldElzQ29udmV4QXV0aGVudGljYXRlZFxuICAgICAgfVxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIENvbnZleEF1dGhTdGF0ZUZpcnN0RWZmZWN0KHtcbiAgYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCxcbiAgZmV0Y2hBY2Nlc3NUb2tlbixcbiAgYXV0aFByb3ZpZGVyTG9hZGluZyxcbiAgY2xpZW50LFxuICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWRcbn0pIHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgaXNUaGlzRWZmZWN0UmVsZXZhbnQgPSB0cnVlO1xuICAgIGlmIChhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkKSB7XG4gICAgICBjbGllbnQuc2V0QXV0aChmZXRjaEFjY2Vzc1Rva2VuLCAoYmFja2VuZFJlcG9ydHNJc0F1dGhlbnRpY2F0ZWQpID0+IHtcbiAgICAgICAgaWYgKGlzVGhpc0VmZmVjdFJlbGV2YW50KSB7XG4gICAgICAgICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKCgpID0+IGJhY2tlbmRSZXBvcnRzSXNBdXRoZW50aWNhdGVkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpc1RoaXNFZmZlY3RSZWxldmFudCA9IGZhbHNlO1xuICAgICAgICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWQoXG4gICAgICAgICAgKGlzQ29udmV4QXV0aGVudGljYXRlZCkgPT4gaXNDb252ZXhBdXRoZW50aWNhdGVkID8gZmFsc2UgOiBudWxsXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH1cbiAgfSwgW1xuICAgIGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQsXG4gICAgZmV0Y2hBY2Nlc3NUb2tlbixcbiAgICBhdXRoUHJvdmlkZXJMb2FkaW5nLFxuICAgIGNsaWVudCxcbiAgICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWRcbiAgXSk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gQ29udmV4QXV0aFN0YXRlTGFzdEVmZmVjdCh7XG4gIGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQsXG4gIGZldGNoQWNjZXNzVG9rZW4sXG4gIGF1dGhQcm92aWRlckxvYWRpbmcsXG4gIGNsaWVudCxcbiAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkXG59KSB7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQpIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNsaWVudC5jbGVhckF1dGgoKTtcbiAgICAgICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKCgpID0+IG51bGwpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFtcbiAgICBhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkLFxuICAgIGZldGNoQWNjZXNzVG9rZW4sXG4gICAgYXV0aFByb3ZpZGVyTG9hZGluZyxcbiAgICBjbGllbnQsXG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkXG4gIF0pO1xuICByZXR1cm4gbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnZleEF1dGhTdGF0ZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJDb252ZXhQcm92aWRlciIsIkNvbnZleEF1dGhDb250ZXh0IiwidXNlQ29udmV4QXV0aCIsImF1dGhDb250ZXh0IiwiRXJyb3IiLCJDb252ZXhQcm92aWRlcldpdGhBdXRoIiwiY2hpbGRyZW4iLCJjbGllbnQiLCJ1c2VBdXRoIiwiaXNMb2FkaW5nIiwiYXV0aFByb3ZpZGVyTG9hZGluZyIsImlzQXV0aGVudGljYXRlZCIsImF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQiLCJmZXRjaEFjY2Vzc1Rva2VuIiwiaXNDb252ZXhBdXRoZW50aWNhdGVkIiwic2V0SXNDb252ZXhBdXRoZW50aWNhdGVkIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiLCJDb252ZXhBdXRoU3RhdGVGaXJzdEVmZmVjdCIsIkNvbnZleEF1dGhTdGF0ZUxhc3RFZmZlY3QiLCJpc1RoaXNFZmZlY3RSZWxldmFudCIsInNldEF1dGgiLCJiYWNrZW5kUmVwb3J0c0lzQXV0aGVudGljYXRlZCIsImNsZWFyQXV0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/ConvexAuthState.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/auth_helpers.js':
    /*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/auth_helpers.js ***!
  \**************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: () => (/* binding */ AuthLoading),\n/* harmony export */   Authenticated: () => (/* binding */ Authenticated),\n/* harmony export */   Unauthenticated: () => (/* binding */ Unauthenticated)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "(ssr)/../../node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConvexAuthState.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/ConvexAuthState.js");\n\n\n\nfunction Authenticated({ children }) {\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || !isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\nfunction Unauthenticated({ children }) {\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\nfunction AuthLoading({ children }) {\n    const { isLoading } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (!isLoading) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n} //# sourceMappingURL=auth_helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvYXV0aF9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWE7QUFDYTtBQUMyQjtBQUM5QyxTQUFTRSxjQUFjLEVBQUVDLFFBQVEsRUFBRTtJQUN4QyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsZUFBZSxFQUFFLEdBQUdKLGtFQUFhQTtJQUNwRCxJQUFJRyxhQUFhLENBQUNDLGlCQUFpQjtRQUNqQyxPQUFPO0lBQ1Q7SUFDQSxPQUFPLGFBQWEsaUJBQUdMLGdEQUFtQixDQUFDQSwyQ0FBYyxFQUFFLE1BQU1HO0FBQ25FO0FBQ08sU0FBU0ssZ0JBQWdCLEVBQUVMLFFBQVEsRUFBRTtJQUMxQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsZUFBZSxFQUFFLEdBQUdKLGtFQUFhQTtJQUNwRCxJQUFJRyxhQUFhQyxpQkFBaUI7UUFDaEMsT0FBTztJQUNUO0lBQ0EsT0FBTyxhQUFhLGlCQUFHTCxnREFBbUIsQ0FBQ0EsMkNBQWMsRUFBRSxNQUFNRztBQUNuRTtBQUNPLFNBQVNNLFlBQVksRUFBRU4sUUFBUSxFQUFFO0lBQ3RDLE1BQU0sRUFBRUMsU0FBUyxFQUFFLEdBQUdILGtFQUFhQTtJQUNuQyxJQUFJLENBQUNHLFdBQVc7UUFDZCxPQUFPO0lBQ1Q7SUFDQSxPQUFPLGFBQWEsaUJBQUdKLGdEQUFtQixDQUFDQSwyQ0FBYyxFQUFFLE1BQU1HO0FBQ25FLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvYXV0aF9oZWxwZXJzLmpzPzQ0MmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDb252ZXhBdXRoIH0gZnJvbSBcIi4vQ29udmV4QXV0aFN0YXRlLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gQXV0aGVudGljYXRlZCh7IGNoaWxkcmVuIH0pIHtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGlzQXV0aGVudGljYXRlZCB9ID0gdXNlQ29udmV4QXV0aCgpO1xuICBpZiAoaXNMb2FkaW5nIHx8ICFpc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBVbmF1dGhlbnRpY2F0ZWQoeyBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IHsgaXNMb2FkaW5nLCBpc0F1dGhlbnRpY2F0ZWQgfSA9IHVzZUNvbnZleEF1dGgoKTtcbiAgaWYgKGlzTG9hZGluZyB8fCBpc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBBdXRoTG9hZGluZyh7IGNoaWxkcmVuIH0pIHtcbiAgY29uc3QgeyBpc0xvYWRpbmcgfSA9IHVzZUNvbnZleEF1dGgoKTtcbiAgaWYgKCFpc0xvYWRpbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhfaGVscGVycy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnZleEF1dGgiLCJBdXRoZW50aWNhdGVkIiwiY2hpbGRyZW4iLCJpc0xvYWRpbmciLCJpc0F1dGhlbnRpY2F0ZWQiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJVbmF1dGhlbnRpY2F0ZWQiLCJBdXRoTG9hZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/auth_helpers.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/client.js':
    /*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/client.js ***!
  \********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProvider: () => (/* binding */ ConvexProvider),\n/* harmony export */   ConvexReactClient: () => (/* binding */ ConvexReactClient),\n/* harmony export */   createMutation: () => (/* binding */ createMutation),\n/* harmony export */   useAction: () => (/* binding */ useAction),\n/* harmony export */   useConvex: () => (/* binding */ useConvex),\n/* harmony export */   useConvexConnectionState: () => (/* binding */ useConvexConnectionState),\n/* harmony export */   useMutation: () => (/* binding */ useMutation),\n/* harmony export */   useQuery: () => (/* binding */ useQuery)\n/* harmony export */ });\n/* harmony import */ var _browser_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../browser/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "(ssr)/../../node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./use_queries.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_queries.js");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./use_subscription.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_subscription.js");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../server/api.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js");\n/* harmony import */ var _browser_logging_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../browser/logging.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/browser/logging.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\n\n\n\n\n\nconst DEFAULT_EXTEND_SUBSCRIPTION_FOR = 5e3;\nif (typeof react__WEBPACK_IMPORTED_MODULE_1__ === "undefined") {\n    throw new Error("Required dependency \'react\' not found");\n}\nfunction createMutation(mutationReference, client, update) {\n    function mutation(args) {\n        assertNotAccidentalArgument(args);\n        return client.mutation(mutationReference, args, {\n            optimisticUpdate: update\n        });\n    }\n    mutation.withOptimisticUpdate = function withOptimisticUpdate(optimisticUpdate) {\n        if (update !== void 0) {\n            throw new Error(`Already specified optimistic update for mutation ${(0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)}`);\n        }\n        return createMutation(mutationReference, client, optimisticUpdate);\n    };\n    return mutation;\n}\nfunction createAction(actionReference, client) {\n    return function(args) {\n        return client.action(actionReference, args);\n    };\n}\nclass ConvexReactClient {\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - See {@link ConvexReactClientOptions} for a full description.\n   */ constructor(address, options){\n        __publicField(this, "address");\n        __publicField(this, "cachedSync");\n        __publicField(this, "listeners");\n        __publicField(this, "options");\n        __publicField(this, "closed", false);\n        __publicField(this, "_logger");\n        __publicField(this, "adminAuth");\n        __publicField(this, "fakeUserIdentity");\n        if (address === void 0) {\n            throw new Error("No address provided to ConvexReactClient.\\nIf trying to deploy to production, make sure to follow all the instructions found at https://docs.convex.dev/production/hosting/\\nIf running locally, make sure to run `convex dev` and ensure the .env.local file is populated.");\n        }\n        if (typeof address !== "string") {\n            throw new Error(`ConvexReactClient requires a URL like \'https://happy-otter-123.convex.cloud\', received something of type ${typeof address} instead.`);\n        }\n        if (!address.includes("://")) {\n            throw new Error("Provided address was not an absolute URL.");\n        }\n        this.address = address;\n        this.listeners = /* @__PURE__ */ new Map();\n        this._logger = options?.logger === false ? (0,_browser_logging_js__WEBPACK_IMPORTED_MODULE_7__.instantiateNoopLogger)({\n            verbose: options?.verbose ?? false\n        }) : options?.logger !== true && options?.logger ? options.logger : (0,_browser_logging_js__WEBPACK_IMPORTED_MODULE_7__.instantiateDefaultLogger)({\n            verbose: options?.verbose ?? false\n        });\n        this.options = {\n            ...options,\n            logger: this._logger\n        };\n    }\n    /**\n   * Return the address for this client, useful for creating a new client.\n   *\n   * Not guaranteed to match the address with which this client was constructed:\n   * it may be canonicalized.\n   */ get url() {\n        return this.address;\n    }\n    /**\n   * Lazily instantiate the `BaseConvexClient` so we don\'t create the WebSocket\n   * when server-side rendering.\n   *\n   * @internal\n   */ get sync() {\n        if (this.closed) {\n            throw new Error("ConvexReactClient has already been closed.");\n        }\n        if (this.cachedSync) {\n            return this.cachedSync;\n        }\n        this.cachedSync = new _browser_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient(this.address, (updatedQueries)=>this.transition(updatedQueries), this.options);\n        if (this.adminAuth) {\n            this.cachedSync.setAdminAuth(this.adminAuth, this.fakeUserIdentity);\n        }\n        return this.cachedSync;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user\'s rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        if (typeof fetchToken === "string") {\n            throw new Error("Passing a string to ConvexReactClient.setAuth is no longer supported, please upgrade to passing in an async function to handle reauthentication.");\n        }\n        this.sync.setAuth(fetchToken, onChange ?? (()=>{}));\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.sync.clearAuth();\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        this.adminAuth = token;\n        this.fakeUserIdentity = identity;\n        if (this.closed) {\n            throw new Error("ConvexReactClient has already been closed.");\n        }\n        if (this.cachedSync) {\n            this.sync.setAdminAuth(token, identity);\n        }\n    }\n    /**\n   * Construct a new {@link Watch} on a Convex query function.\n   *\n   * **Most application code should not call this method directly. Instead use\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link WatchQueryOptions} options object for this query.\n   *\n   * @returns The {@link Watch} object.\n   */ watchQuery(query, ...argsAndOptions) {\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(query);\n        return {\n            onUpdate: (callback)=>{\n                const { queryToken, unsubscribe } = this.sync.subscribe(name, args, options);\n                const currentListeners = this.listeners.get(queryToken);\n                if (currentListeners !== void 0) {\n                    currentListeners.add(callback);\n                } else {\n                    this.listeners.set(queryToken, /* @__PURE__ */ new Set([\n                        callback\n                    ]));\n                }\n                return ()=>{\n                    if (this.closed) {\n                        return;\n                    }\n                    const currentListeners2 = this.listeners.get(queryToken);\n                    currentListeners2.delete(callback);\n                    if (currentListeners2.size === 0) {\n                        this.listeners.delete(queryToken);\n                    }\n                    unsubscribe();\n                };\n            },\n            localQueryResult: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryResult(name, args);\n                }\n                return void 0;\n            },\n            localQueryLogs: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryLogs(name, args);\n                }\n                return void 0;\n            },\n            journal: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.queryJournal(name, args);\n                }\n                return void 0;\n            }\n        };\n    }\n    // Let\'s try out a queryOptions-style API.\n    // This method is similar to the React Query API `queryClient.prefetchQuery()`.\n    // In the future an ensureQueryData(): Promise<Data> method could exist.\n    /**\n   * Indicates likely future interest in a query subscription.\n   *\n   * The implementation currently immediately subscribes to a query. In the future this method\n   * may prioritize some queries over others, fetch the query result without subscribing, or\n   * do nothing in slow network connections or high load scenarios.\n   *\n   * To use this in a React component, call useQuery() and ignore the return value.\n   *\n   * @param queryOptions - A query (function reference from an api object) and its args, plus\n   * an optional extendSubscriptionFor for how long to subscribe to the query.\n   */ prewarmQuery(queryOptions) {\n        const extendSubscriptionFor = queryOptions.extendSubscriptionFor ?? DEFAULT_EXTEND_SUBSCRIPTION_FOR;\n        const watch = this.watchQuery(queryOptions.query, queryOptions.args || {});\n        const unsubscribe = watch.onUpdate(()=>{});\n        setTimeout(unsubscribe, extendSubscriptionFor);\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation\'s result.\n   */ mutation(mutation, ...argsAndOptions) {\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutation);\n        return this.sync.mutation(name, args, options);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action\'s result.\n   */ action(action, ...args) {\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(action);\n        return this.sync.action(name, ...args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * **Most application code should subscribe to queries instead, using\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query\'s result.\n   */ query(query, ...args) {\n        const watch = this.watchQuery(query, ...args);\n        const existingResult = watch.localQueryResult();\n        if (existingResult !== void 0) {\n            return Promise.resolve(existingResult);\n        }\n        return new Promise((resolve, reject)=>{\n            const unsubscribe = watch.onUpdate(()=>{\n                unsubscribe();\n                try {\n                    resolve(watch.localQueryResult());\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        return this.sync.connectionState();\n    }\n    /**\n   * Subscribe to the {@link ConnectionState} between the client and the Convex\n   * backend, calling a callback each time it changes.\n   *\n   * Subscribed callbacks will be called when any part of ConnectionState changes.\n   * ConnectionState may grow in future versions (e.g. to provide a array of\n   * inflight requests) in which case callbacks would be called more frequently.\n   * ConnectionState may also *lose* properties in future versions as we figure\n   * out what information is most useful. As such this API is considered unstable.\n   *\n   * @returns An unsubscribe function to stop listening.\n   */ subscribeToConnectionState(cb) {\n        return this.sync.subscribeToConnectionState(cb);\n    }\n    /**\n   * Get the logger for this client.\n   *\n   * @returns The {@link Logger} for this client.\n   */ get logger() {\n        return this._logger;\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you\'re done with a {@link ConvexReactClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.closed = true;\n        this.listeners = /* @__PURE__ */ new Map();\n        if (this.cachedSync) {\n            const sync = this.cachedSync;\n            this.cachedSync = void 0;\n            await sync.close();\n        }\n    }\n    transition(updatedQueries) {\n        for (const queryToken of updatedQueries){\n            const callbacks = this.listeners.get(queryToken);\n            if (callbacks) {\n                for (const callback of callbacks){\n                    callback();\n                }\n            }\n        }\n    }\n}\nconst ConvexContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction useConvex() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n}\nconst ConvexProvider = ({ client, children })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ConvexContext.Provider, {\n        value: client\n    }, children);\n};\nfunction useQuery(query, ...args) {\n    const skip = args[0] === "skip";\n    const argsObject = args[0] === "skip" ? {} : (0,_common_index_js__WEBPACK_IMPORTED_MODULE_5__.parseArgs)(args[0]);\n    const queryReference = typeof query === "string" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(query) : query;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(queryReference);\n    const queries = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>skip ? {} : {\n            query: {\n                query: queryReference,\n                args: argsObject\n            }\n        }, // Stringify args so args that are semantically the same don\'t trigger a\n    // rerender. Saves developers from adding `useMemo` on every args usage.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_2__.convexToJson)(argsObject)),\n        queryName,\n        skip\n    ]);\n    const results = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_3__.useQueries)(queries);\n    const result = results["query"];\n    if (result instanceof Error) {\n        throw result;\n    }\n    return result;\n}\nfunction useMutation(mutation) {\n    const mutationReference = typeof mutation === "string" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(mutation) : mutation;\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    if (convex === void 0) {\n        throw new Error("Could not find Convex client! `useMutation` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createMutation(mutationReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)\n    ]);\n}\nfunction useAction(action) {\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    const actionReference = typeof action === "string" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(action) : action;\n    if (convex === void 0) {\n        throw new Error("Could not find Convex client! `useAction` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createAction(actionReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(actionReference)\n    ]);\n}\nfunction useConvexConnectionState() {\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    if (convex === void 0) {\n        throw new Error("Could not find Convex client! `useConvexConnectionState` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app");\n    }\n    const getCurrentValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        return convex.connectionState();\n    }, [\n        convex\n    ]);\n    const subscribe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((callback)=>{\n        return convex.subscribeToConnectionState(()=>{\n            callback();\n        });\n    }, [\n        convex\n    ]);\n    return (0,_use_subscription_js__WEBPACK_IMPORTED_MODULE_4__.useSubscription)({\n        getCurrentValue,\n        subscribe\n    });\n}\nfunction assertNotAccidentalArgument(value) {\n    if (typeof value === "object" && value !== null && "bubbles" in value && "persist" in value && "isDefaultPrevented" in value) {\n        throw new Error(`Convex function called with SyntheticEvent object. Did you use a Convex function as an event handler directly? Event handlers like onClick receive an event object as their first argument. These SyntheticEvent objects are not valid Convex values. Try wrapping the function like \\`const handler = () => myMutation();\\` and using \\`handler\\` in the event handler.`);\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/client.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/hydration.js':
    /*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/hydration.js ***!
  \***********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePreloadedQuery: () => (/* binding */ usePreloadedQuery)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "(ssr)/../../node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js");\n/* harmony import */ var _react_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../react/client.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/client.js");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n\n\n\n\n\nfunction usePreloadedQuery(preloadedQuery) {\n    const args = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._argsJSON), [\n        preloadedQuery._argsJSON\n    ]);\n    const preloadedResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._valueJSON), [\n        preloadedQuery._valueJSON\n    ]);\n    const result = (0,_react_client_js__WEBPACK_IMPORTED_MODULE_1__.useQuery)((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.makeFunctionReference)(preloadedQuery._name), args);\n    return result === void 0 ? preloadedResult : result;\n} //# sourceMappingURL=hydration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvaHlkcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWE7QUFDbUI7QUFDYztBQUNXO0FBQ1A7QUFDM0MsU0FBU0ksa0JBQWtCQyxjQUFjO0lBQzlDLE1BQU1DLE9BQU9OLDhDQUFPQSxDQUNsQixJQUFNRyw4REFBWUEsQ0FBQ0UsZUFBZUUsU0FBUyxHQUMzQztRQUFDRixlQUFlRSxTQUFTO0tBQUM7SUFFNUIsTUFBTUMsa0JBQWtCUiw4Q0FBT0EsQ0FDN0IsSUFBTUcsOERBQVlBLENBQUNFLGVBQWVJLFVBQVUsR0FDNUM7UUFBQ0osZUFBZUksVUFBVTtLQUFDO0lBRTdCLE1BQU1DLFNBQVNULDBEQUFRQSxDQUNyQkMscUVBQXFCQSxDQUFDRyxlQUFlTSxLQUFLLEdBQzFDTDtJQUVGLE9BQU9JLFdBQVcsS0FBSyxJQUFJRixrQkFBa0JFO0FBQy9DLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvaHlkcmF0aW9uLmpzPzAzMWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gXCIuLi9yZWFjdC9jbGllbnQuanNcIjtcbmltcG9ydCB7IG1ha2VGdW5jdGlvblJlZmVyZW5jZSB9IGZyb20gXCIuLi9zZXJ2ZXIvYXBpLmpzXCI7XG5pbXBvcnQgeyBqc29uVG9Db252ZXggfSBmcm9tIFwiLi4vdmFsdWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlUHJlbG9hZGVkUXVlcnkocHJlbG9hZGVkUXVlcnkpIHtcbiAgY29uc3QgYXJncyA9IHVzZU1lbW8oXG4gICAgKCkgPT4ganNvblRvQ29udmV4KHByZWxvYWRlZFF1ZXJ5Ll9hcmdzSlNPTiksXG4gICAgW3ByZWxvYWRlZFF1ZXJ5Ll9hcmdzSlNPTl1cbiAgKTtcbiAgY29uc3QgcHJlbG9hZGVkUmVzdWx0ID0gdXNlTWVtbyhcbiAgICAoKSA9PiBqc29uVG9Db252ZXgocHJlbG9hZGVkUXVlcnkuX3ZhbHVlSlNPTiksXG4gICAgW3ByZWxvYWRlZFF1ZXJ5Ll92YWx1ZUpTT05dXG4gICk7XG4gIGNvbnN0IHJlc3VsdCA9IHVzZVF1ZXJ5KFxuICAgIG1ha2VGdW5jdGlvblJlZmVyZW5jZShwcmVsb2FkZWRRdWVyeS5fbmFtZSksXG4gICAgYXJnc1xuICApO1xuICByZXR1cm4gcmVzdWx0ID09PSB2b2lkIDAgPyBwcmVsb2FkZWRSZXN1bHQgOiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oeWRyYXRpb24uanMubWFwXG4iXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZVF1ZXJ5IiwibWFrZUZ1bmN0aW9uUmVmZXJlbmNlIiwianNvblRvQ29udmV4IiwidXNlUHJlbG9hZGVkUXVlcnkiLCJwcmVsb2FkZWRRdWVyeSIsImFyZ3MiLCJfYXJnc0pTT04iLCJwcmVsb2FkZWRSZXN1bHQiLCJfdmFsdWVKU09OIiwicmVzdWx0IiwiX25hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/hydration.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/index.js':
    /*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/index.js ***!
  \*******************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: () => (/* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.AuthLoading),\n/* harmony export */   Authenticated: () => (/* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Authenticated),\n/* harmony export */   ConvexProvider: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexProvider),\n/* harmony export */   ConvexProviderWithAuth: () => (/* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.ConvexProviderWithAuth),\n/* harmony export */   ConvexReactClient: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexReactClient),\n/* harmony export */   Unauthenticated: () => (/* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Unauthenticated),\n/* harmony export */   insertAtBottomIfLoaded: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.insertAtBottomIfLoaded),\n/* harmony export */   insertAtPosition: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.insertAtPosition),\n/* harmony export */   insertAtTop: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.insertAtTop),\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.optimisticallyUpdateValueInPaginatedQuery),\n/* harmony export */   resetPaginationId: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.resetPaginationId),\n/* harmony export */   useAction: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useAction),\n/* harmony export */   useConvex: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useConvex),\n/* harmony export */   useConvexAuth: () => (/* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.useConvexAuth),\n/* harmony export */   useConvexConnectionState: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useConvexConnectionState),\n/* harmony export */   useMutation: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useMutation),\n/* harmony export */   usePaginatedQuery: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.usePaginatedQuery),\n/* harmony export */   usePreloadedQuery: () => (/* reexport safe */ _hydration_js__WEBPACK_IMPORTED_MODULE_4__.usePreloadedQuery),\n/* harmony export */   useQueries: () => (/* reexport safe */ _use_queries_js__WEBPACK_IMPORTED_MODULE_1__.useQueries),\n/* harmony export */   useQuery: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useQuery),\n/* harmony export */   useSubscription: () => (/* reexport safe */ _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__.useSubscription)\n/* harmony export */ });\n/* harmony import */ var _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./use_paginated_query.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_paginated_query.js");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use_queries.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_queries.js");\n/* harmony import */ var _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth_helpers.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/auth_helpers.js");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConvexAuthState.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/ConvexAuthState.js");\n/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hydration.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/hydration.js");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./use_subscription.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_subscription.js");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./client.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/client.js");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFhO0FBQzRCO0FBQ0s7QUFDWjtBQUNHO0FBQ047QUFDeUI7QUFTbkMsQ0FDckIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvaW5kZXguanM/ZTJlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VzZV9wYWdpbmF0ZWRfcXVlcnkuanNcIjtcbmV4cG9ydCB7IHVzZVF1ZXJpZXMgfSBmcm9tIFwiLi91c2VfcXVlcmllcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYXV0aF9oZWxwZXJzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9Db252ZXhBdXRoU3RhdGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2h5ZHJhdGlvbi5qc1wiO1xuZXhwb3J0IHsgdXNlU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4vdXNlX3N1YnNjcmlwdGlvbi5qc1wiO1xuZXhwb3J0IHtcbiAgQ29udmV4UmVhY3RDbGllbnQsXG4gIHVzZUNvbnZleCxcbiAgQ29udmV4UHJvdmlkZXIsXG4gIHVzZVF1ZXJ5LFxuICB1c2VNdXRhdGlvbixcbiAgdXNlQWN0aW9uLFxuICB1c2VDb252ZXhDb25uZWN0aW9uU3RhdGVcbn0gZnJvbSBcIi4vY2xpZW50LmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VRdWVyaWVzIiwidXNlU3Vic2NyaXB0aW9uIiwiQ29udmV4UmVhY3RDbGllbnQiLCJ1c2VDb252ZXgiLCJDb252ZXhQcm92aWRlciIsInVzZVF1ZXJ5IiwidXNlTXV0YXRpb24iLCJ1c2VBY3Rpb24iLCJ1c2VDb252ZXhDb25uZWN0aW9uU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/index.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/queries_observer.js':
    /*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/queries_observer.js ***!
  \******************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueriesObserver: () => (/* binding */ QueriesObserver)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server/api.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\nclass QueriesObserver {\n    constructor(createWatch){\n        __publicField(this, "createWatch");\n        __publicField(this, "queries");\n        __publicField(this, "listeners");\n        this.createWatch = createWatch;\n        this.queries = {};\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    setQueries(newQueries) {\n        for (const identifier of Object.keys(newQueries)){\n            const { query, args } = newQueries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            if (this.queries[identifier] === void 0) {\n                this.addQuery(identifier, query, args);\n            } else {\n                const existingInfo = this.queries[identifier];\n                if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(existingInfo.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(existingInfo.args))) {\n                    this.removeQuery(identifier);\n                    this.addQuery(identifier, query, args);\n                }\n            }\n        }\n        for (const identifier of Object.keys(this.queries)){\n            if (newQueries[identifier] === void 0) {\n                this.removeQuery(identifier);\n            }\n        }\n    }\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    getLocalResults(queries) {\n        const result = {};\n        for (const identifier of Object.keys(queries)){\n            const { query, args } = queries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            const watch = this.createWatch(query, args);\n            let value;\n            try {\n                value = watch.localQueryResult();\n            } catch (e) {\n                if (e instanceof Error) {\n                    value = e;\n                } else {\n                    throw e;\n                }\n            }\n            result[identifier] = value;\n        }\n        return result;\n    }\n    setCreateWatch(createWatch) {\n        this.createWatch = createWatch;\n        for (const identifier of Object.keys(this.queries)){\n            const { query, args, watch } = this.queries[identifier];\n            const journal = watch.journal();\n            this.removeQuery(identifier);\n            this.addQuery(identifier, query, args, journal);\n        }\n    }\n    destroy() {\n        for (const identifier of Object.keys(this.queries)){\n            this.removeQuery(identifier);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    addQuery(identifier, query, args, journal) {\n        if (this.queries[identifier] !== void 0) {\n            throw new Error(`Tried to add a new query with identifier ${identifier} when it already exists.`);\n        }\n        const watch = this.createWatch(query, args, journal);\n        const unsubscribe = watch.onUpdate(()=>this.notifyListeners());\n        this.queries[identifier] = {\n            query,\n            args,\n            watch,\n            unsubscribe\n        };\n    }\n    removeQuery(identifier) {\n        const info = this.queries[identifier];\n        if (info === void 0) {\n            throw new Error(`No query found with identifier ${identifier}.`);\n        }\n        info.unsubscribe();\n        delete this.queries[identifier];\n    }\n    notifyListeners() {\n        for (const listener of this.listeners){\n            listener();\n        }\n    }\n} //# sourceMappingURL=queries_observer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/queries_observer.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_paginated_query.js':
    /*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_paginated_query.js ***!
  \*********************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insertAtBottomIfLoaded: () => (/* binding */ insertAtBottomIfLoaded),\n/* harmony export */   insertAtPosition: () => (/* binding */ insertAtPosition),\n/* harmony export */   insertAtTop: () => (/* binding */ insertAtTop),\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: () => (/* binding */ optimisticallyUpdateValueInPaginatedQuery),\n/* harmony export */   resetPaginationId: () => (/* binding */ resetPaginationId),\n/* harmony export */   usePaginatedQuery: () => (/* binding */ usePaginatedQuery)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "(ssr)/../../node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use_queries.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_queries.js");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../server/api.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./client.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/client.js");\n/* harmony import */ var _values_compare_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../values/compare.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/compare.js");\n\n\n\n\n\n\n\nconst splitQuery = (key, splitCursor, continueCursor)=>(prevState)=>{\n        const queries = {\n            ...prevState.queries\n        };\n        const splitKey1 = prevState.nextPageKey;\n        const splitKey2 = prevState.nextPageKey + 1;\n        const nextPageKey = prevState.nextPageKey + 2;\n        queries[splitKey1] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    endCursor: splitCursor\n                }\n            }\n        };\n        queries[splitKey2] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    cursor: splitCursor,\n                    endCursor: continueCursor\n                }\n            }\n        };\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        ongoingSplits[key] = [\n            splitKey1,\n            splitKey2\n        ];\n        return {\n            ...prevState,\n            nextPageKey,\n            queries,\n            ongoingSplits\n        };\n    };\nconst completeSplitQuery = (key)=>(prevState)=>{\n        const completedSplit = prevState.ongoingSplits[key];\n        if (completedSplit === void 0) {\n            return prevState;\n        }\n        const queries = {\n            ...prevState.queries\n        };\n        delete queries[key];\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        delete ongoingSplits[key];\n        let pageKeys = prevState.pageKeys.slice();\n        const pageIndex = prevState.pageKeys.findIndex((v)=>v === key);\n        if (pageIndex >= 0) {\n            pageKeys = [\n                ...prevState.pageKeys.slice(0, pageIndex),\n                ...completedSplit,\n                ...prevState.pageKeys.slice(pageIndex + 1)\n            ];\n        }\n        return {\n            ...prevState,\n            queries,\n            pageKeys,\n            ongoingSplits\n        };\n    };\nfunction usePaginatedQuery(query, args, options) {\n    if (typeof options?.initialNumItems !== "number" || options.initialNumItems < 0) {\n        throw new Error(`\\`options.initialNumItems\\` must be a positive number. Received \\`${options?.initialNumItems}\\`.`);\n    }\n    const skip = args === "skip";\n    const argsObject = skip ? {} : args;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query);\n    const createInitialState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return ()=>{\n            const id = nextPaginationId();\n            return {\n                query,\n                args: argsObject,\n                id,\n                nextPageKey: 1,\n                pageKeys: skip ? [] : [\n                    0\n                ],\n                queries: skip ? {} : {\n                    0: {\n                        query,\n                        args: {\n                            ...argsObject,\n                            paginationOpts: {\n                                numItems: options.initialNumItems,\n                                cursor: null,\n                                id\n                            }\n                        }\n                    }\n                },\n                ongoingSplits: {},\n                skip\n            };\n        };\n    }, [\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)),\n        queryName,\n        options.initialNumItems,\n        skip\n    ]);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(createInitialState);\n    let currState = state;\n    if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(state.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(state.args)) || skip !== state.skip) {\n        currState = createInitialState();\n        setState(currState);\n    }\n    const convexClient = (0,_client_js__WEBPACK_IMPORTED_MODULE_4__.useConvex)();\n    const logger = convexClient.logger;\n    const resultsObject = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_2__.useQueries)(currState.queries);\n    const [results, maybeLastResult] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let currResult = void 0;\n        const allItems = [];\n        for (const pageKey of currState.pageKeys){\n            currResult = resultsObject[pageKey];\n            if (currResult === void 0) {\n                break;\n            }\n            if (currResult instanceof Error) {\n                if (currResult.message.includes("InvalidCursor") || currResult instanceof _values_index_js__WEBPACK_IMPORTED_MODULE_1__.ConvexError && typeof currResult.data === "object" && currResult.data?.isConvexSystemError === true && currResult.data?.paginationError === "InvalidCursor") {\n                    logger.warn("usePaginatedQuery hit error, resetting pagination state: " + currResult.message);\n                    setState(createInitialState);\n                    return [\n                        [],\n                        void 0\n                    ];\n                } else {\n                    throw currResult;\n                }\n            }\n            const ongoingSplit = currState.ongoingSplits[pageKey];\n            if (ongoingSplit !== void 0) {\n                if (resultsObject[ongoingSplit[0]] !== void 0 && resultsObject[ongoingSplit[1]] !== void 0) {\n                    setState(completeSplitQuery(pageKey));\n                }\n            } else if (currResult.splitCursor && (currResult.pageStatus === "SplitRecommended" || currResult.pageStatus === "SplitRequired" || currResult.page.length > options.initialNumItems * 2)) {\n                setState(splitQuery(pageKey, currResult.splitCursor, currResult.continueCursor));\n            }\n            if (currResult.pageStatus === "SplitRequired") {\n                return [\n                    allItems,\n                    void 0\n                ];\n            }\n            allItems.push(...currResult.page);\n        }\n        return [\n            allItems,\n            currResult\n        ];\n    }, [\n        resultsObject,\n        currState.pageKeys,\n        currState.ongoingSplits,\n        options.initialNumItems,\n        createInitialState,\n        logger\n    ]);\n    const statusObject = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (maybeLastResult === void 0) {\n            if (currState.nextPageKey === 1) {\n                return {\n                    status: "LoadingFirstPage",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            } else {\n                return {\n                    status: "LoadingMore",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            }\n        }\n        if (maybeLastResult.isDone) {\n            return {\n                status: "Exhausted",\n                isLoading: false,\n                loadMore: (_numItems)=>{}\n            };\n        }\n        const continueCursor = maybeLastResult.continueCursor;\n        let alreadyLoadingMore = false;\n        return {\n            status: "CanLoadMore",\n            isLoading: false,\n            loadMore: (numItems)=>{\n                if (!alreadyLoadingMore) {\n                    alreadyLoadingMore = true;\n                    setState((prevState)=>{\n                        const pageKeys = [\n                            ...prevState.pageKeys,\n                            prevState.nextPageKey\n                        ];\n                        const queries = {\n                            ...prevState.queries\n                        };\n                        queries[prevState.nextPageKey] = {\n                            query: prevState.query,\n                            args: {\n                                ...prevState.args,\n                                paginationOpts: {\n                                    numItems,\n                                    cursor: continueCursor,\n                                    id: prevState.id\n                                }\n                            }\n                        };\n                        return {\n                            ...prevState,\n                            nextPageKey: prevState.nextPageKey + 1,\n                            pageKeys,\n                            queries\n                        };\n                    });\n                }\n            }\n        };\n    }, [\n        maybeLastResult,\n        currState.nextPageKey\n    ]);\n    return {\n        results,\n        ...statusObject\n    };\n}\nlet paginationId = 0;\nfunction nextPaginationId() {\n    paginationId++;\n    return paginationId;\n}\nfunction resetPaginationId() {\n    paginationId = 0;\n}\nfunction optimisticallyUpdateValueInPaginatedQuery(localStore, query, args, updateValue) {\n    const expectedArgs = JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(args));\n    for (const queryResult of localStore.getAllQueries(query)){\n        if (queryResult.value !== void 0) {\n            const { paginationOpts: _, ...innerArgs } = queryResult.args;\n            if (JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(innerArgs)) === expectedArgs) {\n                const value = queryResult.value;\n                if (typeof value === "object" && value !== null && Array.isArray(value.page)) {\n                    localStore.setQuery(query, queryResult.args, {\n                        ...value,\n                        page: value.page.map(updateValue)\n                    });\n                }\n            }\n        }\n    }\n}\nfunction insertAtTop(options) {\n    const { paginatedQuery, argsToMatch, localQueryStore, item } = options;\n    const queries = localQueryStore.getAllQueries(paginatedQuery);\n    const queriesThatMatch = queries.filter((q)=>{\n        if (argsToMatch === void 0) {\n            return true;\n        }\n        return Object.keys(argsToMatch).every(// @ts-expect-error -- This should be safe since both should be plain objects\n        (k)=>(0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(argsToMatch[k], q.args[k]) === 0);\n    });\n    const firstPage = queriesThatMatch.find((q)=>q.args.paginationOpts.cursor === null);\n    if (firstPage === void 0 || firstPage.value === void 0) {\n        return;\n    }\n    localQueryStore.setQuery(paginatedQuery, firstPage.args, {\n        ...firstPage.value,\n        page: [\n            item,\n            ...firstPage.value.page\n        ]\n    });\n}\nfunction insertAtBottomIfLoaded(options) {\n    const { paginatedQuery, localQueryStore, item, argsToMatch } = options;\n    const queries = localQueryStore.getAllQueries(paginatedQuery);\n    const queriesThatMatch = queries.filter((q)=>{\n        if (argsToMatch === void 0) {\n            return true;\n        }\n        return Object.keys(argsToMatch).every(// @ts-expect-error -- This should be safe since both should be plain objects\n        (k)=>(0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(argsToMatch[k], q.args[k]) === 0);\n    });\n    const lastPage = queriesThatMatch.find((q)=>q.value !== void 0 && q.value.isDone);\n    if (lastPage === void 0) {\n        return;\n    }\n    localQueryStore.setQuery(paginatedQuery, lastPage.args, {\n        ...lastPage.value,\n        page: [\n            ...lastPage.value.page,\n            item\n        ]\n    });\n}\nfunction insertAtPosition(options) {\n    const { paginatedQuery, sortOrder, sortKeyFromItem, localQueryStore, item, argsToMatch } = options;\n    const queries = localQueryStore.getAllQueries(paginatedQuery);\n    const queryGroups = {};\n    for (const query of queries){\n        if (argsToMatch !== void 0 && !Object.keys(argsToMatch).every((k)=>// @ts-ignore why is this not working?\n            argsToMatch[k] === query.args[k])) {\n            continue;\n        }\n        const key = JSON.stringify(Object.fromEntries(Object.entries(query.args).map(([k, v])=>[\n                k,\n                k === "paginationOpts" ? v.id : v\n            ])));\n        queryGroups[key] ?? (queryGroups[key] = []);\n        queryGroups[key].push(query);\n    }\n    for (const pageQueries of Object.values(queryGroups)){\n        insertAtPositionInPages({\n            pageQueries,\n            paginatedQuery,\n            sortOrder,\n            sortKeyFromItem,\n            localQueryStore,\n            item\n        });\n    }\n}\nfunction insertAtPositionInPages(options) {\n    const { pageQueries, sortOrder, sortKeyFromItem, localQueryStore, item, paginatedQuery } = options;\n    const insertedKey = sortKeyFromItem(item);\n    const loadedPages = pageQueries.filter((q)=>q.value !== void 0 && q.value.page.length > 0);\n    const sortedPages = loadedPages.sort((a, b)=>{\n        const aKey = sortKeyFromItem(a.value.page[0]);\n        const bKey = sortKeyFromItem(b.value.page[0]);\n        if (sortOrder === "asc") {\n            return (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(aKey, bKey);\n        } else {\n            return (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(bKey, aKey);\n        }\n    });\n    const firstLoadedPage = sortedPages[0];\n    if (firstLoadedPage === void 0) {\n        return;\n    }\n    const firstPageKey = sortKeyFromItem(firstLoadedPage.value.page[0]);\n    const isBeforeFirstPage = sortOrder === "asc" ? (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(insertedKey, firstPageKey) <= 0 : (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(insertedKey, firstPageKey) >= 0;\n    if (isBeforeFirstPage) {\n        if (firstLoadedPage.args.paginationOpts.cursor === null) {\n            localQueryStore.setQuery(paginatedQuery, firstLoadedPage.args, {\n                ...firstLoadedPage.value,\n                page: [\n                    item,\n                    ...firstLoadedPage.value.page\n                ]\n            });\n        } else {\n            return;\n        }\n        return;\n    }\n    const lastLoadedPage = sortedPages[sortedPages.length - 1];\n    if (lastLoadedPage === void 0) {\n        return;\n    }\n    const lastPageKey = sortKeyFromItem(lastLoadedPage.value.page[lastLoadedPage.value.page.length - 1]);\n    const isAfterLastPage = sortOrder === "asc" ? (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(insertedKey, lastPageKey) >= 0 : (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(insertedKey, lastPageKey) <= 0;\n    if (isAfterLastPage) {\n        if (lastLoadedPage.value.isDone) {\n            localQueryStore.setQuery(paginatedQuery, lastLoadedPage.args, {\n                ...lastLoadedPage.value,\n                page: [\n                    ...lastLoadedPage.value.page,\n                    item\n                ]\n            });\n        }\n        return;\n    }\n    const successorPageIndex = sortedPages.findIndex((p)=>sortOrder === "asc" ? (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(sortKeyFromItem(p.value.page[0]), insertedKey) > 0 : (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(sortKeyFromItem(p.value.page[0]), insertedKey) < 0);\n    const pageToUpdate = successorPageIndex === -1 ? sortedPages[sortedPages.length - 1] : sortedPages[successorPageIndex - 1];\n    if (pageToUpdate === void 0) {\n        return;\n    }\n    const indexWithinPage = pageToUpdate.value.page.findIndex((e)=>sortOrder === "asc" ? (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(sortKeyFromItem(e), insertedKey) >= 0 : (0,_values_compare_js__WEBPACK_IMPORTED_MODULE_5__.compareValues)(sortKeyFromItem(e), insertedKey) <= 0);\n    const newPage = indexWithinPage === -1 ? [\n        ...pageToUpdate.value.page,\n        item\n    ] : [\n        ...pageToUpdate.value.page.slice(0, indexWithinPage),\n        item,\n        ...pageToUpdate.value.page.slice(indexWithinPage)\n    ];\n    localQueryStore.setQuery(paginatedQuery, pageToUpdate.args, {\n        ...pageToUpdate.value,\n        page: newPage\n    });\n} //# sourceMappingURL=use_paginated_query.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_paginated_query.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_queries.js':
    /*!*************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_queries.js ***!
  \*************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQueries: () => (/* binding */ useQueries),\n/* harmony export */   useQueriesHelper: () => (/* binding */ useQueriesHelper)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "(ssr)/../../node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/client.js");\n/* harmony import */ var _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queries_observer.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/queries_observer.js");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./use_subscription.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_subscription.js");\n\n\n\n\n\nfunction useQueries(queries) {\n    const convex = (0,_client_js__WEBPACK_IMPORTED_MODULE_1__.useConvex)();\n    if (convex === void 0) {\n        throw new Error("Could not find Convex client! `useQuery` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app");\n    }\n    const createWatch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return (query, args, journal)=>{\n            return convex.watchQuery(query, args, journal ? {\n                journal\n            } : {});\n        };\n    }, [\n        convex\n    ]);\n    return useQueriesHelper(queries, createWatch);\n}\nfunction useQueriesHelper(queries, createWatch) {\n    const [observer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__.QueriesObserver(createWatch));\n    if (observer.createWatch !== createWatch) {\n        observer.setCreateWatch(createWatch);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>observer.destroy(), [\n        observer\n    ]);\n    const subscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            getCurrentValue: ()=>{\n                return observer.getLocalResults(queries);\n            },\n            subscribe: (callback)=>{\n                observer.setQueries(queries);\n                return observer.subscribe(callback);\n            }\n        }), [\n        observer,\n        queries\n    ]);\n    return (0,_use_subscription_js__WEBPACK_IMPORTED_MODULE_3__.useSubscription)(subscription);\n} //# sourceMappingURL=use_queries.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvdXNlX3F1ZXJpZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWE7QUFDd0M7QUFDYjtBQUNnQjtBQUNBO0FBQ2pELFNBQVNNLFdBQVdDLE9BQU87SUFDaEMsTUFBTUMsU0FBU0wscURBQVNBO0lBQ3hCLElBQUlLLFdBQVcsS0FBSyxHQUFHO1FBQ3JCLE1BQU0sSUFBSUMsTUFDUjtJQUVKO0lBQ0EsTUFBTUMsY0FBY1QsOENBQU9BLENBQUM7UUFDMUIsT0FBTyxDQUFDVSxPQUFPQyxNQUFNQztZQUNuQixPQUFPTCxPQUFPTSxVQUFVLENBQUNILE9BQU9DLE1BQU1DLFVBQVU7Z0JBQUVBO1lBQVEsSUFBSSxDQUFDO1FBQ2pFO0lBQ0YsR0FBRztRQUFDTDtLQUFPO0lBQ1gsT0FBT08saUJBQWlCUixTQUFTRztBQUNuQztBQUNPLFNBQVNLLGlCQUFpQlIsT0FBTyxFQUFFRyxXQUFXO0lBQ25ELE1BQU0sQ0FBQ00sU0FBUyxHQUFHZCwrQ0FBUUEsQ0FBQyxJQUFNLElBQUlFLGlFQUFlQSxDQUFDTTtJQUN0RCxJQUFJTSxTQUFTTixXQUFXLEtBQUtBLGFBQWE7UUFDeENNLFNBQVNDLGNBQWMsQ0FBQ1A7SUFDMUI7SUFDQVYsZ0RBQVNBLENBQUMsSUFBTSxJQUFNZ0IsU0FBU0UsT0FBTyxJQUFJO1FBQUNGO0tBQVM7SUFDcEQsTUFBTUcsZUFBZWxCLDhDQUFPQSxDQUMxQixJQUFPO1lBQ0xtQixpQkFBaUI7Z0JBQ2YsT0FBT0osU0FBU0ssZUFBZSxDQUFDZDtZQUNsQztZQUNBZSxXQUFXLENBQUNDO2dCQUNWUCxTQUFTUSxVQUFVLENBQUNqQjtnQkFDcEIsT0FBT1MsU0FBU00sU0FBUyxDQUFDQztZQUM1QjtRQUNGLElBQ0E7UUFBQ1A7UUFBVVQ7S0FBUTtJQUVyQixPQUFPRixxRUFBZUEsQ0FBQ2M7QUFDekIsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9yZWFjdC91c2VfcXVlcmllcy5qcz9lNmQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ29udmV4IH0gZnJvbSBcIi4vY2xpZW50LmpzXCI7XG5pbXBvcnQgeyBRdWVyaWVzT2JzZXJ2ZXIgfSBmcm9tIFwiLi9xdWVyaWVzX29ic2VydmVyLmpzXCI7XG5pbXBvcnQgeyB1c2VTdWJzY3JpcHRpb24gfSBmcm9tIFwiLi91c2Vfc3Vic2NyaXB0aW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlUXVlcmllcyhxdWVyaWVzKSB7XG4gIGNvbnN0IGNvbnZleCA9IHVzZUNvbnZleCgpO1xuICBpZiAoY29udmV4ID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkNvdWxkIG5vdCBmaW5kIENvbnZleCBjbGllbnQhIGB1c2VRdWVyeWAgbXVzdCBiZSB1c2VkIGluIHRoZSBSZWFjdCBjb21wb25lbnQgdHJlZSB1bmRlciBgQ29udmV4UHJvdmlkZXJgLiBEaWQgeW91IGZvcmdldCBpdD8gU2VlIGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L3F1aWNrLXN0YXJ0I3NldC11cC1jb252ZXgtaW4teW91ci1yZWFjdC1hcHBcIlxuICAgICk7XG4gIH1cbiAgY29uc3QgY3JlYXRlV2F0Y2ggPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gKHF1ZXJ5LCBhcmdzLCBqb3VybmFsKSA9PiB7XG4gICAgICByZXR1cm4gY29udmV4LndhdGNoUXVlcnkocXVlcnksIGFyZ3MsIGpvdXJuYWwgPyB7IGpvdXJuYWwgfSA6IHt9KTtcbiAgICB9O1xuICB9LCBbY29udmV4XSk7XG4gIHJldHVybiB1c2VRdWVyaWVzSGVscGVyKHF1ZXJpZXMsIGNyZWF0ZVdhdGNoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VRdWVyaWVzSGVscGVyKHF1ZXJpZXMsIGNyZWF0ZVdhdGNoKSB7XG4gIGNvbnN0IFtvYnNlcnZlcl0gPSB1c2VTdGF0ZSgoKSA9PiBuZXcgUXVlcmllc09ic2VydmVyKGNyZWF0ZVdhdGNoKSk7XG4gIGlmIChvYnNlcnZlci5jcmVhdGVXYXRjaCAhPT0gY3JlYXRlV2F0Y2gpIHtcbiAgICBvYnNlcnZlci5zZXRDcmVhdGVXYXRjaChjcmVhdGVXYXRjaCk7XG4gIH1cbiAgdXNlRWZmZWN0KCgpID0+ICgpID0+IG9ic2VydmVyLmRlc3Ryb3koKSwgW29ic2VydmVyXSk7XG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIGdldEN1cnJlbnRWYWx1ZTogKCkgPT4ge1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZ2V0TG9jYWxSZXN1bHRzKHF1ZXJpZXMpO1xuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZTogKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIG9ic2VydmVyLnNldFF1ZXJpZXMocXVlcmllcyk7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5zdWJzY3JpYmUoY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pLFxuICAgIFtvYnNlcnZlciwgcXVlcmllc11cbiAgKTtcbiAgcmV0dXJuIHVzZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlX3F1ZXJpZXMuanMubWFwXG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlTWVtbyIsInVzZVN0YXRlIiwidXNlQ29udmV4IiwiUXVlcmllc09ic2VydmVyIiwidXNlU3Vic2NyaXB0aW9uIiwidXNlUXVlcmllcyIsInF1ZXJpZXMiLCJjb252ZXgiLCJFcnJvciIsImNyZWF0ZVdhdGNoIiwicXVlcnkiLCJhcmdzIiwiam91cm5hbCIsIndhdGNoUXVlcnkiLCJ1c2VRdWVyaWVzSGVscGVyIiwib2JzZXJ2ZXIiLCJzZXRDcmVhdGVXYXRjaCIsImRlc3Ryb3kiLCJzdWJzY3JpcHRpb24iLCJnZXRDdXJyZW50VmFsdWUiLCJnZXRMb2NhbFJlc3VsdHMiLCJzdWJzY3JpYmUiLCJjYWxsYmFjayIsInNldFF1ZXJpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_queries.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_subscription.js':
    /*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_subscription.js ***!
  \******************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: () => (/* binding */ useSubscription)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "(ssr)/../../node_modules/.pnpm/next@14.1.0_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js");\n\n\nfunction useSubscription({ // (Synchronously) returns the current value of our subscription.\ngetCurrentValue, // This function is passed an event handler to attach to the subscription.\n// It should return an unsubscribe function that removes the handler.\nsubscribe }) {\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            getCurrentValue,\n            subscribe,\n            value: getCurrentValue()\n        }));\n    let valueToReturn = state.value;\n    if (state.getCurrentValue !== getCurrentValue || state.subscribe !== subscribe) {\n        valueToReturn = getCurrentValue();\n        setState({\n            getCurrentValue,\n            subscribe,\n            value: valueToReturn\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let didUnsubscribe = false;\n        const checkForUpdates = ()=>{\n            if (didUnsubscribe) {\n                return;\n            }\n            setState((prevState)=>{\n                if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe) {\n                    return prevState;\n                }\n                const value = getCurrentValue();\n                if (prevState.value === value) {\n                    return prevState;\n                }\n                return {\n                    ...prevState,\n                    value\n                };\n            });\n        };\n        const unsubscribe = subscribe(checkForUpdates);\n        checkForUpdates();\n        return ()=>{\n            didUnsubscribe = true;\n            unsubscribe();\n        };\n    }, [\n        getCurrentValue,\n        subscribe\n    ]);\n    return valueToReturn;\n} //# sourceMappingURL=use_subscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvdXNlX3N1YnNjcmlwdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFhO0FBQytCO0FBQ3JDLFNBQVNFLGdCQUFnQixFQUM5QixpRUFBaUU7QUFDakVDLGVBQWUsRUFDZiwwRUFBMEU7QUFDMUUscUVBQXFFO0FBQ3JFQyxTQUFTLEVBQ1Y7SUFDQyxNQUFNLENBQUNDLE9BQU9DLFNBQVMsR0FBR0wsK0NBQVFBLENBQUMsSUFBTztZQUN4Q0U7WUFDQUM7WUFDQUcsT0FBT0o7UUFDVDtJQUNBLElBQUlLLGdCQUFnQkgsTUFBTUUsS0FBSztJQUMvQixJQUFJRixNQUFNRixlQUFlLEtBQUtBLG1CQUFtQkUsTUFBTUQsU0FBUyxLQUFLQSxXQUFXO1FBQzlFSSxnQkFBZ0JMO1FBQ2hCRyxTQUFTO1lBQ1BIO1lBQ0FDO1lBQ0FHLE9BQU9DO1FBQ1Q7SUFDRjtJQUNBUixnREFBU0EsQ0FBQztRQUNSLElBQUlTLGlCQUFpQjtRQUNyQixNQUFNQyxrQkFBa0I7WUFDdEIsSUFBSUQsZ0JBQWdCO2dCQUNsQjtZQUNGO1lBQ0FILFNBQVMsQ0FBQ0s7Z0JBQ1IsSUFBSUEsVUFBVVIsZUFBZSxLQUFLQSxtQkFBbUJRLFVBQVVQLFNBQVMsS0FBS0EsV0FBVztvQkFDdEYsT0FBT087Z0JBQ1Q7Z0JBQ0EsTUFBTUosUUFBUUo7Z0JBQ2QsSUFBSVEsVUFBVUosS0FBSyxLQUFLQSxPQUFPO29CQUM3QixPQUFPSTtnQkFDVDtnQkFDQSxPQUFPO29CQUFFLEdBQUdBLFNBQVM7b0JBQUVKO2dCQUFNO1lBQy9CO1FBQ0Y7UUFDQSxNQUFNSyxjQUFjUixVQUFVTTtRQUM5QkE7UUFDQSxPQUFPO1lBQ0xELGlCQUFpQjtZQUNqQkc7UUFDRjtJQUNGLEdBQUc7UUFBQ1Q7UUFBaUJDO0tBQVU7SUFDL0IsT0FBT0k7QUFDVCxFQUNBLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L3VzZV9zdWJzY3JpcHRpb24uanM/NmM1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VTdWJzY3JpcHRpb24oe1xuICAvLyAoU3luY2hyb25vdXNseSkgcmV0dXJucyB0aGUgY3VycmVudCB2YWx1ZSBvZiBvdXIgc3Vic2NyaXB0aW9uLlxuICBnZXRDdXJyZW50VmFsdWUsXG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgcGFzc2VkIGFuIGV2ZW50IGhhbmRsZXIgdG8gYXR0YWNoIHRvIHRoZSBzdWJzY3JpcHRpb24uXG4gIC8vIEl0IHNob3VsZCByZXR1cm4gYW4gdW5zdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCByZW1vdmVzIHRoZSBoYW5kbGVyLlxuICBzdWJzY3JpYmVcbn0pIHtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSgoKSA9PiAoe1xuICAgIGdldEN1cnJlbnRWYWx1ZSxcbiAgICBzdWJzY3JpYmUsXG4gICAgdmFsdWU6IGdldEN1cnJlbnRWYWx1ZSgpXG4gIH0pKTtcbiAgbGV0IHZhbHVlVG9SZXR1cm4gPSBzdGF0ZS52YWx1ZTtcbiAgaWYgKHN0YXRlLmdldEN1cnJlbnRWYWx1ZSAhPT0gZ2V0Q3VycmVudFZhbHVlIHx8IHN0YXRlLnN1YnNjcmliZSAhPT0gc3Vic2NyaWJlKSB7XG4gICAgdmFsdWVUb1JldHVybiA9IGdldEN1cnJlbnRWYWx1ZSgpO1xuICAgIHNldFN0YXRlKHtcbiAgICAgIGdldEN1cnJlbnRWYWx1ZSxcbiAgICAgIHN1YnNjcmliZSxcbiAgICAgIHZhbHVlOiB2YWx1ZVRvUmV0dXJuXG4gICAgfSk7XG4gIH1cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICBjb25zdCBjaGVja0ZvclVwZGF0ZXMgPSAoKSA9PiB7XG4gICAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2V0U3RhdGUoKHByZXZTdGF0ZSkgPT4ge1xuICAgICAgICBpZiAocHJldlN0YXRlLmdldEN1cnJlbnRWYWx1ZSAhPT0gZ2V0Q3VycmVudFZhbHVlIHx8IHByZXZTdGF0ZS5zdWJzY3JpYmUgIT09IHN1YnNjcmliZSkge1xuICAgICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRDdXJyZW50VmFsdWUoKTtcbiAgICAgICAgaWYgKHByZXZTdGF0ZS52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgdmFsdWUgfTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSBzdWJzY3JpYmUoY2hlY2tGb3JVcGRhdGVzKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbZ2V0Q3VycmVudFZhbHVlLCBzdWJzY3JpYmVdKTtcbiAgcmV0dXJuIHZhbHVlVG9SZXR1cm47XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2Vfc3Vic2NyaXB0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlU3Vic2NyaXB0aW9uIiwiZ2V0Q3VycmVudFZhbHVlIiwic3Vic2NyaWJlIiwic3RhdGUiLCJzZXRTdGF0ZSIsInZhbHVlIiwidmFsdWVUb1JldHVybiIsImRpZFVuc3Vic2NyaWJlIiwiY2hlY2tGb3JVcGRhdGVzIiwicHJldlN0YXRlIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/react/use_subscription.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js':
    /*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js ***!
  \******************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anyApi: () => (/* binding */ anyApi),\n/* harmony export */   filterApi: () => (/* binding */ filterApi),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   justActions: () => (/* binding */ justActions),\n/* harmony export */   justInternal: () => (/* binding */ justInternal),\n/* harmony export */   justMutations: () => (/* binding */ justMutations),\n/* harmony export */   justPaginatedQueries: () => (/* binding */ justPaginatedQueries),\n/* harmony export */   justPublic: () => (/* binding */ justPublic),\n/* harmony export */   justQueries: () => (/* binding */ justQueries),\n/* harmony export */   justSchedulable: () => (/* binding */ justSchedulable),\n/* harmony export */   makeFunctionReference: () => (/* binding */ makeFunctionReference)\n/* harmony export */ });\n/* harmony import */ var _functionName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functionName.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/functionName.js");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/paths.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/paths.js");\n\n\n\nfunction getFunctionName(functionReference) {\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionAddress)(functionReference);\n    if (address.name === void 0) {\n        if (address.functionHandle !== void 0) {\n            throw new Error(`Expected function reference like "api.file.func" or "internal.file.func", but received function handle ${address.functionHandle}`);\n        } else if (address.reference !== void 0) {\n            throw new Error(`Expected function reference in the current component like "api.file.func" or "internal.file.func", but received reference ${address.reference}`);\n        }\n        throw new Error(`Expected function reference like "api.file.func" or "internal.file.func", but received ${JSON.stringify(address)}`);\n    }\n    if (typeof functionReference === "string") return functionReference;\n    const name = functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName];\n    if (!name) {\n        throw new Error(`${functionReference} is not a functionReference`);\n    }\n    return name;\n}\nfunction makeFunctionReference(name) {\n    return {\n        [_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]: name\n    };\n}\nfunction createApi(pathParts = []) {\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === "string") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createApi(newParts);\n            } else if (prop === _functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName) {\n                if (pathParts.length < 2) {\n                    const found = [\n                        "api",\n                        ...pathParts\n                    ].join(".");\n                    throw new Error(`API path is expected to be of the form \\`api.moduleName.functionName\\`. Found: \\`${found}\\``);\n                }\n                const path = pathParts.slice(0, -1).join("/");\n                const exportName = pathParts[pathParts.length - 1];\n                if (exportName === "default") {\n                    return path;\n                } else {\n                    return path + ":" + exportName;\n                }\n            } else if (prop === Symbol.toStringTag) {\n                return "FunctionReference";\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nfunction filterApi(api) {\n    return api;\n}\nfunction justInternal(api) {\n    return api;\n}\nfunction justPublic(api) {\n    return api;\n}\nfunction justQueries(api) {\n    return api;\n}\nfunction justMutations(api) {\n    return api;\n}\nfunction justActions(api) {\n    return api;\n}\nfunction justPaginatedQueries(api) {\n    return api;\n}\nfunction justSchedulable(api) {\n    return api;\n}\nconst anyApi = createApi(); //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2FwaS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQWE7QUFDb0M7QUFDVTtBQUNwRCxTQUFTRSxnQkFBZ0JDLGlCQUFpQjtJQUMvQyxNQUFNQyxVQUFVSCx3RUFBa0JBLENBQUNFO0lBQ25DLElBQUlDLFFBQVFDLElBQUksS0FBSyxLQUFLLEdBQUc7UUFDM0IsSUFBSUQsUUFBUUUsY0FBYyxLQUFLLEtBQUssR0FBRztZQUNyQyxNQUFNLElBQUlDLE1BQ1IsQ0FBQyx1R0FBdUcsRUFBRUgsUUFBUUUsY0FBYyxDQUFDLENBQUM7UUFFdEksT0FBTyxJQUFJRixRQUFRSSxTQUFTLEtBQUssS0FBSyxHQUFHO1lBQ3ZDLE1BQU0sSUFBSUQsTUFDUixDQUFDLDBIQUEwSCxFQUFFSCxRQUFRSSxTQUFTLENBQUMsQ0FBQztRQUVwSjtRQUNBLE1BQU0sSUFBSUQsTUFDUixDQUFDLHVGQUF1RixFQUFFRSxLQUFLQyxTQUFTLENBQUNOLFNBQVMsQ0FBQztJQUV2SDtJQUNBLElBQUksT0FBT0Qsc0JBQXNCLFVBQVUsT0FBT0E7SUFDbEQsTUFBTUUsT0FBT0YsaUJBQWlCLENBQUNILDBEQUFZQSxDQUFDO0lBQzVDLElBQUksQ0FBQ0ssTUFBTTtRQUNULE1BQU0sSUFBSUUsTUFBTSxDQUFDLEVBQUVKLGtCQUFrQiwyQkFBMkIsQ0FBQztJQUNuRTtJQUNBLE9BQU9FO0FBQ1Q7QUFDTyxTQUFTTSxzQkFBc0JOLElBQUk7SUFDeEMsT0FBTztRQUFFLENBQUNMLDBEQUFZQSxDQUFDLEVBQUVLO0lBQUs7QUFDaEM7QUFDQSxTQUFTTyxVQUFVQyxZQUFZLEVBQUU7SUFDL0IsTUFBTUMsVUFBVTtRQUNkQyxLQUFJQyxDQUFDLEVBQUVDLElBQUk7WUFDVCxJQUFJLE9BQU9BLFNBQVMsVUFBVTtnQkFDNUIsTUFBTUMsV0FBVzt1QkFBSUw7b0JBQVdJO2lCQUFLO2dCQUNyQyxPQUFPTCxVQUFVTTtZQUNuQixPQUFPLElBQUlELFNBQVNqQiwwREFBWUEsRUFBRTtnQkFDaEMsSUFBSWEsVUFBVU0sTUFBTSxHQUFHLEdBQUc7b0JBQ3hCLE1BQU1DLFFBQVE7d0JBQUM7MkJBQVVQO3FCQUFVLENBQUNRLElBQUksQ0FBQztvQkFDekMsTUFBTSxJQUFJZCxNQUNSLENBQUMsaUZBQWlGLEVBQUVhLE1BQU0sRUFBRSxDQUFDO2dCQUVqRztnQkFDQSxNQUFNRSxPQUFPVCxVQUFVVSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUdGLElBQUksQ0FBQztnQkFDekMsTUFBTUcsYUFBYVgsU0FBUyxDQUFDQSxVQUFVTSxNQUFNLEdBQUcsRUFBRTtnQkFDbEQsSUFBSUssZUFBZSxXQUFXO29CQUM1QixPQUFPRjtnQkFDVCxPQUFPO29CQUNMLE9BQU9BLE9BQU8sTUFBTUU7Z0JBQ3RCO1lBQ0YsT0FBTyxJQUFJUCxTQUFTUSxPQUFPQyxXQUFXLEVBQUU7Z0JBQ3RDLE9BQU87WUFDVCxPQUFPO2dCQUNMLE9BQU8sS0FBSztZQUNkO1FBQ0Y7SUFDRjtJQUNBLE9BQU8sSUFBSUMsTUFBTSxDQUFDLEdBQUdiO0FBQ3ZCO0FBQ08sU0FBU2MsVUFBVUMsR0FBRztJQUMzQixPQUFPQTtBQUNUO0FBQ08sU0FBU0MsYUFBYUQsR0FBRztJQUM5QixPQUFPQTtBQUNUO0FBQ08sU0FBU0UsV0FBV0YsR0FBRztJQUM1QixPQUFPQTtBQUNUO0FBQ08sU0FBU0csWUFBWUgsR0FBRztJQUM3QixPQUFPQTtBQUNUO0FBQ08sU0FBU0ksY0FBY0osR0FBRztJQUMvQixPQUFPQTtBQUNUO0FBQ08sU0FBU0ssWUFBWUwsR0FBRztJQUM3QixPQUFPQTtBQUNUO0FBQ08sU0FBU00scUJBQXFCTixHQUFHO0lBQ3RDLE9BQU9BO0FBQ1Q7QUFDTyxTQUFTTyxnQkFBZ0JQLEdBQUc7SUFDakMsT0FBT0E7QUFDVDtBQUNPLE1BQU1RLFNBQVN6QixZQUFZLENBQ2xDLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9hcGkuanM/ZjIyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGZ1bmN0aW9uTmFtZSB9IGZyb20gXCIuL2Z1bmN0aW9uTmFtZS5qc1wiO1xuaW1wb3J0IHsgZ2V0RnVuY3Rpb25BZGRyZXNzIH0gZnJvbSBcIi4vY29tcG9uZW50cy9wYXRocy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZShmdW5jdGlvblJlZmVyZW5jZSkge1xuICBjb25zdCBhZGRyZXNzID0gZ2V0RnVuY3Rpb25BZGRyZXNzKGZ1bmN0aW9uUmVmZXJlbmNlKTtcbiAgaWYgKGFkZHJlc3MubmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgaWYgKGFkZHJlc3MuZnVuY3Rpb25IYW5kbGUgIT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGxpa2UgXCJhcGkuZmlsZS5mdW5jXCIgb3IgXCJpbnRlcm5hbC5maWxlLmZ1bmNcIiwgYnV0IHJlY2VpdmVkIGZ1bmN0aW9uIGhhbmRsZSAke2FkZHJlc3MuZnVuY3Rpb25IYW5kbGV9YFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGFkZHJlc3MucmVmZXJlbmNlICE9PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIGZ1bmN0aW9uIHJlZmVyZW5jZSBpbiB0aGUgY3VycmVudCBjb21wb25lbnQgbGlrZSBcImFwaS5maWxlLmZ1bmNcIiBvciBcImludGVybmFsLmZpbGUuZnVuY1wiLCBidXQgcmVjZWl2ZWQgcmVmZXJlbmNlICR7YWRkcmVzcy5yZWZlcmVuY2V9YFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkIGZ1bmN0aW9uIHJlZmVyZW5jZSBsaWtlIFwiYXBpLmZpbGUuZnVuY1wiIG9yIFwiaW50ZXJuYWwuZmlsZS5mdW5jXCIsIGJ1dCByZWNlaXZlZCAke0pTT04uc3RyaW5naWZ5KGFkZHJlc3MpfWBcbiAgICApO1xuICB9XG4gIGlmICh0eXBlb2YgZnVuY3Rpb25SZWZlcmVuY2UgPT09IFwic3RyaW5nXCIpIHJldHVybiBmdW5jdGlvblJlZmVyZW5jZTtcbiAgY29uc3QgbmFtZSA9IGZ1bmN0aW9uUmVmZXJlbmNlW2Z1bmN0aW9uTmFtZV07XG4gIGlmICghbmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtmdW5jdGlvblJlZmVyZW5jZX0gaXMgbm90IGEgZnVuY3Rpb25SZWZlcmVuY2VgKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRnVuY3Rpb25SZWZlcmVuY2UobmFtZSkge1xuICByZXR1cm4geyBbZnVuY3Rpb25OYW1lXTogbmFtZSB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQXBpKHBhdGhQYXJ0cyA9IFtdKSB7XG4gIGNvbnN0IGhhbmRsZXIgPSB7XG4gICAgZ2V0KF8sIHByb3ApIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBuZXdQYXJ0cyA9IFsuLi5wYXRoUGFydHMsIHByb3BdO1xuICAgICAgICByZXR1cm4gY3JlYXRlQXBpKG5ld1BhcnRzKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gZnVuY3Rpb25OYW1lKSB7XG4gICAgICAgIGlmIChwYXRoUGFydHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgIGNvbnN0IGZvdW5kID0gW1wiYXBpXCIsIC4uLnBhdGhQYXJ0c10uam9pbihcIi5cIik7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYEFQSSBwYXRoIGlzIGV4cGVjdGVkIHRvIGJlIG9mIHRoZSBmb3JtIFxcYGFwaS5tb2R1bGVOYW1lLmZ1bmN0aW9uTmFtZVxcYC4gRm91bmQ6IFxcYCR7Zm91bmR9XFxgYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aCA9IHBhdGhQYXJ0cy5zbGljZSgwLCAtMSkuam9pbihcIi9cIik7XG4gICAgICAgIGNvbnN0IGV4cG9ydE5hbWUgPSBwYXRoUGFydHNbcGF0aFBhcnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoZXhwb3J0TmFtZSA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGF0aCArIFwiOlwiICsgZXhwb3J0TmFtZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwcm9wID09PSBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiAgICAgICAgcmV0dXJuIFwiRnVuY3Rpb25SZWZlcmVuY2VcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gbmV3IFByb3h5KHt9LCBoYW5kbGVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJBcGkoYXBpKSB7XG4gIHJldHVybiBhcGk7XG59XG5leHBvcnQgZnVuY3Rpb24ganVzdEludGVybmFsKGFwaSkge1xuICByZXR1cm4gYXBpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGp1c3RQdWJsaWMoYXBpKSB7XG4gIHJldHVybiBhcGk7XG59XG5leHBvcnQgZnVuY3Rpb24ganVzdFF1ZXJpZXMoYXBpKSB7XG4gIHJldHVybiBhcGk7XG59XG5leHBvcnQgZnVuY3Rpb24ganVzdE11dGF0aW9ucyhhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqdXN0QWN0aW9ucyhhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqdXN0UGFnaW5hdGVkUXVlcmllcyhhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqdXN0U2NoZWR1bGFibGUoYXBpKSB7XG4gIHJldHVybiBhcGk7XG59XG5leHBvcnQgY29uc3QgYW55QXBpID0gY3JlYXRlQXBpKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwXG4iXSwibmFtZXMiOlsiZnVuY3Rpb25OYW1lIiwiZ2V0RnVuY3Rpb25BZGRyZXNzIiwiZ2V0RnVuY3Rpb25OYW1lIiwiZnVuY3Rpb25SZWZlcmVuY2UiLCJhZGRyZXNzIiwibmFtZSIsImZ1bmN0aW9uSGFuZGxlIiwiRXJyb3IiLCJyZWZlcmVuY2UiLCJKU09OIiwic3RyaW5naWZ5IiwibWFrZUZ1bmN0aW9uUmVmZXJlbmNlIiwiY3JlYXRlQXBpIiwicGF0aFBhcnRzIiwiaGFuZGxlciIsImdldCIsIl8iLCJwcm9wIiwibmV3UGFydHMiLCJsZW5ndGgiLCJmb3VuZCIsImpvaW4iLCJwYXRoIiwic2xpY2UiLCJleHBvcnROYW1lIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJQcm94eSIsImZpbHRlckFwaSIsImFwaSIsImp1c3RJbnRlcm5hbCIsImp1c3RQdWJsaWMiLCJqdXN0UXVlcmllcyIsImp1c3RNdXRhdGlvbnMiLCJqdXN0QWN0aW9ucyIsImp1c3RQYWdpbmF0ZWRRdWVyaWVzIiwianVzdFNjaGVkdWxhYmxlIiwiYW55QXBpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/index.js':
    /*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/index.js ***!
  \*******************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   componentsGeneric: () => (/* binding */ componentsGeneric),\n/* harmony export */   createFunctionHandle: () => (/* binding */ createFunctionHandle),\n/* harmony export */   currentSystemUdfInComponent: () => (/* binding */ currentSystemUdfInComponent),\n/* harmony export */   defineApp: () => (/* binding */ defineApp),\n/* harmony export */   defineComponent: () => (/* binding */ defineComponent),\n/* harmony export */   getFunctionAddress: () => (/* reexport safe */ _paths_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionAddress)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js");\n/* harmony import */ var _impl_syscall_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../impl/syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n/* harmony import */ var _paths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./paths.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/paths.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\n\n\nasync function createFunctionHandle(functionReference) {\n    const address = (0,_paths_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionAddress)(functionReference);\n    return await (0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/createFunctionHandle", {\n        ...address,\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version\n    });\n}\nclass InstalledComponent {\n    constructor(definition, name){\n        /**\n     * @internal\n     */ __publicField(this, "_definition");\n        /**\n     * @internal\n     */ __publicField(this, "_name");\n        this._definition = definition;\n        this._name = name;\n        (0,_paths_js__WEBPACK_IMPORTED_MODULE_3__.setReferencePath)(this, `_reference/childComponent/${name}`);\n    }\n    get exports() {\n        return createExports(this._name, []);\n    }\n}\nfunction createExports(name, pathParts) {\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === "string") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createExports(name, newParts);\n            } else if (prop === _paths_js__WEBPACK_IMPORTED_MODULE_3__.toReferencePath) {\n                let reference = `_reference/childComponent/${name}`;\n                for (const part of pathParts){\n                    reference += `/${part}`;\n                }\n                return reference;\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nfunction use(definition, options) {\n    const importedComponentDefinition = definition;\n    if (typeof importedComponentDefinition.componentDefinitionPath !== "string") {\n        throw new Error("Component definition does not have the required componentDefinitionPath property. This code only works in Convex runtime.");\n    }\n    const name = options?.name || // added recently\n    importedComponentDefinition.defaultName || // can be removed once backend is out\n    importedComponentDefinition.componentDefinitionPath.split("/").pop();\n    this._childComponents.push([\n        name,\n        importedComponentDefinition,\n        {}\n    ]);\n    return new InstalledComponent(definition, name);\n}\nfunction exportAppForAnalysis() {\n    const definitionType = {\n        type: "app"\n    };\n    const childComponents = serializeChildComponents(this._childComponents);\n    return {\n        definitionType,\n        childComponents,\n        httpMounts: {},\n        exports: serializeExportTree(this._exportTree)\n    };\n}\nfunction serializeExportTree(tree) {\n    const branch = [];\n    for (const [key, child] of Object.entries(tree)){\n        let node;\n        if (typeof child === "string") {\n            node = {\n                type: "leaf",\n                leaf: child\n            };\n        } else {\n            node = serializeExportTree(child);\n        }\n        branch.push([\n            key,\n            node\n        ]);\n    }\n    return {\n        type: "branch",\n        branch\n    };\n}\nfunction serializeChildComponents(childComponents) {\n    return childComponents.map(([name, definition, p])=>{\n        let args = null;\n        if (p !== null) {\n            args = [];\n            for (const [name2, value] of Object.entries(p)){\n                if (value !== void 0) {\n                    args.push([\n                        name2,\n                        {\n                            type: "value",\n                            value: JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value))\n                        }\n                    ]);\n                }\n            }\n        }\n        const path = definition.componentDefinitionPath;\n        if (!path) throw new Error("no .componentPath for component definition " + JSON.stringify(definition, null, 2));\n        return {\n            name,\n            path,\n            args\n        };\n    });\n}\nfunction exportComponentForAnalysis() {\n    const args = Object.entries(this._args).map(([name, validator])=>[\n            name,\n            {\n                type: "value",\n                value: JSON.stringify(validator.json)\n            }\n        ]);\n    const definitionType = {\n        type: "childComponent",\n        name: this._name,\n        args\n    };\n    const childComponents = serializeChildComponents(this._childComponents);\n    return {\n        name: this._name,\n        definitionType,\n        childComponents,\n        httpMounts: {},\n        exports: serializeExportTree(this._exportTree)\n    };\n}\nfunction defineComponent(name) {\n    const ret = {\n        _isRoot: false,\n        _name: name,\n        _args: {},\n        _childComponents: [],\n        _exportTree: {},\n        _onInitCallbacks: {},\n        export: exportComponentForAnalysis,\n        use,\n        // pretend to conform to ComponentDefinition, which temporarily expects __args\n        ...{}\n    };\n    return ret;\n}\nfunction defineApp() {\n    const ret = {\n        _isRoot: true,\n        _childComponents: [],\n        _exportTree: {},\n        export: exportAppForAnalysis,\n        use\n    };\n    return ret;\n}\nfunction currentSystemUdfInComponent(componentId) {\n    return {\n        [_paths_js__WEBPACK_IMPORTED_MODULE_3__.toReferencePath]: `_reference/currentSystemUdfInComponent/${componentId}`\n    };\n}\nfunction createChildComponents(root, pathParts) {\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === "string") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createChildComponents(root, newParts);\n            } else if (prop === _paths_js__WEBPACK_IMPORTED_MODULE_3__.toReferencePath) {\n                if (pathParts.length < 1) {\n                    const found = [\n                        root,\n                        ...pathParts\n                    ].join(".");\n                    throw new Error(`API path is expected to be of the form \\`${root}.childComponent.functionName\\`. Found: \\`${found}\\``);\n                }\n                return `_reference/childComponent/` + pathParts.join("/");\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nconst componentsGeneric = ()=>createChildComponents("components", []); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/index.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/paths.js':
    /*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/paths.js ***!
  \*******************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractReferencePath: () => (/* binding */ extractReferencePath),\n/* harmony export */   getFunctionAddress: () => (/* binding */ getFunctionAddress),\n/* harmony export */   isFunctionHandle: () => (/* binding */ isFunctionHandle),\n/* harmony export */   setReferencePath: () => (/* binding */ setReferencePath),\n/* harmony export */   toReferencePath: () => (/* binding */ toReferencePath)\n/* harmony export */ });\n/* harmony import */ var _functionName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functionName.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/functionName.js");\n\n\nconst toReferencePath = Symbol.for("toReferencePath");\nfunction setReferencePath(obj, value) {\n    obj[toReferencePath] = value;\n}\nfunction extractReferencePath(reference) {\n    return reference[toReferencePath] ?? null;\n}\nfunction isFunctionHandle(s) {\n    return s.startsWith("function://");\n}\nfunction getFunctionAddress(functionReference) {\n    let functionAddress;\n    if (typeof functionReference === "string") {\n        if (isFunctionHandle(functionReference)) {\n            functionAddress = {\n                functionHandle: functionReference\n            };\n        } else {\n            functionAddress = {\n                name: functionReference\n            };\n        }\n    } else if (functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]) {\n        functionAddress = {\n            name: functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]\n        };\n    } else {\n        const referencePath = extractReferencePath(functionReference);\n        if (!referencePath) {\n            throw new Error(`${functionReference} is not a functionReference`);\n        }\n        functionAddress = {\n            reference: referencePath\n        };\n    }\n    return functionAddress;\n} //# sourceMappingURL=paths.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2NvbXBvbmVudHMvcGF0aHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWE7QUFDcUM7QUFDM0MsTUFBTUMsa0JBQWtCQyxPQUFPQyxHQUFHLENBQUMsbUJBQW1CO0FBQ3RELFNBQVNDLGlCQUFpQkMsR0FBRyxFQUFFQyxLQUFLO0lBQ3pDRCxHQUFHLENBQUNKLGdCQUFnQixHQUFHSztBQUN6QjtBQUNPLFNBQVNDLHFCQUFxQkMsU0FBUztJQUM1QyxPQUFPQSxTQUFTLENBQUNQLGdCQUFnQixJQUFJO0FBQ3ZDO0FBQ08sU0FBU1EsaUJBQWlCQyxDQUFDO0lBQ2hDLE9BQU9BLEVBQUVDLFVBQVUsQ0FBQztBQUN0QjtBQUNPLFNBQVNDLG1CQUFtQkMsaUJBQWlCO0lBQ2xELElBQUlDO0lBQ0osSUFBSSxPQUFPRCxzQkFBc0IsVUFBVTtRQUN6QyxJQUFJSixpQkFBaUJJLG9CQUFvQjtZQUN2Q0Msa0JBQWtCO2dCQUFFQyxnQkFBZ0JGO1lBQWtCO1FBQ3hELE9BQU87WUFDTEMsa0JBQWtCO2dCQUFFRSxNQUFNSDtZQUFrQjtRQUM5QztJQUNGLE9BQU8sSUFBSUEsaUJBQWlCLENBQUNiLDBEQUFZQSxDQUFDLEVBQUU7UUFDMUNjLGtCQUFrQjtZQUFFRSxNQUFNSCxpQkFBaUIsQ0FBQ2IsMERBQVlBLENBQUM7UUFBQztJQUM1RCxPQUFPO1FBQ0wsTUFBTWlCLGdCQUFnQlYscUJBQXFCTTtRQUMzQyxJQUFJLENBQUNJLGVBQWU7WUFDbEIsTUFBTSxJQUFJQyxNQUFNLENBQUMsRUFBRUwsa0JBQWtCLDJCQUEyQixDQUFDO1FBQ25FO1FBQ0FDLGtCQUFrQjtZQUFFTixXQUFXUztRQUFjO0lBQy9DO0lBQ0EsT0FBT0g7QUFDVCxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9jb21wb25lbnRzL3BhdGhzLmpzP2NjMWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBmdW5jdGlvbk5hbWUgfSBmcm9tIFwiLi4vZnVuY3Rpb25OYW1lLmpzXCI7XG5leHBvcnQgY29uc3QgdG9SZWZlcmVuY2VQYXRoID0gU3ltYm9sLmZvcihcInRvUmVmZXJlbmNlUGF0aFwiKTtcbmV4cG9ydCBmdW5jdGlvbiBzZXRSZWZlcmVuY2VQYXRoKG9iaiwgdmFsdWUpIHtcbiAgb2JqW3RvUmVmZXJlbmNlUGF0aF0gPSB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UmVmZXJlbmNlUGF0aChyZWZlcmVuY2UpIHtcbiAgcmV0dXJuIHJlZmVyZW5jZVt0b1JlZmVyZW5jZVBhdGhdID8/IG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbkhhbmRsZShzKSB7XG4gIHJldHVybiBzLnN0YXJ0c1dpdGgoXCJmdW5jdGlvbjovL1wiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvbkFkZHJlc3MoZnVuY3Rpb25SZWZlcmVuY2UpIHtcbiAgbGV0IGZ1bmN0aW9uQWRkcmVzcztcbiAgaWYgKHR5cGVvZiBmdW5jdGlvblJlZmVyZW5jZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChpc0Z1bmN0aW9uSGFuZGxlKGZ1bmN0aW9uUmVmZXJlbmNlKSkge1xuICAgICAgZnVuY3Rpb25BZGRyZXNzID0geyBmdW5jdGlvbkhhbmRsZTogZnVuY3Rpb25SZWZlcmVuY2UgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVuY3Rpb25BZGRyZXNzID0geyBuYW1lOiBmdW5jdGlvblJlZmVyZW5jZSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChmdW5jdGlvblJlZmVyZW5jZVtmdW5jdGlvbk5hbWVdKSB7XG4gICAgZnVuY3Rpb25BZGRyZXNzID0geyBuYW1lOiBmdW5jdGlvblJlZmVyZW5jZVtmdW5jdGlvbk5hbWVdIH07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmVmZXJlbmNlUGF0aCA9IGV4dHJhY3RSZWZlcmVuY2VQYXRoKGZ1bmN0aW9uUmVmZXJlbmNlKTtcbiAgICBpZiAoIXJlZmVyZW5jZVBhdGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtmdW5jdGlvblJlZmVyZW5jZX0gaXMgbm90IGEgZnVuY3Rpb25SZWZlcmVuY2VgKTtcbiAgICB9XG4gICAgZnVuY3Rpb25BZGRyZXNzID0geyByZWZlcmVuY2U6IHJlZmVyZW5jZVBhdGggfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb25BZGRyZXNzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0aHMuanMubWFwXG4iXSwibmFtZXMiOlsiZnVuY3Rpb25OYW1lIiwidG9SZWZlcmVuY2VQYXRoIiwiU3ltYm9sIiwiZm9yIiwic2V0UmVmZXJlbmNlUGF0aCIsIm9iaiIsInZhbHVlIiwiZXh0cmFjdFJlZmVyZW5jZVBhdGgiLCJyZWZlcmVuY2UiLCJpc0Z1bmN0aW9uSGFuZGxlIiwicyIsInN0YXJ0c1dpdGgiLCJnZXRGdW5jdGlvbkFkZHJlc3MiLCJmdW5jdGlvblJlZmVyZW5jZSIsImZ1bmN0aW9uQWRkcmVzcyIsImZ1bmN0aW9uSGFuZGxlIiwibmFtZSIsInJlZmVyZW5jZVBhdGgiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/paths.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/cron.js':
    /*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/cron.js ***!
  \*******************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Crons: () => (/* binding */ Crons),\n/* harmony export */   cronJobs: () => (/* binding */ cronJobs)\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/api.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\nconst DAYS_OF_WEEK = [\n    "sunday",\n    "monday",\n    "tuesday",\n    "wednesday",\n    "thursday",\n    "friday",\n    "saturday"\n];\nconst cronJobs = ()=>new Crons();\nfunction validateIntervalNumber(n) {\n    if (!Number.isInteger(n) || n <= 0) {\n        throw new Error("Interval must be an integer greater than 0");\n    }\n}\nfunction validatedDayOfMonth(n) {\n    if (!Number.isInteger(n) || n < 1 || n > 31) {\n        throw new Error("Day of month must be an integer from 1 to 31");\n    }\n    return n;\n}\nfunction validatedDayOfWeek(s) {\n    if (!DAYS_OF_WEEK.includes(s)) {\n        throw new Error(\'Day of week must be a string like "monday".\');\n    }\n    return s;\n}\nfunction validatedHourOfDay(n) {\n    if (!Number.isInteger(n) || n < 0 || n > 23) {\n        throw new Error("Hour of day must be an integer from 0 to 23");\n    }\n    return n;\n}\nfunction validatedMinuteOfHour(n) {\n    if (!Number.isInteger(n) || n < 0 || n > 59) {\n        throw new Error("Minute of hour must be an integer from 0 to 59");\n    }\n    return n;\n}\nfunction validatedCronString(s) {\n    return s;\n}\nfunction validatedCronIdentifier(s) {\n    if (!s.match(/^[ -~]*$/)) {\n        throw new Error(`Invalid cron identifier ${s}: use ASCII letters that are not control characters`);\n    }\n    return s;\n}\nclass Crons {\n    constructor(){\n        __publicField(this, "crons");\n        __publicField(this, "isCrons");\n        this.isCrons = true;\n        this.crons = {};\n    }\n    /** @internal */ schedule(cronIdentifier, schedule, functionReference, args) {\n        const cronArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args);\n        validatedCronIdentifier(cronIdentifier);\n        if (cronIdentifier in this.crons) {\n            throw new Error(`Cron identifier registered twice: ${cronIdentifier}`);\n        }\n        this.crons[cronIdentifier] = {\n            name: (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(functionReference),\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_2__.convexToJson)(cronArgs)\n            ],\n            schedule\n        };\n    }\n    /**\n   * Schedule a mutation or action to run at some interval.\n   *\n   * ```js\n   * crons.interval("Clear presence data", {seconds: 30}, api.presence.clear);\n   * ```\n   *\n   * @param identifier - A unique name for this scheduled job.\n   * @param schedule - The time between runs for this scheduled job.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ interval(cronIdentifier, schedule, functionReference, ...args) {\n        const s = schedule;\n        const hasSeconds = +("seconds" in s && s.seconds !== void 0);\n        const hasMinutes = +("minutes" in s && s.minutes !== void 0);\n        const hasHours = +("hours" in s && s.hours !== void 0);\n        const total = hasSeconds + hasMinutes + hasHours;\n        if (total !== 1) {\n            throw new Error("Must specify one of seconds, minutes, or hours");\n        }\n        if (hasSeconds) {\n            validateIntervalNumber(schedule.seconds);\n        } else if (hasMinutes) {\n            validateIntervalNumber(schedule.minutes);\n        } else if (hasHours) {\n            validateIntervalNumber(schedule.hours);\n        }\n        this.schedule(cronIdentifier, {\n            ...schedule,\n            type: "interval"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on an hourly basis.\n   *\n   * ```js\n   * crons.hourly(\n   *   "Reset high scores",\n   *   {\n   *     minuteUTC: 30,\n   *   },\n   *   api.scores.reset\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What time (UTC) each day to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ hourly(cronIdentifier, schedule, functionReference, ...args) {\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            minuteUTC,\n            type: "hourly"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a daily basis.\n   *\n   * ```js\n   * crons.daily(\n   *   "Reset high scores",\n   *   {\n   *     hourUTC: 17, // (9:30am Pacific/10:30am Daylight Savings Pacific)\n   *     minuteUTC: 30,\n   *   },\n   *   api.scores.reset\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What time (UTC) each day to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ daily(cronIdentifier, schedule, functionReference, ...args) {\n        const hourUTC = validatedHourOfDay(schedule.hourUTC);\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            hourUTC,\n            minuteUTC,\n            type: "daily"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a weekly basis.\n   *\n   * ```js\n   * crons.weekly(\n   *   "Weekly re-engagement email",\n   *   {\n   *     dayOfWeek: "Tuesday",\n   *     hourUTC: 17, // (9:30am Pacific/10:30am Daylight Savings Pacific)\n   *     minuteUTC: 30,\n   *   },\n   *   api.emails.send\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What day and time (UTC) each week to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   */ weekly(cronIdentifier, schedule, functionReference, ...args) {\n        const dayOfWeek = validatedDayOfWeek(schedule.dayOfWeek);\n        const hourUTC = validatedHourOfDay(schedule.hourUTC);\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            dayOfWeek,\n            hourUTC,\n            minuteUTC,\n            type: "weekly"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a monthly basis.\n   *\n   * Note that some months have fewer days than others, so e.g. a function\n   * scheduled to run on the 30th will not run in February.\n   *\n   * ```js\n   * crons.monthly(\n   *   "Bill customers at ",\n   *   {\n   *     hourUTC: 17, // (9:30am Pacific/10:30am Daylight Savings Pacific)\n   *     minuteUTC: 30,\n   *     day: 1,\n   *   },\n   *   api.billing.billCustomers\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What day and time (UTC) each month to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ monthly(cronIdentifier, schedule, functionReference, ...args) {\n        const day = validatedDayOfMonth(schedule.day);\n        const hourUTC = validatedHourOfDay(schedule.hourUTC);\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            day,\n            hourUTC,\n            minuteUTC,\n            type: "monthly"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a recurring basis.\n   *\n   * Like the unix command `cron`, Sunday is 0, Monday is 1, etc.\n   *\n   * ```\n   *  ┌─ minute (0 - 59)\n   *  │ ┌─ hour (0 - 23)\n   *  │ │ ┌─ day of the month (1 - 31)\n   *  │ │ │ ┌─ month (1 - 12)\n   *  │ │ │ │ ┌─ day of the week (0 - 6) (Sunday to Saturday)\n   * "* * * * *"\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param cron - Cron string like `"15 7 * * *"` (Every day at 7:15 UTC)\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ cron(cronIdentifier, cron, functionReference, ...args) {\n        const c = validatedCronString(cron);\n        this.schedule(cronIdentifier, {\n            cron: c,\n            type: "cron"\n        }, functionReference, ...args);\n    }\n    /** @internal */ export() {\n        return JSON.stringify(this.crons);\n    }\n} //# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/cron.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/database.js':
    /*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/database.js ***!
  \***********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=database.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2RhdGFiYXNlLmpzIiwibWFwcGluZ3MiOiI7QUFBYSxDQUNiLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9kYXRhYmFzZS5qcz9hYzRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YWJhc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/database.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/filter_builder.js':
    /*!*****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/filter_builder.js ***!
  \*****************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expression: () => (/* binding */ Expression)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\nclass Expression {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, "_isExpression");\n        // Property to distinguish expressions by the type they resolve to.\n        __publicField(this, "_value");\n    }\n} //# sourceMappingURL=filter_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ZpbHRlcl9idWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDakcsTUFBTUs7SUFDWDs7R0FFQyxHQUNEQyxhQUFjO1FBQ1oscUNBQXFDO1FBQ3JDRixjQUFjLElBQUksRUFBRTtRQUNwQixtRUFBbUU7UUFDbkVBLGNBQWMsSUFBSSxFQUFFO0lBQ3RCO0FBQ0YsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvZmlsdGVyX2J1aWxkZXIuanM/MDVmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvbiB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIFByb3BlcnR5IGZvciBub21pbmFsIHR5cGUgc3VwcG9ydC5cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX2lzRXhwcmVzc2lvblwiKTtcbiAgICAvLyBQcm9wZXJ0eSB0byBkaXN0aW5ndWlzaCBleHByZXNzaW9ucyBieSB0aGUgdHlwZSB0aGV5IHJlc29sdmUgdG8uXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl92YWx1ZVwiKTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyX2J1aWxkZXIuanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJFeHByZXNzaW9uIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/filter_builder.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/functionName.js':
    /*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/functionName.js ***!
  \***************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   functionName: () => (/* binding */ functionName)\n/* harmony export */ });\n\nconst functionName = Symbol.for("functionName"); //# sourceMappingURL=functionName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2Z1bmN0aW9uTmFtZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDTixNQUFNQSxlQUFlQyxPQUFPQyxHQUFHLENBQUMsZ0JBQWdCLENBQ3ZELHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9mdW5jdGlvbk5hbWUuanM/NDFhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydCBjb25zdCBmdW5jdGlvbk5hbWUgPSBTeW1ib2wuZm9yKFwiZnVuY3Rpb25OYW1lXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVuY3Rpb25OYW1lLmpzLm1hcFxuIl0sIm5hbWVzIjpbImZ1bmN0aW9uTmFtZSIsIlN5bWJvbCIsImZvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/functionName.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/actions_impl.js':
    /*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/actions_impl.js ***!
  \********************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupActionCalls: () => (/* binding */ setupActionCalls)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/paths.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/paths.js");\n\n\n\n\n\n\nfunction syscallArgs(requestId, functionReference, args) {\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_4__.getFunctionAddress)(functionReference);\n    return {\n        ...address,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)((0,_common_index_js__WEBPACK_IMPORTED_MODULE_3__.parseArgs)(args)),\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version,\n        requestId\n    };\n}\nfunction setupActionCalls(requestId) {\n    return {\n        runQuery: async (query, args)=>{\n            const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/actions/query", syscallArgs(requestId, query, args));\n            return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n        },\n        runMutation: async (mutation, args)=>{\n            const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/actions/mutation", syscallArgs(requestId, mutation, args));\n            return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n        },\n        runAction: async (action, args)=>{\n            const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/actions/action", syscallArgs(requestId, action, args));\n            return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n        }\n    };\n} //# sourceMappingURL=actions_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvYWN0aW9uc19pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFhO0FBQ3NEO0FBQzFCO0FBQ1U7QUFDRDtBQUNVO0FBQzVELFNBQVNNLFlBQVlDLFNBQVMsRUFBRUMsaUJBQWlCLEVBQUVDLElBQUk7SUFDckQsTUFBTUMsVUFBVUwsd0VBQWtCQSxDQUFDRztJQUNuQyxPQUFPO1FBQ0wsR0FBR0UsT0FBTztRQUNWRCxNQUFNVCw4REFBWUEsQ0FBQ0ksMkRBQVNBLENBQUNLO1FBQzdCUCxPQUFPQSxnREFBQUE7UUFDUEs7SUFDRjtBQUNGO0FBQ08sU0FBU0ksaUJBQWlCSixTQUFTO0lBQ3hDLE9BQU87UUFDTEssVUFBVSxPQUFPQyxPQUFPSjtZQUN0QixNQUFNSyxTQUFTLE1BQU1YLGdFQUFtQkEsQ0FDdEMscUJBQ0FHLFlBQVlDLFdBQVdNLE9BQU9KO1lBRWhDLE9BQU9SLDhEQUFZQSxDQUFDYTtRQUN0QjtRQUNBQyxhQUFhLE9BQU9DLFVBQVVQO1lBQzVCLE1BQU1LLFNBQVMsTUFBTVgsZ0VBQW1CQSxDQUN0Qyx3QkFDQUcsWUFBWUMsV0FBV1MsVUFBVVA7WUFFbkMsT0FBT1IsOERBQVlBLENBQUNhO1FBQ3RCO1FBQ0FHLFdBQVcsT0FBT0MsUUFBUVQ7WUFDeEIsTUFBTUssU0FBUyxNQUFNWCxnRUFBbUJBLENBQ3RDLHNCQUNBRyxZQUFZQyxXQUFXVyxRQUFRVDtZQUVqQyxPQUFPUiw4REFBWUEsQ0FBQ2E7UUFDdEI7SUFDRjtBQUNGLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvYWN0aW9uc19pbXBsLmpzPzZkYTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBjb252ZXhUb0pzb24sIGpzb25Ub0NvbnZleCB9IGZyb20gXCIuLi8uLi92YWx1ZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IHBlcmZvcm1Bc3luY1N5c2NhbGwgfSBmcm9tIFwiLi9zeXNjYWxsLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUFyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRGdW5jdGlvbkFkZHJlc3MgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9wYXRocy5qc1wiO1xuZnVuY3Rpb24gc3lzY2FsbEFyZ3MocmVxdWVzdElkLCBmdW5jdGlvblJlZmVyZW5jZSwgYXJncykge1xuICBjb25zdCBhZGRyZXNzID0gZ2V0RnVuY3Rpb25BZGRyZXNzKGZ1bmN0aW9uUmVmZXJlbmNlKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5hZGRyZXNzLFxuICAgIGFyZ3M6IGNvbnZleFRvSnNvbihwYXJzZUFyZ3MoYXJncykpLFxuICAgIHZlcnNpb24sXG4gICAgcmVxdWVzdElkXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0dXBBY3Rpb25DYWxscyhyZXF1ZXN0SWQpIHtcbiAgcmV0dXJuIHtcbiAgICBydW5RdWVyeTogYXN5bmMgKHF1ZXJ5LCBhcmdzKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFxuICAgICAgICBcIjEuMC9hY3Rpb25zL3F1ZXJ5XCIsXG4gICAgICAgIHN5c2NhbGxBcmdzKHJlcXVlc3RJZCwgcXVlcnksIGFyZ3MpXG4gICAgICApO1xuICAgICAgcmV0dXJuIGpzb25Ub0NvbnZleChyZXN1bHQpO1xuICAgIH0sXG4gICAgcnVuTXV0YXRpb246IGFzeW5jIChtdXRhdGlvbiwgYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcbiAgICAgICAgXCIxLjAvYWN0aW9ucy9tdXRhdGlvblwiLFxuICAgICAgICBzeXNjYWxsQXJncyhyZXF1ZXN0SWQsIG11dGF0aW9uLCBhcmdzKVxuICAgICAgKTtcbiAgICAgIHJldHVybiBqc29uVG9Db252ZXgocmVzdWx0KTtcbiAgICB9LFxuICAgIHJ1bkFjdGlvbjogYXN5bmMgKGFjdGlvbiwgYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcbiAgICAgICAgXCIxLjAvYWN0aW9ucy9hY3Rpb25cIixcbiAgICAgICAgc3lzY2FsbEFyZ3MocmVxdWVzdElkLCBhY3Rpb24sIGFyZ3MpXG4gICAgICApO1xuICAgICAgcmV0dXJuIGpzb25Ub0NvbnZleChyZXN1bHQpO1xuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGlvbnNfaW1wbC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjb252ZXhUb0pzb24iLCJqc29uVG9Db252ZXgiLCJ2ZXJzaW9uIiwicGVyZm9ybUFzeW5jU3lzY2FsbCIsInBhcnNlQXJncyIsImdldEZ1bmN0aW9uQWRkcmVzcyIsInN5c2NhbGxBcmdzIiwicmVxdWVzdElkIiwiZnVuY3Rpb25SZWZlcmVuY2UiLCJhcmdzIiwiYWRkcmVzcyIsInNldHVwQWN0aW9uQ2FsbHMiLCJydW5RdWVyeSIsInF1ZXJ5IiwicmVzdWx0IiwicnVuTXV0YXRpb24iLCJtdXRhdGlvbiIsInJ1bkFjdGlvbiIsImFjdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/actions_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/authentication_impl.js':
    /*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/authentication_impl.js ***!
  \***************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupAuth: () => (/* binding */ setupAuth)\n/* harmony export */ });\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n\n\nfunction setupAuth(requestId) {\n    return {\n        getUserIdentity: async ()=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performAsyncSyscall)("1.0/getUserIdentity", {\n                requestId\n            });\n        }\n    };\n} //# sourceMappingURL=authentication_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvYXV0aGVudGljYXRpb25faW1wbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFhO0FBQ3NDO0FBQzVDLFNBQVNDLFVBQVVDLFNBQVM7SUFDakMsT0FBTztRQUNMQyxpQkFBaUI7WUFDZixPQUFPLE1BQU1ILGdFQUFtQkEsQ0FBQyx1QkFBdUI7Z0JBQ3RERTtZQUNGO1FBQ0Y7SUFDRjtBQUNGLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvYXV0aGVudGljYXRpb25faW1wbC5qcz9iZjZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgcGVyZm9ybUFzeW5jU3lzY2FsbCB9IGZyb20gXCIuL3N5c2NhbGwuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEF1dGgocmVxdWVzdElkKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0VXNlcklkZW50aXR5OiBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9nZXRVc2VySWRlbnRpdHlcIiwge1xuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhlbnRpY2F0aW9uX2ltcGwuanMubWFwXG4iXSwibmFtZXMiOlsicGVyZm9ybUFzeW5jU3lzY2FsbCIsInNldHVwQXV0aCIsInJlcXVlc3RJZCIsImdldFVzZXJJZGVudGl0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/authentication_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/database_impl.js':
    /*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/database_impl.js ***!
  \*********************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupReader: () => (/* binding */ setupReader),\n/* harmony export */   setupWriter: () => (/* binding */ setupWriter)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n/* harmony import */ var _query_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/query_impl.js");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validate.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/validate.js");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../values/value.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js");\n\n\n\n\n\n\n\nasync function get(table, id, isSystem) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, "get", "id");\n    if (typeof id !== "string") {\n        throw new Error(`Invalid argument \\`id\\` for \\`db.get\\`, expected string but got \'${typeof id}\': ${id}`);\n    }\n    const args = {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        isSystem,\n        version: _index_js__WEBPACK_IMPORTED_MODULE_4__.version,\n        table\n    };\n    const syscallJSON = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/get", args);\n    return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n}\nfunction setupReader() {\n    const reader = (isSystem = false)=>{\n        return {\n            get: async (arg0, arg1)=>{\n                return arg1 !== void 0 ? await get(arg0, arg1, isSystem) : await get(void 0, arg0, isSystem);\n            },\n            query: (tableName)=>{\n                return new TableReader(tableName, isSystem).query();\n            },\n            normalizeId: (tableName, id)=>{\n                (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(tableName, 1, "normalizeId", "tableName");\n                (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 2, "normalizeId", "id");\n                const accessingSystemTable = tableName.startsWith("_");\n                if (accessingSystemTable !== isSystem) {\n                    throw new Error(`${accessingSystemTable ? "System" : "User"} tables can only be accessed from db.${isSystem ? "" : "system."}normalizeId().`);\n                }\n                const syscallJSON = (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performSyscall)("1.0/db/normalizeId", {\n                    table: tableName,\n                    idString: id\n                });\n                const syscallResult = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n                return syscallResult.id;\n            },\n            // We set the system reader on the next line\n            system: null,\n            table: (tableName)=>{\n                return new TableReader(tableName, isSystem);\n            }\n        };\n    };\n    const { system: _, ...rest } = reader(true);\n    const r = reader();\n    r.system = rest;\n    return r;\n}\nasync function insert(tableName, value) {\n    if (tableName.startsWith("_")) {\n        throw new Error("System tables (prefixed with `_`) are read-only.");\n    }\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(tableName, 1, "insert", "table");\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(value, 2, "insert", "value");\n    const syscallJSON = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/insert", {\n        table: tableName,\n        value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n    });\n    const syscallResult = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n    return syscallResult._id;\n}\nasync function patch(table, id, value) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, "patch", "id");\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(value, 2, "patch", "value");\n    await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/shallowMerge", {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_5__.patchValueToJson)(value),\n        table\n    });\n}\nasync function replace(table, id, value) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, "replace", "id");\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(value, 2, "replace", "value");\n    await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/replace", {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value),\n        table\n    });\n}\nasync function delete_(table, id) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, "delete", "id");\n    await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/remove", {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        table\n    });\n}\nfunction setupWriter() {\n    const reader = setupReader();\n    return {\n        get: reader.get,\n        query: reader.query,\n        normalizeId: reader.normalizeId,\n        system: reader.system,\n        insert: async (table, value)=>{\n            return await insert(table, value);\n        },\n        patch: async (arg0, arg1, arg2)=>{\n            return arg2 !== void 0 ? await patch(arg0, arg1, arg2) : await patch(void 0, arg0, arg1);\n        },\n        replace: async (arg0, arg1, arg2)=>{\n            return arg2 !== void 0 ? await replace(arg0, arg1, arg2) : await replace(void 0, arg0, arg1);\n        },\n        delete: async (arg0, arg1)=>{\n            return arg1 !== void 0 ? await delete_(arg0, arg1) : await delete_(void 0, arg0);\n        },\n        table: (tableName)=>{\n            return new TableWriter(tableName, false);\n        }\n    };\n}\nclass TableReader {\n    constructor(tableName, isSystem){\n        this.tableName = tableName;\n        this.isSystem = isSystem;\n    }\n    async get(id) {\n        return get(this.tableName, id, this.isSystem);\n    }\n    query() {\n        const accessingSystemTable = this.tableName.startsWith("_");\n        if (accessingSystemTable !== this.isSystem) {\n            throw new Error(`${accessingSystemTable ? "System" : "User"} tables can only be accessed from db.${this.isSystem ? "" : "system."}query().`);\n        }\n        return new _query_impl_js__WEBPACK_IMPORTED_MODULE_2__.QueryInitializerImpl(this.tableName);\n    }\n}\nclass TableWriter extends TableReader {\n    async insert(value) {\n        return insert(this.tableName, value);\n    }\n    async patch(id, value) {\n        return patch(this.tableName, id, value);\n    }\n    async replace(id, value) {\n        return replace(this.tableName, id, value);\n    }\n    async delete(id) {\n        return delete_(this.tableName, id);\n    }\n} //# sourceMappingURL=database_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/database_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/filter_builder_impl.js':
    /*!***************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/filter_builder_impl.js ***!
  \***************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExpressionImpl: () => (/* binding */ ExpressionImpl),\n/* harmony export */   filterBuilderImpl: () => (/* binding */ filterBuilderImpl),\n/* harmony export */   serializeExpression: () => (/* binding */ serializeExpression)\n/* harmony export */ });\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/value.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js");\n/* harmony import */ var _filter_builder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../filter_builder.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/filter_builder.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\nclass ExpressionImpl extends _filter_builder_js__WEBPACK_IMPORTED_MODULE_1__.Expression {\n    constructor(inner){\n        super();\n        __publicField(this, "inner");\n        this.inner = inner;\n    }\n    serialize() {\n        return this.inner;\n    }\n}\nfunction serializeExpression(expr) {\n    if (expr instanceof ExpressionImpl) {\n        return expr.serialize();\n    } else {\n        return {\n            $literal: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(expr)\n        };\n    }\n}\nconst filterBuilderImpl = {\n    //  Comparisons  /////////////////////////////////////////////////////////////\n    eq (l, r) {\n        return new ExpressionImpl({\n            $eq: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    neq (l, r) {\n        return new ExpressionImpl({\n            $neq: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    lt (l, r) {\n        return new ExpressionImpl({\n            $lt: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    lte (l, r) {\n        return new ExpressionImpl({\n            $lte: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    gt (l, r) {\n        return new ExpressionImpl({\n            $gt: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    gte (l, r) {\n        return new ExpressionImpl({\n            $gte: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    //  Arithmetic  //////////////////////////////////////////////////////////////\n    add (l, r) {\n        return new ExpressionImpl({\n            $add: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    sub (l, r) {\n        return new ExpressionImpl({\n            $sub: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    mul (l, r) {\n        return new ExpressionImpl({\n            $mul: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    div (l, r) {\n        return new ExpressionImpl({\n            $div: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    mod (l, r) {\n        return new ExpressionImpl({\n            $mod: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    neg (x) {\n        return new ExpressionImpl({\n            $neg: serializeExpression(x)\n        });\n    },\n    //  Logic  ///////////////////////////////////////////////////////////////////\n    and (...exprs) {\n        return new ExpressionImpl({\n            $and: exprs.map(serializeExpression)\n        });\n    },\n    or (...exprs) {\n        return new ExpressionImpl({\n            $or: exprs.map(serializeExpression)\n        });\n    },\n    not (x) {\n        return new ExpressionImpl({\n            $not: serializeExpression(x)\n        });\n    },\n    //  Other  ///////////////////////////////////////////////////////////////////\n    field (fieldPath) {\n        return new ExpressionImpl({\n            $field: fieldPath\n        });\n    }\n}; //# sourceMappingURL=filter_builder_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/filter_builder_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js':
    /*!********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js ***!
  \********************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexRangeBuilderImpl: () => (/* binding */ IndexRangeBuilderImpl)\n/* harmony export */ });\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/value.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js");\n/* harmony import */ var _index_range_builder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index_range_builder.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/index_range_builder.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\nclass IndexRangeBuilderImpl extends _index_range_builder_js__WEBPACK_IMPORTED_MODULE_1__.IndexRange {\n    constructor(rangeExpressions){\n        super();\n        __publicField(this, "rangeExpressions");\n        __publicField(this, "isConsumed");\n        this.rangeExpressions = rangeExpressions;\n        this.isConsumed = false;\n    }\n    static new() {\n        return new IndexRangeBuilderImpl([]);\n    }\n    consume() {\n        if (this.isConsumed) {\n            throw new Error("IndexRangeBuilder has already been used! Chain your method calls like `q => q.eq(...).eq(...)`. See https://docs.convex.dev/using/indexes");\n        }\n        this.isConsumed = true;\n    }\n    eq(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: "Eq",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    gt(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: "Gt",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    gte(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: "Gte",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    lt(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: "Lt",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    lte(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: "Lte",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    export() {\n        this.consume();\n        return this.rangeExpressions;\n    }\n} //# sourceMappingURL=index_range_builder_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvaW5kZXhfcmFuZ2VfYnVpbGRlcl9pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFhO0FBQ2IsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0MsUUFBVUgsZ0JBQWdCQyxLQUFLLE9BQU9DLFFBQVEsV0FBV0EsTUFBTSxLQUFLQSxLQUFLQztBQUN4QztBQUc3QjtBQUM1QixNQUFNTyw4QkFBOEJELCtEQUFVQTtJQUNuREUsWUFBWUMsZ0JBQWdCLENBQUU7UUFDNUIsS0FBSztRQUNMTCxjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUU7UUFDcEIsSUFBSSxDQUFDSyxnQkFBZ0IsR0FBR0E7UUFDeEIsSUFBSSxDQUFDQyxVQUFVLEdBQUc7SUFDcEI7SUFDQSxPQUFPQyxNQUFNO1FBQ1gsT0FBTyxJQUFJSixzQkFBc0IsRUFBRTtJQUNyQztJQUNBSyxVQUFVO1FBQ1IsSUFBSSxJQUFJLENBQUNGLFVBQVUsRUFBRTtZQUNuQixNQUFNLElBQUlHLE1BQ1I7UUFFSjtRQUNBLElBQUksQ0FBQ0gsVUFBVSxHQUFHO0lBQ3BCO0lBQ0FJLEdBQUdDLFNBQVMsRUFBRWYsS0FBSyxFQUFFO1FBQ25CLElBQUksQ0FBQ1ksT0FBTztRQUNaLE9BQU8sSUFBSUwsc0JBQ1QsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ08sTUFBTSxDQUFDO1lBQzNCQyxNQUFNO1lBQ05DLFdBQVdIO1lBQ1hmLE9BQU9LLHlFQUF1QkEsQ0FBQ0w7UUFDakM7SUFFSjtJQUNBbUIsR0FBR0osU0FBUyxFQUFFZixLQUFLLEVBQUU7UUFDbkIsSUFBSSxDQUFDWSxPQUFPO1FBQ1osT0FBTyxJQUFJTCxzQkFDVCxJQUFJLENBQUNFLGdCQUFnQixDQUFDTyxNQUFNLENBQUM7WUFDM0JDLE1BQU07WUFDTkMsV0FBV0g7WUFDWGYsT0FBT0sseUVBQXVCQSxDQUFDTDtRQUNqQztJQUVKO0lBQ0FvQixJQUFJTCxTQUFTLEVBQUVmLEtBQUssRUFBRTtRQUNwQixJQUFJLENBQUNZLE9BQU87UUFDWixPQUFPLElBQUlMLHNCQUNULElBQUksQ0FBQ0UsZ0JBQWdCLENBQUNPLE1BQU0sQ0FBQztZQUMzQkMsTUFBTTtZQUNOQyxXQUFXSDtZQUNYZixPQUFPSyx5RUFBdUJBLENBQUNMO1FBQ2pDO0lBRUo7SUFDQXFCLEdBQUdOLFNBQVMsRUFBRWYsS0FBSyxFQUFFO1FBQ25CLElBQUksQ0FBQ1ksT0FBTztRQUNaLE9BQU8sSUFBSUwsc0JBQ1QsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ08sTUFBTSxDQUFDO1lBQzNCQyxNQUFNO1lBQ05DLFdBQVdIO1lBQ1hmLE9BQU9LLHlFQUF1QkEsQ0FBQ0w7UUFDakM7SUFFSjtJQUNBc0IsSUFBSVAsU0FBUyxFQUFFZixLQUFLLEVBQUU7UUFDcEIsSUFBSSxDQUFDWSxPQUFPO1FBQ1osT0FBTyxJQUFJTCxzQkFDVCxJQUFJLENBQUNFLGdCQUFnQixDQUFDTyxNQUFNLENBQUM7WUFDM0JDLE1BQU07WUFDTkMsV0FBV0g7WUFDWGYsT0FBT0sseUVBQXVCQSxDQUFDTDtRQUNqQztJQUVKO0lBQ0F1QixTQUFTO1FBQ1AsSUFBSSxDQUFDWCxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUNILGdCQUFnQjtJQUM5QjtBQUNGLEVBQ0Esb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvaW5kZXhfcmFuZ2VfYnVpbGRlcl9pbXBsLmpzP2NhMTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuaW1wb3J0IHsgY29udmV4T3JVbmRlZmluZWRUb0pzb24gfSBmcm9tIFwiLi4vLi4vdmFsdWVzL3ZhbHVlLmpzXCI7XG5pbXBvcnQge1xuICBJbmRleFJhbmdlXG59IGZyb20gXCIuLi9pbmRleF9yYW5nZV9idWlsZGVyLmpzXCI7XG5leHBvcnQgY2xhc3MgSW5kZXhSYW5nZUJ1aWxkZXJJbXBsIGV4dGVuZHMgSW5kZXhSYW5nZSB7XG4gIGNvbnN0cnVjdG9yKHJhbmdlRXhwcmVzc2lvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyYW5nZUV4cHJlc3Npb25zXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpc0NvbnN1bWVkXCIpO1xuICAgIHRoaXMucmFuZ2VFeHByZXNzaW9ucyA9IHJhbmdlRXhwcmVzc2lvbnM7XG4gICAgdGhpcy5pc0NvbnN1bWVkID0gZmFsc2U7XG4gIH1cbiAgc3RhdGljIG5ldygpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4UmFuZ2VCdWlsZGVySW1wbChbXSk7XG4gIH1cbiAgY29uc3VtZSgpIHtcbiAgICBpZiAodGhpcy5pc0NvbnN1bWVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiSW5kZXhSYW5nZUJ1aWxkZXIgaGFzIGFscmVhZHkgYmVlbiB1c2VkISBDaGFpbiB5b3VyIG1ldGhvZCBjYWxscyBsaWtlIGBxID0+IHEuZXEoLi4uKS5lcSguLi4pYC4gU2VlIGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L3VzaW5nL2luZGV4ZXNcIlxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5pc0NvbnN1bWVkID0gdHJ1ZTtcbiAgfVxuICBlcShmaWVsZE5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5jb25zdW1lKCk7XG4gICAgcmV0dXJuIG5ldyBJbmRleFJhbmdlQnVpbGRlckltcGwoXG4gICAgICB0aGlzLnJhbmdlRXhwcmVzc2lvbnMuY29uY2F0KHtcbiAgICAgICAgdHlwZTogXCJFcVwiLFxuICAgICAgICBmaWVsZFBhdGg6IGZpZWxkTmFtZSxcbiAgICAgICAgdmFsdWU6IGNvbnZleE9yVW5kZWZpbmVkVG9Kc29uKHZhbHVlKVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGd0KGZpZWxkTmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gbmV3IEluZGV4UmFuZ2VCdWlsZGVySW1wbChcbiAgICAgIHRoaXMucmFuZ2VFeHByZXNzaW9ucy5jb25jYXQoe1xuICAgICAgICB0eXBlOiBcIkd0XCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogY29udmV4T3JVbmRlZmluZWRUb0pzb24odmFsdWUpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgZ3RlKGZpZWxkTmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gbmV3IEluZGV4UmFuZ2VCdWlsZGVySW1wbChcbiAgICAgIHRoaXMucmFuZ2VFeHByZXNzaW9ucy5jb25jYXQoe1xuICAgICAgICB0eXBlOiBcIkd0ZVwiLFxuICAgICAgICBmaWVsZFBhdGg6IGZpZWxkTmFtZSxcbiAgICAgICAgdmFsdWU6IGNvbnZleE9yVW5kZWZpbmVkVG9Kc29uKHZhbHVlKVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGx0KGZpZWxkTmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gbmV3IEluZGV4UmFuZ2VCdWlsZGVySW1wbChcbiAgICAgIHRoaXMucmFuZ2VFeHByZXNzaW9ucy5jb25jYXQoe1xuICAgICAgICB0eXBlOiBcIkx0XCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogY29udmV4T3JVbmRlZmluZWRUb0pzb24odmFsdWUpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgbHRlKGZpZWxkTmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gbmV3IEluZGV4UmFuZ2VCdWlsZGVySW1wbChcbiAgICAgIHRoaXMucmFuZ2VFeHByZXNzaW9ucy5jb25jYXQoe1xuICAgICAgICB0eXBlOiBcIkx0ZVwiLFxuICAgICAgICBmaWVsZFBhdGg6IGZpZWxkTmFtZSxcbiAgICAgICAgdmFsdWU6IGNvbnZleE9yVW5kZWZpbmVkVG9Kc29uKHZhbHVlKVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGV4cG9ydCgpIHtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gdGhpcy5yYW5nZUV4cHJlc3Npb25zO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleF9yYW5nZV9idWlsZGVyX2ltcGwuanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJjb252ZXhPclVuZGVmaW5lZFRvSnNvbiIsIkluZGV4UmFuZ2UiLCJJbmRleFJhbmdlQnVpbGRlckltcGwiLCJjb25zdHJ1Y3RvciIsInJhbmdlRXhwcmVzc2lvbnMiLCJpc0NvbnN1bWVkIiwibmV3IiwiY29uc3VtZSIsIkVycm9yIiwiZXEiLCJmaWVsZE5hbWUiLCJjb25jYXQiLCJ0eXBlIiwiZmllbGRQYXRoIiwiZ3QiLCJndGUiLCJsdCIsImx0ZSIsImV4cG9ydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/query_impl.js':
    /*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/query_impl.js ***!
  \******************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryImpl: () => (/* binding */ QueryImpl),\n/* harmony export */   QueryInitializerImpl: () => (/* binding */ QueryInitializerImpl)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n/* harmony import */ var _filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filter_builder_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/filter_builder_impl.js");\n/* harmony import */ var _index_range_builder_impl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index_range_builder_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js");\n/* harmony import */ var _search_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./search_filter_builder_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./validate.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/validate.js");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\n\n\n\n\nconst MAX_QUERY_OPERATORS = 256;\nclass QueryInitializerImpl {\n    constructor(tableName){\n        __publicField(this, "tableName");\n        this.tableName = tableName;\n    }\n    withIndex(indexName, indexRange) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(indexName, 1, "withIndex", "indexName");\n        let rangeBuilder = _index_range_builder_impl_js__WEBPACK_IMPORTED_MODULE_3__.IndexRangeBuilderImpl.new();\n        if (indexRange !== void 0) {\n            rangeBuilder = indexRange(rangeBuilder);\n        }\n        return new QueryImpl({\n            source: {\n                type: "IndexRange",\n                indexName: this.tableName + "." + indexName,\n                range: rangeBuilder.export(),\n                order: null\n            },\n            operators: []\n        });\n    }\n    withSearchIndex(indexName, searchFilter) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(indexName, 1, "withSearchIndex", "indexName");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(searchFilter, 2, "withSearchIndex", "searchFilter");\n        const searchFilterBuilder = _search_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_4__.SearchFilterBuilderImpl.new();\n        return new QueryImpl({\n            source: {\n                type: "Search",\n                indexName: this.tableName + "." + indexName,\n                filters: searchFilter(searchFilterBuilder).export()\n            },\n            operators: []\n        });\n    }\n    fullTableScan() {\n        return new QueryImpl({\n            source: {\n                type: "FullTableScan",\n                tableName: this.tableName,\n                order: null\n            },\n            operators: []\n        });\n    }\n    order(order) {\n        return this.fullTableScan().order(order);\n    }\n    // This is internal API and should not be exposed to developers yet.\n    async count() {\n        const syscallJSON = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/count", {\n            table: this.tableName\n        });\n        const syscallResult = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n        return syscallResult;\n    }\n    filter(predicate) {\n        return this.fullTableScan().filter(predicate);\n    }\n    limit(n) {\n        return this.fullTableScan().limit(n);\n    }\n    collect() {\n        return this.fullTableScan().collect();\n    }\n    take(n) {\n        return this.fullTableScan().take(n);\n    }\n    paginate(paginationOpts) {\n        return this.fullTableScan().paginate(paginationOpts);\n    }\n    first() {\n        return this.fullTableScan().first();\n    }\n    unique() {\n        return this.fullTableScan().unique();\n    }\n    [Symbol.asyncIterator]() {\n        return this.fullTableScan()[Symbol.asyncIterator]();\n    }\n}\nfunction throwClosedError(type) {\n    throw new Error(type === "consumed" ? "This query is closed and can\'t emit any more values." : "This query has been chained with another operator and can\'t be reused.");\n}\nclass QueryImpl {\n    constructor(query){\n        __publicField(this, "state");\n        __publicField(this, "tableNameForErrorMessages");\n        this.state = {\n            type: "preparing",\n            query\n        };\n        if (query.source.type === "FullTableScan") {\n            this.tableNameForErrorMessages = query.source.tableName;\n        } else {\n            this.tableNameForErrorMessages = query.source.indexName.split(".")[0];\n        }\n    }\n    takeQuery() {\n        if (this.state.type !== "preparing") {\n            throw new Error("A query can only be chained once and can\'t be chained after iteration begins.");\n        }\n        const query = this.state.query;\n        this.state = {\n            type: "closed"\n        };\n        return query;\n    }\n    startQuery() {\n        if (this.state.type === "executing") {\n            throw new Error("Iteration can only begin on a query once.");\n        }\n        if (this.state.type === "closed" || this.state.type === "consumed") {\n            throwClosedError(this.state.type);\n        }\n        const query = this.state.query;\n        const { queryId } = (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performSyscall)("1.0/queryStream", {\n            query,\n            version: _index_js__WEBPACK_IMPORTED_MODULE_6__.version\n        });\n        this.state = {\n            type: "executing",\n            queryId\n        };\n        return queryId;\n    }\n    closeQuery() {\n        if (this.state.type === "executing") {\n            const queryId = this.state.queryId;\n            (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performSyscall)("1.0/queryCleanup", {\n                queryId\n            });\n        }\n        this.state = {\n            type: "consumed"\n        };\n    }\n    order(order) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(order, 1, "order", "order");\n        const query = this.takeQuery();\n        if (query.source.type === "Search") {\n            throw new Error("Search queries must always be in relevance order. Can not set order manually.");\n        }\n        if (query.source.order !== null) {\n            throw new Error("Queries may only specify order at most once");\n        }\n        query.source.order = order;\n        return new QueryImpl(query);\n    }\n    filter(predicate) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(predicate, 1, "filter", "predicate");\n        const query = this.takeQuery();\n        if (query.operators.length >= MAX_QUERY_OPERATORS) {\n            throw new Error(`Can\'t construct query with more than ${MAX_QUERY_OPERATORS} operators`);\n        }\n        query.operators.push({\n            filter: (0,_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_2__.serializeExpression)(predicate(_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_2__.filterBuilderImpl))\n        });\n        return new QueryImpl(query);\n    }\n    limit(n) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(n, 1, "limit", "n");\n        const query = this.takeQuery();\n        query.operators.push({\n            limit: n\n        });\n        return new QueryImpl(query);\n    }\n    [Symbol.asyncIterator]() {\n        this.startQuery();\n        return this;\n    }\n    async next() {\n        if (this.state.type === "closed" || this.state.type === "consumed") {\n            throwClosedError(this.state.type);\n        }\n        const queryId = this.state.type === "preparing" ? this.startQuery() : this.state.queryId;\n        const { value, done } = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/queryStreamNext", {\n            queryId\n        });\n        if (done) {\n            this.closeQuery();\n        }\n        const convexValue = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(value);\n        return {\n            value: convexValue,\n            done\n        };\n    }\n    return() {\n        this.closeQuery();\n        return Promise.resolve({\n            done: true,\n            value: void 0\n        });\n    }\n    async paginate(paginationOpts) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(paginationOpts, 1, "paginate", "options");\n        if (typeof paginationOpts?.numItems !== "number" || paginationOpts.numItems < 0) {\n            throw new Error(`\\`options.numItems\\` must be a positive number. Received \\`${paginationOpts?.numItems}\\`.`);\n        }\n        const query = this.takeQuery();\n        const pageSize = paginationOpts.numItems;\n        const cursor = paginationOpts.cursor;\n        const endCursor = paginationOpts?.endCursor ?? null;\n        const maximumRowsRead = paginationOpts.maximumRowsRead ?? null;\n        const { page, isDone, continueCursor, splitCursor, pageStatus } = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/queryPage", {\n            query,\n            cursor,\n            endCursor,\n            pageSize,\n            maximumRowsRead,\n            maximumBytesRead: paginationOpts.maximumBytesRead,\n            version: _index_js__WEBPACK_IMPORTED_MODULE_6__.version\n        });\n        return {\n            page: page.map((json)=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(json)),\n            isDone,\n            continueCursor,\n            splitCursor,\n            pageStatus\n        };\n    }\n    async collect() {\n        const out = [];\n        for await (const item of this){\n            out.push(item);\n        }\n        return out;\n    }\n    async take(n) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(n, 1, "take", "n");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArgIsNonNegativeInteger)(n, 1, "take", "n");\n        return this.limit(n).collect();\n    }\n    async first() {\n        const first_array = await this.take(1);\n        return first_array.length === 0 ? null : first_array[0];\n    }\n    async unique() {\n        const first_two_array = await this.take(2);\n        if (first_two_array.length === 0) {\n            return null;\n        }\n        if (first_two_array.length === 2) {\n            throw new Error(`unique() query returned more than one result from table ${this.tableNameForErrorMessages}:\n [${first_two_array[0]._id}, ${first_two_array[1]._id}, ...]`);\n        }\n        return first_two_array[0];\n    }\n} //# sourceMappingURL=query_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/query_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/registration_impl.js':
    /*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/registration_impl.js ***!
  \*************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   actionGeneric: () => (/* binding */ actionGeneric),\n/* harmony export */   httpActionGeneric: () => (/* binding */ httpActionGeneric),\n/* harmony export */   internalActionGeneric: () => (/* binding */ internalActionGeneric),\n/* harmony export */   internalMutationGeneric: () => (/* binding */ internalMutationGeneric),\n/* harmony export */   internalQueryGeneric: () => (/* binding */ internalQueryGeneric),\n/* harmony export */   invokeFunction: () => (/* binding */ invokeFunction),\n/* harmony export */   mutationGeneric: () => (/* binding */ mutationGeneric),\n/* harmony export */   queryGeneric: () => (/* binding */ queryGeneric),\n/* harmony export */   validateReturnValue: () => (/* binding */ validateReturnValue)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _actions_impl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/actions_impl.js");\n/* harmony import */ var _vector_search_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vector_search_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/vector_search_impl.js");\n/* harmony import */ var _authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./authentication_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/authentication_impl.js");\n/* harmony import */ var _database_impl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./database_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/database_impl.js");\n/* harmony import */ var _query_impl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./query_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/query_impl.js");\n/* harmony import */ var _scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scheduler_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/scheduler_impl.js");\n/* harmony import */ var _storage_impl_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./storage_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/storage_impl.js");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n/* harmony import */ var _values_validator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../values/validator.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validator.js");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/paths.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/paths.js");\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function invokeMutation(func, argsStr) {\n    const requestId = "";\n    const args = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(JSON.parse(argsStr));\n    const mutationCtx = {\n        db: (0,_database_impl_js__WEBPACK_IMPORTED_MODULE_4__.setupWriter)(),\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageWriter)(requestId),\n        scheduler: (0,_scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__.setupMutationScheduler)(),\n        runQuery: (reference, args2)=>runUdf("query", reference, args2),\n        runMutation: (reference, args2)=>runUdf("mutation", reference, args2)\n    };\n    const result = await invokeFunction(func, mutationCtx, args);\n    validateReturnValue(result);\n    return JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(result === void 0 ? null : result));\n}\nfunction validateReturnValue(v2) {\n    if (v2 instanceof _query_impl_js__WEBPACK_IMPORTED_MODULE_5__.QueryInitializerImpl || v2 instanceof _query_impl_js__WEBPACK_IMPORTED_MODULE_5__.QueryImpl) {\n        throw new Error("Return value is a Query. Results must be retrieved with `.collect()`, `.take(n), `.unique()`, or `.first()`.");\n    }\n}\nasync function invokeFunction(func, ctx, args) {\n    let result;\n    try {\n        result = await Promise.resolve(func(ctx, ...args));\n    } catch (thrown) {\n        throw serializeConvexErrorData(thrown);\n    }\n    return result;\n}\nfunction dontCallDirectly(funcType, handler) {\n    return (ctx, args)=>{\n        globalThis.console.warn(`Convex functions should not directly call other Convex functions. Consider calling a helper function instead. e.g. \\`export const foo = ${funcType}(...); await foo(ctx);\\` is not supported. See https://docs.convex.dev/production/best-practices/#use-helper-functions-to-write-shared-code`);\n        return handler(ctx, args);\n    };\n}\nfunction serializeConvexErrorData(thrown) {\n    if (typeof thrown === "object" && thrown !== null && Symbol.for("ConvexError") in thrown) {\n        const error = thrown;\n        error.data = JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(error.data === void 0 ? null : error.data));\n        error.ConvexErrorSymbol = Symbol.for("ConvexError");\n        return error;\n    } else {\n        return thrown;\n    }\n}\nfunction assertNotBrowser() {\n    if (true) {\n        return;\n    }\n    const isRealBrowser = Object.getOwnPropertyDescriptor(globalThis, "window")?.get?.toString().includes("[native code]") ?? false;\n    if (isRealBrowser) {\n        console.error("Convex functions should not be imported in the browser. This will throw an error in future versions of `convex`. If this is a false negative, please report it to Convex support.");\n    }\n}\nfunction strictReplacer(key, value) {\n    if (value === void 0) {\n        throw new Error(`Cannot serialize validator value \\`undefined\\` for ${key}`);\n    }\n    return value;\n}\nfunction exportArgs(functionDefinition) {\n    return ()=>{\n        let args = _values_index_js__WEBPACK_IMPORTED_MODULE_0__.v.any();\n        if (typeof functionDefinition === "object" && functionDefinition.args !== void 0) {\n            args = (0,_values_validator_js__WEBPACK_IMPORTED_MODULE_10__.asObjectValidator)(functionDefinition.args);\n        }\n        return JSON.stringify(args.json, strictReplacer);\n    };\n}\nfunction exportReturns(functionDefinition) {\n    return ()=>{\n        let returns;\n        if (typeof functionDefinition === "object" && functionDefinition.returns !== void 0) {\n            returns = (0,_values_validator_js__WEBPACK_IMPORTED_MODULE_10__.asObjectValidator)(functionDefinition.returns);\n        }\n        return JSON.stringify(returns ? returns.json : null, strictReplacer);\n    };\n}\nconst mutationGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === "function" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly("mutation", handler);\n    assertNotBrowser();\n    func.isMutation = true;\n    func.isPublic = true;\n    func.invokeMutation = (argsStr)=>invokeMutation(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nconst internalMutationGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === "function" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly("internalMutation", handler);\n    assertNotBrowser();\n    func.isMutation = true;\n    func.isInternal = true;\n    func.invokeMutation = (argsStr)=>invokeMutation(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nasync function invokeQuery(func, argsStr) {\n    const requestId = "";\n    const args = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(JSON.parse(argsStr));\n    const queryCtx = {\n        db: (0,_database_impl_js__WEBPACK_IMPORTED_MODULE_4__.setupReader)(),\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageReader)(requestId),\n        runQuery: (reference, args2)=>runUdf("query", reference, args2)\n    };\n    const result = await invokeFunction(func, queryCtx, args);\n    validateReturnValue(result);\n    return JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(result === void 0 ? null : result));\n}\nconst queryGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === "function" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly("query", handler);\n    assertNotBrowser();\n    func.isQuery = true;\n    func.isPublic = true;\n    func.invokeQuery = (argsStr)=>invokeQuery(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nconst internalQueryGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === "function" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly("internalQuery", handler);\n    assertNotBrowser();\n    func.isQuery = true;\n    func.isInternal = true;\n    func.invokeQuery = (argsStr)=>invokeQuery(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nasync function invokeAction(func, requestId, argsStr) {\n    const args = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(JSON.parse(argsStr));\n    const calls = (0,_actions_impl_js__WEBPACK_IMPORTED_MODULE_1__.setupActionCalls)(requestId);\n    const ctx = {\n        ...calls,\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        scheduler: (0,_scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__.setupActionScheduler)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageActionWriter)(requestId),\n        vectorSearch: (0,_vector_search_impl_js__WEBPACK_IMPORTED_MODULE_2__.setupActionVectorSearch)(requestId)\n    };\n    const result = await invokeFunction(func, ctx, args);\n    return JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(result === void 0 ? null : result));\n}\nconst actionGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === "function" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly("action", handler);\n    assertNotBrowser();\n    func.isAction = true;\n    func.isPublic = true;\n    func.invokeAction = (requestId, argsStr)=>invokeAction(handler, requestId, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nconst internalActionGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === "function" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly("internalAction", handler);\n    assertNotBrowser();\n    func.isAction = true;\n    func.isInternal = true;\n    func.invokeAction = (requestId, argsStr)=>invokeAction(handler, requestId, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nasync function invokeHttpAction(func, request) {\n    const requestId = "";\n    const calls = (0,_actions_impl_js__WEBPACK_IMPORTED_MODULE_1__.setupActionCalls)(requestId);\n    const ctx = {\n        ...calls,\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageActionWriter)(requestId),\n        scheduler: (0,_scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__.setupActionScheduler)(requestId),\n        vectorSearch: (0,_vector_search_impl_js__WEBPACK_IMPORTED_MODULE_2__.setupActionVectorSearch)(requestId)\n    };\n    return await invokeFunction(func, ctx, [\n        request\n    ]);\n}\nconst httpActionGeneric = (func)=>{\n    const q = dontCallDirectly("httpAction", func);\n    assertNotBrowser();\n    q.isHttp = true;\n    q.invokeHttpAction = (request)=>invokeHttpAction(func, request);\n    q._handler = func;\n    return q;\n};\nasync function runUdf(udfType, f, args) {\n    const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_8__.parseArgs)(args);\n    const syscallArgs = {\n        udfType,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(queryArgs),\n        ...(0,_components_paths_js__WEBPACK_IMPORTED_MODULE_11__.getFunctionAddress)(f)\n    };\n    const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_9__.performAsyncSyscall)("1.0/runUdf", syscallArgs);\n    return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n} //# sourceMappingURL=registration_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/registration_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/scheduler_impl.js':
    /*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/scheduler_impl.js ***!
  \**********************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupActionScheduler: () => (/* binding */ setupActionScheduler),\n/* harmony export */   setupMutationScheduler: () => (/* binding */ setupMutationScheduler)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./validate.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/validate.js");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/paths.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/paths.js");\n\n\n\n\n\n\n\nfunction setupMutationScheduler() {\n    return {\n        runAfter: async (delayMs, functionReference, args)=>{\n            const syscallArgs = runAfterSyscallArgs(delayMs, functionReference, args);\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/schedule", syscallArgs);\n        },\n        runAt: async (ms_since_epoch_or_date, functionReference, args)=>{\n            const syscallArgs = runAtSyscallArgs(ms_since_epoch_or_date, functionReference, args);\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/schedule", syscallArgs);\n        },\n        cancel: async (id)=>{\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_4__.validateArg)(id, 1, "cancel", "id");\n            const args = {\n                id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id)\n            };\n            await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/cancel_job", args);\n        }\n    };\n}\nfunction setupActionScheduler(requestId) {\n    return {\n        runAfter: async (delayMs, functionReference, args)=>{\n            const syscallArgs = {\n                requestId,\n                ...runAfterSyscallArgs(delayMs, functionReference, args)\n            };\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/actions/schedule", syscallArgs);\n        },\n        runAt: async (ms_since_epoch_or_date, functionReference, args)=>{\n            const syscallArgs = {\n                requestId,\n                ...runAtSyscallArgs(ms_since_epoch_or_date, functionReference, args)\n            };\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/actions/schedule", syscallArgs);\n        },\n        cancel: async (id)=>{\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_4__.validateArg)(id, 1, "cancel", "id");\n            const syscallArgs = {\n                id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id)\n            };\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)("1.0/actions/cancel_job", syscallArgs);\n        }\n    };\n}\nfunction runAfterSyscallArgs(delayMs, functionReference, args) {\n    if (typeof delayMs !== "number") {\n        throw new Error("`delayMs` must be a number");\n    }\n    if (!isFinite(delayMs)) {\n        throw new Error("`delayMs` must be a finite number");\n    }\n    if (delayMs < 0) {\n        throw new Error("`delayMs` must be non-negative");\n    }\n    const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_3__.parseArgs)(args);\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_5__.getFunctionAddress)(functionReference);\n    const ts = (Date.now() + delayMs) / 1e3;\n    return {\n        ...address,\n        ts,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(functionArgs),\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version\n    };\n}\nfunction runAtSyscallArgs(ms_since_epoch_or_date, functionReference, args) {\n    let ts;\n    if (ms_since_epoch_or_date instanceof Date) {\n        ts = ms_since_epoch_or_date.valueOf() / 1e3;\n    } else if (typeof ms_since_epoch_or_date === "number") {\n        ts = ms_since_epoch_or_date / 1e3;\n    } else {\n        throw new Error("The invoke time must a Date or a timestamp");\n    }\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_5__.getFunctionAddress)(functionReference);\n    const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_3__.parseArgs)(args);\n    return {\n        ...address,\n        ts,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(functionArgs),\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version\n    };\n} //# sourceMappingURL=scheduler_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvc2NoZWR1bGVyX2ltcGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBYTtBQUN3QztBQUNaO0FBQ1U7QUFDRDtBQUNOO0FBQ2dCO0FBQ3JELFNBQVNNO0lBQ2QsT0FBTztRQUNMQyxVQUFVLE9BQU9DLFNBQVNDLG1CQUFtQkM7WUFDM0MsTUFBTUMsY0FBY0Msb0JBQW9CSixTQUFTQyxtQkFBbUJDO1lBQ3BFLE9BQU8sTUFBTVIsZ0VBQW1CQSxDQUFDLGdCQUFnQlM7UUFDbkQ7UUFDQUUsT0FBTyxPQUFPQyx3QkFBd0JMLG1CQUFtQkM7WUFDdkQsTUFBTUMsY0FBY0ksaUJBQ2xCRCx3QkFDQUwsbUJBQ0FDO1lBRUYsT0FBTyxNQUFNUixnRUFBbUJBLENBQUMsZ0JBQWdCUztRQUNuRDtRQUNBSyxRQUFRLE9BQU9DO1lBQ2JiLHlEQUFXQSxDQUFDYSxJQUFJLEdBQUcsVUFBVTtZQUM3QixNQUFNUCxPQUFPO2dCQUFFTyxJQUFJakIsOERBQVlBLENBQUNpQjtZQUFJO1lBQ3BDLE1BQU1mLGdFQUFtQkEsQ0FBQyxrQkFBa0JRO1FBQzlDO0lBQ0Y7QUFDRjtBQUNPLFNBQVNRLHFCQUFxQkMsU0FBUztJQUM1QyxPQUFPO1FBQ0xaLFVBQVUsT0FBT0MsU0FBU0MsbUJBQW1CQztZQUMzQyxNQUFNQyxjQUFjO2dCQUNsQlE7Z0JBQ0EsR0FBR1Asb0JBQW9CSixTQUFTQyxtQkFBbUJDLEtBQUs7WUFDMUQ7WUFDQSxPQUFPLE1BQU1SLGdFQUFtQkEsQ0FBQyx3QkFBd0JTO1FBQzNEO1FBQ0FFLE9BQU8sT0FBT0Msd0JBQXdCTCxtQkFBbUJDO1lBQ3ZELE1BQU1DLGNBQWM7Z0JBQ2xCUTtnQkFDQSxHQUFHSixpQkFBaUJELHdCQUF3QkwsbUJBQW1CQyxLQUFLO1lBQ3RFO1lBQ0EsT0FBTyxNQUFNUixnRUFBbUJBLENBQUMsd0JBQXdCUztRQUMzRDtRQUNBSyxRQUFRLE9BQU9DO1lBQ2JiLHlEQUFXQSxDQUFDYSxJQUFJLEdBQUcsVUFBVTtZQUM3QixNQUFNTixjQUFjO2dCQUFFTSxJQUFJakIsOERBQVlBLENBQUNpQjtZQUFJO1lBQzNDLE9BQU8sTUFBTWYsZ0VBQW1CQSxDQUFDLDBCQUEwQlM7UUFDN0Q7SUFDRjtBQUNGO0FBQ0EsU0FBU0Msb0JBQW9CSixPQUFPLEVBQUVDLGlCQUFpQixFQUFFQyxJQUFJO0lBQzNELElBQUksT0FBT0YsWUFBWSxVQUFVO1FBQy9CLE1BQU0sSUFBSVksTUFBTTtJQUNsQjtJQUNBLElBQUksQ0FBQ0MsU0FBU2IsVUFBVTtRQUN0QixNQUFNLElBQUlZLE1BQU07SUFDbEI7SUFDQSxJQUFJWixVQUFVLEdBQUc7UUFDZixNQUFNLElBQUlZLE1BQU07SUFDbEI7SUFDQSxNQUFNRSxlQUFlbkIsMkRBQVNBLENBQUNPO0lBQy9CLE1BQU1hLFVBQVVsQix3RUFBa0JBLENBQUNJO0lBQ25DLE1BQU1lLEtBQUssQ0FBQ0MsS0FBS0MsR0FBRyxLQUFLbEIsT0FBTSxJQUFLO0lBQ3BDLE9BQU87UUFDTCxHQUFHZSxPQUFPO1FBQ1ZDO1FBQ0FkLE1BQU1WLDhEQUFZQSxDQUFDc0I7UUFDbkJyQixPQUFPQSxnREFBQUE7SUFDVDtBQUNGO0FBQ0EsU0FBU2MsaUJBQWlCRCxzQkFBc0IsRUFBRUwsaUJBQWlCLEVBQUVDLElBQUk7SUFDdkUsSUFBSWM7SUFDSixJQUFJVixrQ0FBa0NXLE1BQU07UUFDMUNELEtBQUtWLHVCQUF1QmEsT0FBTyxLQUFLO0lBQzFDLE9BQU8sSUFBSSxPQUFPYiwyQkFBMkIsVUFBVTtRQUNyRFUsS0FBS1YseUJBQXlCO0lBQ2hDLE9BQU87UUFDTCxNQUFNLElBQUlNLE1BQU07SUFDbEI7SUFDQSxNQUFNRyxVQUFVbEIsd0VBQWtCQSxDQUFDSTtJQUNuQyxNQUFNYSxlQUFlbkIsMkRBQVNBLENBQUNPO0lBQy9CLE9BQU87UUFDTCxHQUFHYSxPQUFPO1FBQ1ZDO1FBQ0FkLE1BQU1WLDhEQUFZQSxDQUFDc0I7UUFDbkJyQixPQUFPQSxnREFBQUE7SUFDVDtBQUNGLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvc2NoZWR1bGVyX2ltcGwuanM/N2I2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGNvbnZleFRvSnNvbiB9IGZyb20gXCIuLi8uLi92YWx1ZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IHBlcmZvcm1Bc3luY1N5c2NhbGwgfSBmcm9tIFwiLi9zeXNjYWxsLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUFyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB2YWxpZGF0ZUFyZyB9IGZyb20gXCIuL3ZhbGlkYXRlLmpzXCI7XG5pbXBvcnQgeyBnZXRGdW5jdGlvbkFkZHJlc3MgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9wYXRocy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwTXV0YXRpb25TY2hlZHVsZXIoKSB7XG4gIHJldHVybiB7XG4gICAgcnVuQWZ0ZXI6IGFzeW5jIChkZWxheU1zLCBmdW5jdGlvblJlZmVyZW5jZSwgYXJncykgPT4ge1xuICAgICAgY29uc3Qgc3lzY2FsbEFyZ3MgPSBydW5BZnRlclN5c2NhbGxBcmdzKGRlbGF5TXMsIGZ1bmN0aW9uUmVmZXJlbmNlLCBhcmdzKTtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL3NjaGVkdWxlXCIsIHN5c2NhbGxBcmdzKTtcbiAgICB9LFxuICAgIHJ1bkF0OiBhc3luYyAobXNfc2luY2VfZXBvY2hfb3JfZGF0ZSwgZnVuY3Rpb25SZWZlcmVuY2UsIGFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHN5c2NhbGxBcmdzID0gcnVuQXRTeXNjYWxsQXJncyhcbiAgICAgICAgbXNfc2luY2VfZXBvY2hfb3JfZGF0ZSxcbiAgICAgICAgZnVuY3Rpb25SZWZlcmVuY2UsXG4gICAgICAgIGFyZ3NcbiAgICAgICk7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9zY2hlZHVsZVwiLCBzeXNjYWxsQXJncyk7XG4gICAgfSxcbiAgICBjYW5jZWw6IGFzeW5jIChpZCkgPT4ge1xuICAgICAgdmFsaWRhdGVBcmcoaWQsIDEsIFwiY2FuY2VsXCIsIFwiaWRcIik7XG4gICAgICBjb25zdCBhcmdzID0geyBpZDogY29udmV4VG9Kc29uKGlkKSB9O1xuICAgICAgYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9jYW5jZWxfam9iXCIsIGFyZ3MpO1xuICAgIH1cbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEFjdGlvblNjaGVkdWxlcihyZXF1ZXN0SWQpIHtcbiAgcmV0dXJuIHtcbiAgICBydW5BZnRlcjogYXN5bmMgKGRlbGF5TXMsIGZ1bmN0aW9uUmVmZXJlbmNlLCBhcmdzKSA9PiB7XG4gICAgICBjb25zdCBzeXNjYWxsQXJncyA9IHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAuLi5ydW5BZnRlclN5c2NhbGxBcmdzKGRlbGF5TXMsIGZ1bmN0aW9uUmVmZXJlbmNlLCBhcmdzKVxuICAgICAgfTtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL2FjdGlvbnMvc2NoZWR1bGVcIiwgc3lzY2FsbEFyZ3MpO1xuICAgIH0sXG4gICAgcnVuQXQ6IGFzeW5jIChtc19zaW5jZV9lcG9jaF9vcl9kYXRlLCBmdW5jdGlvblJlZmVyZW5jZSwgYXJncykgPT4ge1xuICAgICAgY29uc3Qgc3lzY2FsbEFyZ3MgPSB7XG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgLi4ucnVuQXRTeXNjYWxsQXJncyhtc19zaW5jZV9lcG9jaF9vcl9kYXRlLCBmdW5jdGlvblJlZmVyZW5jZSwgYXJncylcbiAgICAgIH07XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9hY3Rpb25zL3NjaGVkdWxlXCIsIHN5c2NhbGxBcmdzKTtcbiAgICB9LFxuICAgIGNhbmNlbDogYXN5bmMgKGlkKSA9PiB7XG4gICAgICB2YWxpZGF0ZUFyZyhpZCwgMSwgXCJjYW5jZWxcIiwgXCJpZFwiKTtcbiAgICAgIGNvbnN0IHN5c2NhbGxBcmdzID0geyBpZDogY29udmV4VG9Kc29uKGlkKSB9O1xuICAgICAgcmV0dXJuIGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXCIxLjAvYWN0aW9ucy9jYW5jZWxfam9iXCIsIHN5c2NhbGxBcmdzKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBydW5BZnRlclN5c2NhbGxBcmdzKGRlbGF5TXMsIGZ1bmN0aW9uUmVmZXJlbmNlLCBhcmdzKSB7XG4gIGlmICh0eXBlb2YgZGVsYXlNcyAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImBkZWxheU1zYCBtdXN0IGJlIGEgbnVtYmVyXCIpO1xuICB9XG4gIGlmICghaXNGaW5pdGUoZGVsYXlNcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZGVsYXlNc2AgbXVzdCBiZSBhIGZpbml0ZSBudW1iZXJcIik7XG4gIH1cbiAgaWYgKGRlbGF5TXMgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYGRlbGF5TXNgIG11c3QgYmUgbm9uLW5lZ2F0aXZlXCIpO1xuICB9XG4gIGNvbnN0IGZ1bmN0aW9uQXJncyA9IHBhcnNlQXJncyhhcmdzKTtcbiAgY29uc3QgYWRkcmVzcyA9IGdldEZ1bmN0aW9uQWRkcmVzcyhmdW5jdGlvblJlZmVyZW5jZSk7XG4gIGNvbnN0IHRzID0gKERhdGUubm93KCkgKyBkZWxheU1zKSAvIDFlMztcbiAgcmV0dXJuIHtcbiAgICAuLi5hZGRyZXNzLFxuICAgIHRzLFxuICAgIGFyZ3M6IGNvbnZleFRvSnNvbihmdW5jdGlvbkFyZ3MpLFxuICAgIHZlcnNpb25cbiAgfTtcbn1cbmZ1bmN0aW9uIHJ1bkF0U3lzY2FsbEFyZ3MobXNfc2luY2VfZXBvY2hfb3JfZGF0ZSwgZnVuY3Rpb25SZWZlcmVuY2UsIGFyZ3MpIHtcbiAgbGV0IHRzO1xuICBpZiAobXNfc2luY2VfZXBvY2hfb3JfZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICB0cyA9IG1zX3NpbmNlX2Vwb2NoX29yX2RhdGUudmFsdWVPZigpIC8gMWUzO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtc19zaW5jZV9lcG9jaF9vcl9kYXRlID09PSBcIm51bWJlclwiKSB7XG4gICAgdHMgPSBtc19zaW5jZV9lcG9jaF9vcl9kYXRlIC8gMWUzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBpbnZva2UgdGltZSBtdXN0IGEgRGF0ZSBvciBhIHRpbWVzdGFtcFwiKTtcbiAgfVxuICBjb25zdCBhZGRyZXNzID0gZ2V0RnVuY3Rpb25BZGRyZXNzKGZ1bmN0aW9uUmVmZXJlbmNlKTtcbiAgY29uc3QgZnVuY3Rpb25BcmdzID0gcGFyc2VBcmdzKGFyZ3MpO1xuICByZXR1cm4ge1xuICAgIC4uLmFkZHJlc3MsXG4gICAgdHMsXG4gICAgYXJnczogY29udmV4VG9Kc29uKGZ1bmN0aW9uQXJncyksXG4gICAgdmVyc2lvblxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVyX2ltcGwuanMubWFwXG4iXSwibmFtZXMiOlsiY29udmV4VG9Kc29uIiwidmVyc2lvbiIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJwYXJzZUFyZ3MiLCJ2YWxpZGF0ZUFyZyIsImdldEZ1bmN0aW9uQWRkcmVzcyIsInNldHVwTXV0YXRpb25TY2hlZHVsZXIiLCJydW5BZnRlciIsImRlbGF5TXMiLCJmdW5jdGlvblJlZmVyZW5jZSIsImFyZ3MiLCJzeXNjYWxsQXJncyIsInJ1bkFmdGVyU3lzY2FsbEFyZ3MiLCJydW5BdCIsIm1zX3NpbmNlX2Vwb2NoX29yX2RhdGUiLCJydW5BdFN5c2NhbGxBcmdzIiwiY2FuY2VsIiwiaWQiLCJzZXR1cEFjdGlvblNjaGVkdWxlciIsInJlcXVlc3RJZCIsIkVycm9yIiwiaXNGaW5pdGUiLCJmdW5jdGlvbkFyZ3MiLCJhZGRyZXNzIiwidHMiLCJEYXRlIiwibm93IiwidmFsdWVPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/scheduler_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js':
    /*!**********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js ***!
  \**********************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchFilterBuilderImpl: () => (/* binding */ SearchFilterBuilderImpl)\n/* harmony export */ });\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/value.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js");\n/* harmony import */ var _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../search_filter_builder.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/search_filter_builder.js");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validate.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/validate.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\nclass SearchFilterBuilderImpl extends _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_1__.SearchFilter {\n    constructor(filters){\n        super();\n        __publicField(this, "filters");\n        __publicField(this, "isConsumed");\n        this.filters = filters;\n        this.isConsumed = false;\n    }\n    static new() {\n        return new SearchFilterBuilderImpl([]);\n    }\n    consume() {\n        if (this.isConsumed) {\n            throw new Error("SearchFilterBuilder has already been used! Chain your method calls like `q => q.search(...).eq(...)`.");\n        }\n        this.isConsumed = true;\n    }\n    search(fieldName, query) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(fieldName, 1, "search", "fieldName");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(query, 2, "search", "query");\n        this.consume();\n        return new SearchFilterBuilderImpl(this.filters.concat({\n            type: "Search",\n            fieldPath: fieldName,\n            value: query\n        }));\n    }\n    eq(fieldName, value) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(fieldName, 1, "eq", "fieldName");\n        if (arguments.length !== 2) {\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(value, 2, "search", "value");\n        }\n        this.consume();\n        return new SearchFilterBuilderImpl(this.filters.concat({\n            type: "Eq",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    export() {\n        this.consume();\n        return this.filters;\n    }\n} //# sourceMappingURL=search_filter_builder_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvc2VhcmNoX2ZpbHRlcl9idWlsZGVyX2ltcGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFhO0FBQ2IsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0MsUUFBVUgsZ0JBQWdCQyxLQUFLLE9BQU9DLFFBQVEsV0FBV0EsTUFBTSxLQUFLQSxLQUFLQztBQUN4QztBQUczQjtBQUNPO0FBQ3JDLE1BQU1RLGdDQUFnQ0YsbUVBQVlBO0lBQ3ZERyxZQUFZQyxPQUFPLENBQUU7UUFDbkIsS0FBSztRQUNMTixjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUU7UUFDcEIsSUFBSSxDQUFDTSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxVQUFVLEdBQUc7SUFDcEI7SUFDQSxPQUFPQyxNQUFNO1FBQ1gsT0FBTyxJQUFJSix3QkFBd0IsRUFBRTtJQUN2QztJQUNBSyxVQUFVO1FBQ1IsSUFBSSxJQUFJLENBQUNGLFVBQVUsRUFBRTtZQUNuQixNQUFNLElBQUlHLE1BQ1I7UUFFSjtRQUNBLElBQUksQ0FBQ0gsVUFBVSxHQUFHO0lBQ3BCO0lBQ0FJLE9BQU9DLFNBQVMsRUFBRUMsS0FBSyxFQUFFO1FBQ3ZCVix5REFBV0EsQ0FBQ1MsV0FBVyxHQUFHLFVBQVU7UUFDcENULHlEQUFXQSxDQUFDVSxPQUFPLEdBQUcsVUFBVTtRQUNoQyxJQUFJLENBQUNKLE9BQU87UUFDWixPQUFPLElBQUlMLHdCQUNULElBQUksQ0FBQ0UsT0FBTyxDQUFDUSxNQUFNLENBQUM7WUFDbEJDLE1BQU07WUFDTkMsV0FBV0o7WUFDWGhCLE9BQU9pQjtRQUNUO0lBRUo7SUFDQUksR0FBR0wsU0FBUyxFQUFFaEIsS0FBSyxFQUFFO1FBQ25CTyx5REFBV0EsQ0FBQ1MsV0FBVyxHQUFHLE1BQU07UUFDaEMsSUFBSU0sVUFBVUMsTUFBTSxLQUFLLEdBQUc7WUFDMUJoQix5REFBV0EsQ0FBQ1AsT0FBTyxHQUFHLFVBQVU7UUFDbEM7UUFDQSxJQUFJLENBQUNhLE9BQU87UUFDWixPQUFPLElBQUlMLHdCQUNULElBQUksQ0FBQ0UsT0FBTyxDQUFDUSxNQUFNLENBQUM7WUFDbEJDLE1BQU07WUFDTkMsV0FBV0o7WUFDWGhCLE9BQU9LLHlFQUF1QkEsQ0FBQ0w7UUFDakM7SUFFSjtJQUNBd0IsU0FBUztRQUNQLElBQUksQ0FBQ1gsT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDSCxPQUFPO0lBQ3JCO0FBQ0YsRUFDQSxzREFBc0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvaW1wbC9zZWFyY2hfZmlsdGVyX2J1aWxkZXJfaW1wbC5qcz9kN2I3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbmltcG9ydCB7IGNvbnZleE9yVW5kZWZpbmVkVG9Kc29uIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy92YWx1ZS5qc1wiO1xuaW1wb3J0IHtcbiAgU2VhcmNoRmlsdGVyXG59IGZyb20gXCIuLi9zZWFyY2hfZmlsdGVyX2J1aWxkZXIuanNcIjtcbmltcG9ydCB7IHZhbGlkYXRlQXJnIH0gZnJvbSBcIi4vdmFsaWRhdGUuanNcIjtcbmV4cG9ydCBjbGFzcyBTZWFyY2hGaWx0ZXJCdWlsZGVySW1wbCBleHRlbmRzIFNlYXJjaEZpbHRlciB7XG4gIGNvbnN0cnVjdG9yKGZpbHRlcnMpIHtcbiAgICBzdXBlcigpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmaWx0ZXJzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpc0NvbnN1bWVkXCIpO1xuICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnM7XG4gICAgdGhpcy5pc0NvbnN1bWVkID0gZmFsc2U7XG4gIH1cbiAgc3RhdGljIG5ldygpIHtcbiAgICByZXR1cm4gbmV3IFNlYXJjaEZpbHRlckJ1aWxkZXJJbXBsKFtdKTtcbiAgfVxuICBjb25zdW1lKCkge1xuICAgIGlmICh0aGlzLmlzQ29uc3VtZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJTZWFyY2hGaWx0ZXJCdWlsZGVyIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCEgQ2hhaW4geW91ciBtZXRob2QgY2FsbHMgbGlrZSBgcSA9PiBxLnNlYXJjaCguLi4pLmVxKC4uLilgLlwiXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmlzQ29uc3VtZWQgPSB0cnVlO1xuICB9XG4gIHNlYXJjaChmaWVsZE5hbWUsIHF1ZXJ5KSB7XG4gICAgdmFsaWRhdGVBcmcoZmllbGROYW1lLCAxLCBcInNlYXJjaFwiLCBcImZpZWxkTmFtZVwiKTtcbiAgICB2YWxpZGF0ZUFyZyhxdWVyeSwgMiwgXCJzZWFyY2hcIiwgXCJxdWVyeVwiKTtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gbmV3IFNlYXJjaEZpbHRlckJ1aWxkZXJJbXBsKFxuICAgICAgdGhpcy5maWx0ZXJzLmNvbmNhdCh7XG4gICAgICAgIHR5cGU6IFwiU2VhcmNoXCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogcXVlcnlcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICBlcShmaWVsZE5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmcoZmllbGROYW1lLCAxLCBcImVxXCIsIFwiZmllbGROYW1lXCIpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICB2YWxpZGF0ZUFyZyh2YWx1ZSwgMiwgXCJzZWFyY2hcIiwgXCJ2YWx1ZVwiKTtcbiAgICB9XG4gICAgdGhpcy5jb25zdW1lKCk7XG4gICAgcmV0dXJuIG5ldyBTZWFyY2hGaWx0ZXJCdWlsZGVySW1wbChcbiAgICAgIHRoaXMuZmlsdGVycy5jb25jYXQoe1xuICAgICAgICB0eXBlOiBcIkVxXCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogY29udmV4T3JVbmRlZmluZWRUb0pzb24odmFsdWUpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgZXhwb3J0KCkge1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHJldHVybiB0aGlzLmZpbHRlcnM7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlYXJjaF9maWx0ZXJfYnVpbGRlcl9pbXBsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiY29udmV4T3JVbmRlZmluZWRUb0pzb24iLCJTZWFyY2hGaWx0ZXIiLCJ2YWxpZGF0ZUFyZyIsIlNlYXJjaEZpbHRlckJ1aWxkZXJJbXBsIiwiY29uc3RydWN0b3IiLCJmaWx0ZXJzIiwiaXNDb25zdW1lZCIsIm5ldyIsImNvbnN1bWUiLCJFcnJvciIsInNlYXJjaCIsImZpZWxkTmFtZSIsInF1ZXJ5IiwiY29uY2F0IiwidHlwZSIsImZpZWxkUGF0aCIsImVxIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZXhwb3J0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/storage_impl.js':
    /*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/storage_impl.js ***!
  \********************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupStorageActionWriter: () => (/* binding */ setupStorageActionWriter),\n/* harmony export */   setupStorageReader: () => (/* binding */ setupStorageReader),\n/* harmony export */   setupStorageWriter: () => (/* binding */ setupStorageWriter)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validate.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/validate.js");\n\n\n\n\nfunction setupStorageReader(requestId) {\n    return {\n        getUrl: async (storageId)=>{\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(storageId, 1, "getUrl", "storageId");\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/storageGetUrl", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        },\n        getMetadata: async (storageId)=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/storageGetMetadata", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        }\n    };\n}\nfunction setupStorageWriter(requestId) {\n    const reader = setupStorageReader(requestId);\n    return {\n        generateUploadUrl: async ()=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/storageGenerateUploadUrl", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version\n            });\n        },\n        delete: async (storageId)=>{\n            await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)("1.0/storageDelete", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        },\n        getUrl: reader.getUrl,\n        getMetadata: reader.getMetadata\n    };\n}\nfunction setupStorageActionWriter(requestId) {\n    const writer = setupStorageWriter(requestId);\n    return {\n        ...writer,\n        store: async (blob, options)=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performJsSyscall)("storage/storeBlob", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                blob,\n                options\n            });\n        },\n        get: async (storageId)=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performJsSyscall)("storage/getBlob", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        }\n    };\n} //# sourceMappingURL=storage_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvc3RvcmFnZV9pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFhO0FBQzRCO0FBQzRCO0FBQ3pCO0FBQ3JDLFNBQVNJLG1CQUFtQkMsU0FBUztJQUMxQyxPQUFPO1FBQ0xDLFFBQVEsT0FBT0M7WUFDYkoseURBQVdBLENBQUNJLFdBQVcsR0FBRyxVQUFVO1lBQ3BDLE9BQU8sTUFBTU4sZ0VBQW1CQSxDQUFDLHFCQUFxQjtnQkFDcERJO2dCQUNBTCxPQUFPQSxnREFBQUE7Z0JBQ1BPO1lBQ0Y7UUFDRjtRQUNBQyxhQUFhLE9BQU9EO1lBQ2xCLE9BQU8sTUFBTU4sZ0VBQW1CQSxDQUFDLDBCQUEwQjtnQkFDekRJO2dCQUNBTCxPQUFPQSxnREFBQUE7Z0JBQ1BPO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFDTyxTQUFTRSxtQkFBbUJKLFNBQVM7SUFDMUMsTUFBTUssU0FBU04sbUJBQW1CQztJQUNsQyxPQUFPO1FBQ0xNLG1CQUFtQjtZQUNqQixPQUFPLE1BQU1WLGdFQUFtQkEsQ0FBQyxnQ0FBZ0M7Z0JBQy9ESTtnQkFDQUwsT0FBT0EsZ0RBQUFBO1lBQ1Q7UUFDRjtRQUNBWSxRQUFRLE9BQU9MO1lBQ2IsTUFBTU4sZ0VBQW1CQSxDQUFDLHFCQUFxQjtnQkFDN0NJO2dCQUNBTCxPQUFPQSxnREFBQUE7Z0JBQ1BPO1lBQ0Y7UUFDRjtRQUNBRCxRQUFRSSxPQUFPSixNQUFNO1FBQ3JCRSxhQUFhRSxPQUFPRixXQUFXO0lBQ2pDO0FBQ0Y7QUFDTyxTQUFTSyx5QkFBeUJSLFNBQVM7SUFDaEQsTUFBTVMsU0FBU0wsbUJBQW1CSjtJQUNsQyxPQUFPO1FBQ0wsR0FBR1MsTUFBTTtRQUNUQyxPQUFPLE9BQU9DLE1BQU1DO1lBQ2xCLE9BQU8sTUFBTWYsNkRBQWdCQSxDQUFDLHFCQUFxQjtnQkFDakRHO2dCQUNBTCxPQUFPQSxnREFBQUE7Z0JBQ1BnQjtnQkFDQUM7WUFDRjtRQUNGO1FBQ0FDLEtBQUssT0FBT1g7WUFDVixPQUFPLE1BQU1MLDZEQUFnQkEsQ0FBQyxtQkFBbUI7Z0JBQy9DRztnQkFDQUwsT0FBT0EsZ0RBQUFBO2dCQUNQTztZQUNGO1FBQ0Y7SUFDRjtBQUNGLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvc3RvcmFnZV9pbXBsLmpzPzU4NDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uLy4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwZXJmb3JtQXN5bmNTeXNjYWxsLCBwZXJmb3JtSnNTeXNjYWxsIH0gZnJvbSBcIi4vc3lzY2FsbC5qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVBcmcgfSBmcm9tIFwiLi92YWxpZGF0ZS5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU3RvcmFnZVJlYWRlcihyZXF1ZXN0SWQpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXRVcmw6IGFzeW5jIChzdG9yYWdlSWQpID0+IHtcbiAgICAgIHZhbGlkYXRlQXJnKHN0b3JhZ2VJZCwgMSwgXCJnZXRVcmxcIiwgXCJzdG9yYWdlSWRcIik7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9zdG9yYWdlR2V0VXJsXCIsIHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICBzdG9yYWdlSWRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0TWV0YWRhdGE6IGFzeW5jIChzdG9yYWdlSWQpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL3N0b3JhZ2VHZXRNZXRhZGF0YVwiLCB7XG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgc3RvcmFnZUlkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0dXBTdG9yYWdlV3JpdGVyKHJlcXVlc3RJZCkge1xuICBjb25zdCByZWFkZXIgPSBzZXR1cFN0b3JhZ2VSZWFkZXIocmVxdWVzdElkKTtcbiAgcmV0dXJuIHtcbiAgICBnZW5lcmF0ZVVwbG9hZFVybDogYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXCIxLjAvc3RvcmFnZUdlbmVyYXRlVXBsb2FkVXJsXCIsIHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICB2ZXJzaW9uXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogYXN5bmMgKHN0b3JhZ2VJZCkgPT4ge1xuICAgICAgYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9zdG9yYWdlRGVsZXRlXCIsIHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICBzdG9yYWdlSWRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0VXJsOiByZWFkZXIuZ2V0VXJsLFxuICAgIGdldE1ldGFkYXRhOiByZWFkZXIuZ2V0TWV0YWRhdGFcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFN0b3JhZ2VBY3Rpb25Xcml0ZXIocmVxdWVzdElkKSB7XG4gIGNvbnN0IHdyaXRlciA9IHNldHVwU3RvcmFnZVdyaXRlcihyZXF1ZXN0SWQpO1xuICByZXR1cm4ge1xuICAgIC4uLndyaXRlcixcbiAgICBzdG9yZTogYXN5bmMgKGJsb2IsIG9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtSnNTeXNjYWxsKFwic3RvcmFnZS9zdG9yZUJsb2JcIiwge1xuICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIGJsb2IsXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBhc3luYyAoc3RvcmFnZUlkKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUpzU3lzY2FsbChcInN0b3JhZ2UvZ2V0QmxvYlwiLCB7XG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgc3RvcmFnZUlkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdG9yYWdlX2ltcGwuanMubWFwXG4iXSwibmFtZXMiOlsidmVyc2lvbiIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJwZXJmb3JtSnNTeXNjYWxsIiwidmFsaWRhdGVBcmciLCJzZXR1cFN0b3JhZ2VSZWFkZXIiLCJyZXF1ZXN0SWQiLCJnZXRVcmwiLCJzdG9yYWdlSWQiLCJnZXRNZXRhZGF0YSIsInNldHVwU3RvcmFnZVdyaXRlciIsInJlYWRlciIsImdlbmVyYXRlVXBsb2FkVXJsIiwiZGVsZXRlIiwic2V0dXBTdG9yYWdlQWN0aW9uV3JpdGVyIiwid3JpdGVyIiwic3RvcmUiLCJibG9iIiwib3B0aW9ucyIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/storage_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js':
    /*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js ***!
  \***************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   performAsyncSyscall: () => (/* binding */ performAsyncSyscall),\n/* harmony export */   performJsSyscall: () => (/* binding */ performJsSyscall),\n/* harmony export */   performSyscall: () => (/* binding */ performSyscall)\n/* harmony export */ });\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/errors.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/errors.js");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/value.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js");\n\n\n\nfunction performSyscall(op, arg) {\n    if (typeof Convex === "undefined" || Convex.syscall === void 0) {\n        throw new Error("The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?");\n    }\n    const resultStr = Convex.syscall(op, JSON.stringify(arg));\n    return JSON.parse(resultStr);\n}\nasync function performAsyncSyscall(op, arg) {\n    if (typeof Convex === "undefined" || Convex.asyncSyscall === void 0) {\n        throw new Error("The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?");\n    }\n    let resultStr;\n    try {\n        resultStr = await Convex.asyncSyscall(op, JSON.stringify(arg));\n    } catch (e) {\n        if (e.data !== void 0) {\n            const rethrown = new _values_errors_js__WEBPACK_IMPORTED_MODULE_0__.ConvexError(e.message);\n            rethrown.data = (0,_values_value_js__WEBPACK_IMPORTED_MODULE_1__.jsonToConvex)(e.data);\n            throw rethrown;\n        }\n        throw new Error(e.message);\n    }\n    return JSON.parse(resultStr);\n}\nfunction performJsSyscall(op, arg) {\n    if (typeof Convex === "undefined" || Convex.jsSyscall === void 0) {\n        throw new Error("The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?");\n    }\n    return Convex.jsSyscall(op, arg);\n} //# sourceMappingURL=syscall.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvc3lzY2FsbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFhO0FBQ3dDO0FBQ0E7QUFDOUMsU0FBU0UsZUFBZUMsRUFBRSxFQUFFQyxHQUFHO0lBQ3BDLElBQUksT0FBT0MsV0FBVyxlQUFlQSxPQUFPQyxPQUFPLEtBQUssS0FBSyxHQUFHO1FBQzlELE1BQU0sSUFBSUMsTUFDUjtJQUVKO0lBQ0EsTUFBTUMsWUFBWUgsT0FBT0MsT0FBTyxDQUFDSCxJQUFJTSxLQUFLQyxTQUFTLENBQUNOO0lBQ3BELE9BQU9LLEtBQUtFLEtBQUssQ0FBQ0g7QUFDcEI7QUFDTyxlQUFlSSxvQkFBb0JULEVBQUUsRUFBRUMsR0FBRztJQUMvQyxJQUFJLE9BQU9DLFdBQVcsZUFBZUEsT0FBT1EsWUFBWSxLQUFLLEtBQUssR0FBRztRQUNuRSxNQUFNLElBQUlOLE1BQ1I7SUFFSjtJQUNBLElBQUlDO0lBQ0osSUFBSTtRQUNGQSxZQUFZLE1BQU1ILE9BQU9RLFlBQVksQ0FBQ1YsSUFBSU0sS0FBS0MsU0FBUyxDQUFDTjtJQUMzRCxFQUFFLE9BQU9VLEdBQUc7UUFDVixJQUFJQSxFQUFFQyxJQUFJLEtBQUssS0FBSyxHQUFHO1lBQ3JCLE1BQU1DLFdBQVcsSUFBSWhCLDBEQUFXQSxDQUFDYyxFQUFFRyxPQUFPO1lBQzFDRCxTQUFTRCxJQUFJLEdBQUdkLDhEQUFZQSxDQUFDYSxFQUFFQyxJQUFJO1lBQ25DLE1BQU1DO1FBQ1I7UUFDQSxNQUFNLElBQUlULE1BQU1PLEVBQUVHLE9BQU87SUFDM0I7SUFDQSxPQUFPUixLQUFLRSxLQUFLLENBQUNIO0FBQ3BCO0FBQ08sU0FBU1UsaUJBQWlCZixFQUFFLEVBQUVDLEdBQUc7SUFDdEMsSUFBSSxPQUFPQyxXQUFXLGVBQWVBLE9BQU9jLFNBQVMsS0FBSyxLQUFLLEdBQUc7UUFDaEUsTUFBTSxJQUFJWixNQUNSO0lBRUo7SUFDQSxPQUFPRixPQUFPYyxTQUFTLENBQUNoQixJQUFJQztBQUM5QixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3N5c2NhbGwuanM/MGE5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IENvbnZleEVycm9yIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9lcnJvcnMuanNcIjtcbmltcG9ydCB7IGpzb25Ub0NvbnZleCB9IGZyb20gXCIuLi8uLi92YWx1ZXMvdmFsdWUuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwZXJmb3JtU3lzY2FsbChvcCwgYXJnKSB7XG4gIGlmICh0eXBlb2YgQ29udmV4ID09PSBcInVuZGVmaW5lZFwiIHx8IENvbnZleC5zeXNjYWxsID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlRoZSBDb252ZXggZGF0YWJhc2UgYW5kIGF1dGggb2JqZWN0cyBhcmUgYmVpbmcgdXNlZCBvdXRzaWRlIG9mIGEgQ29udmV4IGJhY2tlbmQuIERpZCB5b3UgbWVhbiB0byB1c2UgYHVzZVF1ZXJ5YCBvciBgdXNlTXV0YXRpb25gIHRvIGNhbGwgYSBDb252ZXggZnVuY3Rpb24/XCJcbiAgICApO1xuICB9XG4gIGNvbnN0IHJlc3VsdFN0ciA9IENvbnZleC5zeXNjYWxsKG9wLCBKU09OLnN0cmluZ2lmeShhcmcpKTtcbiAgcmV0dXJuIEpTT04ucGFyc2UocmVzdWx0U3RyKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwZXJmb3JtQXN5bmNTeXNjYWxsKG9wLCBhcmcpIHtcbiAgaWYgKHR5cGVvZiBDb252ZXggPT09IFwidW5kZWZpbmVkXCIgfHwgQ29udmV4LmFzeW5jU3lzY2FsbCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJUaGUgQ29udmV4IGRhdGFiYXNlIGFuZCBhdXRoIG9iamVjdHMgYXJlIGJlaW5nIHVzZWQgb3V0c2lkZSBvZiBhIENvbnZleCBiYWNrZW5kLiBEaWQgeW91IG1lYW4gdG8gdXNlIGB1c2VRdWVyeWAgb3IgYHVzZU11dGF0aW9uYCB0byBjYWxsIGEgQ29udmV4IGZ1bmN0aW9uP1wiXG4gICAgKTtcbiAgfVxuICBsZXQgcmVzdWx0U3RyO1xuICB0cnkge1xuICAgIHJlc3VsdFN0ciA9IGF3YWl0IENvbnZleC5hc3luY1N5c2NhbGwob3AsIEpTT04uc3RyaW5naWZ5KGFyZykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUuZGF0YSAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zdCByZXRocm93biA9IG5ldyBDb252ZXhFcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgcmV0aHJvd24uZGF0YSA9IGpzb25Ub0NvbnZleChlLmRhdGEpO1xuICAgICAgdGhyb3cgcmV0aHJvd247XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBKU09OLnBhcnNlKHJlc3VsdFN0cik7XG59XG5leHBvcnQgZnVuY3Rpb24gcGVyZm9ybUpzU3lzY2FsbChvcCwgYXJnKSB7XG4gIGlmICh0eXBlb2YgQ29udmV4ID09PSBcInVuZGVmaW5lZFwiIHx8IENvbnZleC5qc1N5c2NhbGwgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVGhlIENvbnZleCBkYXRhYmFzZSBhbmQgYXV0aCBvYmplY3RzIGFyZSBiZWluZyB1c2VkIG91dHNpZGUgb2YgYSBDb252ZXggYmFja2VuZC4gRGlkIHlvdSBtZWFuIHRvIHVzZSBgdXNlUXVlcnlgIG9yIGB1c2VNdXRhdGlvbmAgdG8gY2FsbCBhIENvbnZleCBmdW5jdGlvbj9cIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIENvbnZleC5qc1N5c2NhbGwob3AsIGFyZyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeXNjYWxsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkNvbnZleEVycm9yIiwianNvblRvQ29udmV4IiwicGVyZm9ybVN5c2NhbGwiLCJvcCIsImFyZyIsIkNvbnZleCIsInN5c2NhbGwiLCJFcnJvciIsInJlc3VsdFN0ciIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZSIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJhc3luY1N5c2NhbGwiLCJlIiwiZGF0YSIsInJldGhyb3duIiwibWVzc2FnZSIsInBlcmZvcm1Kc1N5c2NhbGwiLCJqc1N5c2NhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/validate.js':
    /*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/validate.js ***!
  \****************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateArg: () => (/* binding */ validateArg),\n/* harmony export */   validateArgIsInteger: () => (/* binding */ validateArgIsInteger),\n/* harmony export */   validateArgIsNonNegativeInteger: () => (/* binding */ validateArgIsNonNegativeInteger)\n/* harmony export */ });\n\nfunction validateArg(arg, idx, method, argName) {\n    if (arg === void 0) {\n        throw new TypeError(`Must provide arg ${idx} \\`${argName}\\` to \\`${method}\\``);\n    }\n}\nfunction validateArgIsInteger(arg, idx, method, argName) {\n    if (!Number.isInteger(arg)) {\n        throw new TypeError(`Arg ${idx} \\`${argName}\\` to \\`${method}\\` must be an integer`);\n    }\n}\nfunction validateArgIsNonNegativeInteger(arg, idx, method, argName) {\n    if (!Number.isInteger(arg) || arg < 0) {\n        throw new TypeError(`Arg ${idx} \\`${argName}\\` to \\`${method}\\` must be a non-negative integer`);\n    }\n} //# sourceMappingURL=validate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWE7QUFDTixTQUFTQSxZQUFZQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ25ELElBQUlILFFBQVEsS0FBSyxHQUFHO1FBQ2xCLE1BQU0sSUFBSUksVUFDUixDQUFDLGlCQUFpQixFQUFFSCxJQUFJLEdBQUcsRUFBRUUsUUFBUSxRQUFRLEVBQUVELE9BQU8sRUFBRSxDQUFDO0lBRTdEO0FBQ0Y7QUFDTyxTQUFTRyxxQkFBcUJMLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLE9BQU87SUFDNUQsSUFBSSxDQUFDRyxPQUFPQyxTQUFTLENBQUNQLE1BQU07UUFDMUIsTUFBTSxJQUFJSSxVQUNSLENBQUMsSUFBSSxFQUFFSCxJQUFJLEdBQUcsRUFBRUUsUUFBUSxRQUFRLEVBQUVELE9BQU8scUJBQXFCLENBQUM7SUFFbkU7QUFDRjtBQUNPLFNBQVNNLGdDQUFnQ1IsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUN2RSxJQUFJLENBQUNHLE9BQU9DLFNBQVMsQ0FBQ1AsUUFBUUEsTUFBTSxHQUFHO1FBQ3JDLE1BQU0sSUFBSUksVUFDUixDQUFDLElBQUksRUFBRUgsSUFBSSxHQUFHLEVBQUVFLFFBQVEsUUFBUSxFQUFFRCxPQUFPLGlDQUFpQyxDQUFDO0lBRS9FO0FBQ0YsRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvaW1wbC92YWxpZGF0ZS5qcz9kM2M4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQXJnKGFyZywgaWR4LCBtZXRob2QsIGFyZ05hbWUpIHtcbiAgaWYgKGFyZyA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBNdXN0IHByb3ZpZGUgYXJnICR7aWR4fSBcXGAke2FyZ05hbWV9XFxgIHRvIFxcYCR7bWV0aG9kfVxcYGBcbiAgICApO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBcmdJc0ludGVnZXIoYXJnLCBpZHgsIG1ldGhvZCwgYXJnTmFtZSkge1xuICBpZiAoIU51bWJlci5pc0ludGVnZXIoYXJnKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBgQXJnICR7aWR4fSBcXGAke2FyZ05hbWV9XFxgIHRvIFxcYCR7bWV0aG9kfVxcYCBtdXN0IGJlIGFuIGludGVnZXJgXG4gICAgKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQXJnSXNOb25OZWdhdGl2ZUludGVnZXIoYXJnLCBpZHgsIG1ldGhvZCwgYXJnTmFtZSkge1xuICBpZiAoIU51bWJlci5pc0ludGVnZXIoYXJnKSB8fCBhcmcgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBBcmcgJHtpZHh9IFxcYCR7YXJnTmFtZX1cXGAgdG8gXFxgJHttZXRob2R9XFxgIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcmBcbiAgICApO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ2YWxpZGF0ZUFyZyIsImFyZyIsImlkeCIsIm1ldGhvZCIsImFyZ05hbWUiLCJUeXBlRXJyb3IiLCJ2YWxpZGF0ZUFyZ0lzSW50ZWdlciIsIk51bWJlciIsImlzSW50ZWdlciIsInZhbGlkYXRlQXJnSXNOb25OZWdhdGl2ZUludGVnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/validate.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/vector_search_impl.js':
    /*!**************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/vector_search_impl.js ***!
  \**************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExpressionImpl: () => (/* binding */ ExpressionImpl),\n/* harmony export */   VectorQueryImpl: () => (/* binding */ VectorQueryImpl),\n/* harmony export */   filterBuilderImpl: () => (/* binding */ filterBuilderImpl),\n/* harmony export */   serializeExpression: () => (/* binding */ serializeExpression),\n/* harmony export */   setupActionVectorSearch: () => (/* binding */ setupActionVectorSearch)\n/* harmony export */ });\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/index.js");\n/* harmony import */ var _vector_search_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vector_search.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/vector_search.js");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validate.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/validate.js");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../values/value.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\n\n\n\n\nfunction setupActionVectorSearch(requestId) {\n    return async (tableName, indexName, query)=>{\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(tableName, 1, "vectorSearch", "tableName");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(indexName, 2, "vectorSearch", "indexName");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(query, 3, "vectorSearch", "query");\n        if (!query.vector || !Array.isArray(query.vector) || query.vector.length === 0) {\n            throw Error("`vector` must be a non-empty Array in vectorSearch");\n        }\n        return await new VectorQueryImpl(requestId, tableName + "." + indexName, query).collect();\n    };\n}\nclass VectorQueryImpl {\n    constructor(requestId, indexName, query){\n        __publicField(this, "requestId");\n        __publicField(this, "state");\n        this.requestId = requestId;\n        const filters = query.filter ? serializeExpression(query.filter(filterBuilderImpl)) : null;\n        this.state = {\n            type: "preparing",\n            query: {\n                indexName,\n                limit: query.limit,\n                vector: query.vector,\n                expressions: filters\n            }\n        };\n    }\n    async collect() {\n        if (this.state.type === "consumed") {\n            throw new Error("This query is closed and can\'t emit any more values.");\n        }\n        const query = this.state.query;\n        this.state = {\n            type: "consumed"\n        };\n        const { results } = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performAsyncSyscall)("1.0/actions/vectorSearch", {\n            requestId: this.requestId,\n            version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version,\n            query\n        });\n        return results;\n    }\n}\nclass ExpressionImpl extends _vector_search_js__WEBPACK_IMPORTED_MODULE_2__.FilterExpression {\n    constructor(inner){\n        super();\n        __publicField(this, "inner");\n        this.inner = inner;\n    }\n    serialize() {\n        return this.inner;\n    }\n}\nfunction serializeExpression(expr) {\n    if (expr instanceof ExpressionImpl) {\n        return expr.serialize();\n    } else {\n        return {\n            $literal: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_4__.convexOrUndefinedToJson)(expr)\n        };\n    }\n}\nconst filterBuilderImpl = {\n    //  Comparisons  /////////////////////////////////////////////////////////////\n    eq (fieldName, value) {\n        if (typeof fieldName !== "string") {\n            throw new Error("The first argument to `q.eq` must be a field name.");\n        }\n        return new ExpressionImpl({\n            $eq: [\n                serializeExpression(new ExpressionImpl({\n                    $field: fieldName\n                })),\n                serializeExpression(value)\n            ]\n        });\n    },\n    //  Logic  ///////////////////////////////////////////////////////////////////\n    or (...exprs) {\n        return new ExpressionImpl({\n            $or: exprs.map(serializeExpression)\n        });\n    }\n}; //# sourceMappingURL=vector_search_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvdmVjdG9yX3NlYXJjaF9pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDckQ7QUFDVjtBQUdaO0FBQ2U7QUFDb0I7QUFDekQsU0FBU1Usd0JBQXdCQyxTQUFTO0lBQy9DLE9BQU8sT0FBT0MsV0FBV0MsV0FBV0M7UUFDbENOLHlEQUFXQSxDQUFDSSxXQUFXLEdBQUcsZ0JBQWdCO1FBQzFDSix5REFBV0EsQ0FBQ0ssV0FBVyxHQUFHLGdCQUFnQjtRQUMxQ0wseURBQVdBLENBQUNNLE9BQU8sR0FBRyxnQkFBZ0I7UUFDdEMsSUFBSSxDQUFDQSxNQUFNQyxNQUFNLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDSCxNQUFNQyxNQUFNLEtBQUtELE1BQU1DLE1BQU0sQ0FBQ0csTUFBTSxLQUFLLEdBQUc7WUFDOUUsTUFBTUMsTUFBTTtRQUNkO1FBQ0EsT0FBTyxNQUFNLElBQUlDLGdCQUNmVCxXQUNBQyxZQUFZLE1BQU1DLFdBQ2xCQyxPQUNBTyxPQUFPO0lBQ1g7QUFDRjtBQUNPLE1BQU1EO0lBQ1hFLFlBQVlYLFNBQVMsRUFBRUUsU0FBUyxFQUFFQyxLQUFLLENBQUU7UUFDdkNWLGNBQWMsSUFBSSxFQUFFO1FBQ3BCQSxjQUFjLElBQUksRUFBRTtRQUNwQixJQUFJLENBQUNPLFNBQVMsR0FBR0E7UUFDakIsTUFBTVksVUFBVVQsTUFBTVUsTUFBTSxHQUFHQyxvQkFBb0JYLE1BQU1VLE1BQU0sQ0FBQ0Usc0JBQXNCO1FBQ3RGLElBQUksQ0FBQ0MsS0FBSyxHQUFHO1lBQ1hDLE1BQU07WUFDTmQsT0FBTztnQkFDTEQ7Z0JBQ0FnQixPQUFPZixNQUFNZSxLQUFLO2dCQUNsQmQsUUFBUUQsTUFBTUMsTUFBTTtnQkFDcEJlLGFBQWFQO1lBQ2Y7UUFDRjtJQUNGO0lBQ0EsTUFBTUYsVUFBVTtRQUNkLElBQUksSUFBSSxDQUFDTSxLQUFLLENBQUNDLElBQUksS0FBSyxZQUFZO1lBQ2xDLE1BQU0sSUFBSVQsTUFBTTtRQUNsQjtRQUNBLE1BQU1MLFFBQVEsSUFBSSxDQUFDYSxLQUFLLENBQUNiLEtBQUs7UUFDOUIsSUFBSSxDQUFDYSxLQUFLLEdBQUc7WUFBRUMsTUFBTTtRQUFXO1FBQ2hDLE1BQU0sRUFBRUcsT0FBTyxFQUFFLEdBQUcsTUFBTTFCLGdFQUFtQkEsQ0FBQyw0QkFBNEI7WUFDeEVNLFdBQVcsSUFBSSxDQUFDQSxTQUFTO1lBQ3pCTCxPQUFPQSxnREFBQUE7WUFDUFE7UUFDRjtRQUNBLE9BQU9pQjtJQUNUO0FBQ0Y7QUFDTyxNQUFNQyx1QkFBdUJ6QiwrREFBZ0JBO0lBQ2xEZSxZQUFZVyxLQUFLLENBQUU7UUFDakIsS0FBSztRQUNMN0IsY0FBYyxJQUFJLEVBQUU7UUFDcEIsSUFBSSxDQUFDNkIsS0FBSyxHQUFHQTtJQUNmO0lBQ0FDLFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQ0QsS0FBSztJQUNuQjtBQUNGO0FBQ08sU0FBU1Isb0JBQW9CVSxJQUFJO0lBQ3RDLElBQUlBLGdCQUFnQkgsZ0JBQWdCO1FBQ2xDLE9BQU9HLEtBQUtELFNBQVM7SUFDdkIsT0FBTztRQUNMLE9BQU87WUFBRUUsVUFBVTNCLHlFQUF1QkEsQ0FBQzBCO1FBQU07SUFDbkQ7QUFDRjtBQUNPLE1BQU1ULG9CQUFvQjtJQUMvQiw4RUFBOEU7SUFDOUVXLElBQUdDLFNBQVMsRUFBRXRDLEtBQUs7UUFDakIsSUFBSSxPQUFPc0MsY0FBYyxVQUFVO1lBQ2pDLE1BQU0sSUFBSW5CLE1BQU07UUFDbEI7UUFDQSxPQUFPLElBQUlhLGVBQWU7WUFDeEJPLEtBQUs7Z0JBQ0hkLG9CQUFvQixJQUFJTyxlQUFlO29CQUFFUSxRQUFRRjtnQkFBVTtnQkFDM0RiLG9CQUFvQnpCO2FBQ3JCO1FBQ0g7SUFDRjtJQUNBLDhFQUE4RTtJQUM5RXlDLElBQUcsR0FBR0MsS0FBSztRQUNULE9BQU8sSUFBSVYsZUFBZTtZQUFFVyxLQUFLRCxNQUFNRSxHQUFHLENBQUNuQjtRQUFxQjtJQUNsRTtBQUNGLEVBQUUsQ0FDRiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvaW1wbC92ZWN0b3Jfc2VhcmNoX2ltcGwuanM/MjA4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG5pbXBvcnQgeyBwZXJmb3JtQXN5bmNTeXNjYWxsIH0gZnJvbSBcIi4vc3lzY2FsbC5qc1wiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuLi8uLi9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgRmlsdGVyRXhwcmVzc2lvblxufSBmcm9tIFwiLi4vdmVjdG9yX3NlYXJjaC5qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVBcmcgfSBmcm9tIFwiLi92YWxpZGF0ZS5qc1wiO1xuaW1wb3J0IHsgY29udmV4T3JVbmRlZmluZWRUb0pzb24gfSBmcm9tIFwiLi4vLi4vdmFsdWVzL3ZhbHVlLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gc2V0dXBBY3Rpb25WZWN0b3JTZWFyY2gocmVxdWVzdElkKSB7XG4gIHJldHVybiBhc3luYyAodGFibGVOYW1lLCBpbmRleE5hbWUsIHF1ZXJ5KSA9PiB7XG4gICAgdmFsaWRhdGVBcmcodGFibGVOYW1lLCAxLCBcInZlY3RvclNlYXJjaFwiLCBcInRhYmxlTmFtZVwiKTtcbiAgICB2YWxpZGF0ZUFyZyhpbmRleE5hbWUsIDIsIFwidmVjdG9yU2VhcmNoXCIsIFwiaW5kZXhOYW1lXCIpO1xuICAgIHZhbGlkYXRlQXJnKHF1ZXJ5LCAzLCBcInZlY3RvclNlYXJjaFwiLCBcInF1ZXJ5XCIpO1xuICAgIGlmICghcXVlcnkudmVjdG9yIHx8ICFBcnJheS5pc0FycmF5KHF1ZXJ5LnZlY3RvcikgfHwgcXVlcnkudmVjdG9yLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJgdmVjdG9yYCBtdXN0IGJlIGEgbm9uLWVtcHR5IEFycmF5IGluIHZlY3RvclNlYXJjaFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBWZWN0b3JRdWVyeUltcGwoXG4gICAgICByZXF1ZXN0SWQsXG4gICAgICB0YWJsZU5hbWUgKyBcIi5cIiArIGluZGV4TmFtZSxcbiAgICAgIHF1ZXJ5XG4gICAgKS5jb2xsZWN0KCk7XG4gIH07XG59XG5leHBvcnQgY2xhc3MgVmVjdG9yUXVlcnlJbXBsIHtcbiAgY29uc3RydWN0b3IocmVxdWVzdElkLCBpbmRleE5hbWUsIHF1ZXJ5KSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlcXVlc3RJZFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwic3RhdGVcIik7XG4gICAgdGhpcy5yZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgY29uc3QgZmlsdGVycyA9IHF1ZXJ5LmZpbHRlciA/IHNlcmlhbGl6ZUV4cHJlc3Npb24ocXVlcnkuZmlsdGVyKGZpbHRlckJ1aWxkZXJJbXBsKSkgOiBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0eXBlOiBcInByZXBhcmluZ1wiLFxuICAgICAgcXVlcnk6IHtcbiAgICAgICAgaW5kZXhOYW1lLFxuICAgICAgICBsaW1pdDogcXVlcnkubGltaXQsXG4gICAgICAgIHZlY3RvcjogcXVlcnkudmVjdG9yLFxuICAgICAgICBleHByZXNzaW9uczogZmlsdGVyc1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgYXN5bmMgY29sbGVjdCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS50eXBlID09PSBcImNvbnN1bWVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgcXVlcnkgaXMgY2xvc2VkIGFuZCBjYW4ndCBlbWl0IGFueSBtb3JlIHZhbHVlcy5cIik7XG4gICAgfVxuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5zdGF0ZS5xdWVyeTtcbiAgICB0aGlzLnN0YXRlID0geyB0eXBlOiBcImNvbnN1bWVkXCIgfTtcbiAgICBjb25zdCB7IHJlc3VsdHMgfSA9IGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXCIxLjAvYWN0aW9ucy92ZWN0b3JTZWFyY2hcIiwge1xuICAgICAgcmVxdWVzdElkOiB0aGlzLnJlcXVlc3RJZCxcbiAgICAgIHZlcnNpb24sXG4gICAgICBxdWVyeVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG59XG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvbkltcGwgZXh0ZW5kcyBGaWx0ZXJFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoaW5uZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpbm5lclwiKTtcbiAgICB0aGlzLmlubmVyID0gaW5uZXI7XG4gIH1cbiAgc2VyaWFsaXplKCkge1xuICAgIHJldHVybiB0aGlzLmlubmVyO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplRXhwcmVzc2lvbihleHByKSB7XG4gIGlmIChleHByIGluc3RhbmNlb2YgRXhwcmVzc2lvbkltcGwpIHtcbiAgICByZXR1cm4gZXhwci5zZXJpYWxpemUoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyAkbGl0ZXJhbDogY29udmV4T3JVbmRlZmluZWRUb0pzb24oZXhwcikgfTtcbiAgfVxufVxuZXhwb3J0IGNvbnN0IGZpbHRlckJ1aWxkZXJJbXBsID0ge1xuICAvLyAgQ29tcGFyaXNvbnMgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZXEoZmllbGROYW1lLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgZmllbGROYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZmlyc3QgYXJndW1lbnQgdG8gYHEuZXFgIG11c3QgYmUgYSBmaWVsZCBuYW1lLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFeHByZXNzaW9uSW1wbCh7XG4gICAgICAkZXE6IFtcbiAgICAgICAgc2VyaWFsaXplRXhwcmVzc2lvbihuZXcgRXhwcmVzc2lvbkltcGwoeyAkZmllbGQ6IGZpZWxkTmFtZSB9KSksXG4gICAgICAgIHNlcmlhbGl6ZUV4cHJlc3Npb24odmFsdWUpXG4gICAgICBdXG4gICAgfSk7XG4gIH0sXG4gIC8vICBMb2dpYyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBvciguLi5leHBycykge1xuICAgIHJldHVybiBuZXcgRXhwcmVzc2lvbkltcGwoeyAkb3I6IGV4cHJzLm1hcChzZXJpYWxpemVFeHByZXNzaW9uKSB9KTtcbiAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlY3Rvcl9zZWFyY2hfaW1wbC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19wdWJsaWNGaWVsZCIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJ2ZXJzaW9uIiwiRmlsdGVyRXhwcmVzc2lvbiIsInZhbGlkYXRlQXJnIiwiY29udmV4T3JVbmRlZmluZWRUb0pzb24iLCJzZXR1cEFjdGlvblZlY3RvclNlYXJjaCIsInJlcXVlc3RJZCIsInRhYmxlTmFtZSIsImluZGV4TmFtZSIsInF1ZXJ5IiwidmVjdG9yIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiRXJyb3IiLCJWZWN0b3JRdWVyeUltcGwiLCJjb2xsZWN0IiwiY29uc3RydWN0b3IiLCJmaWx0ZXJzIiwiZmlsdGVyIiwic2VyaWFsaXplRXhwcmVzc2lvbiIsImZpbHRlckJ1aWxkZXJJbXBsIiwic3RhdGUiLCJ0eXBlIiwibGltaXQiLCJleHByZXNzaW9ucyIsInJlc3VsdHMiLCJFeHByZXNzaW9uSW1wbCIsImlubmVyIiwic2VyaWFsaXplIiwiZXhwciIsIiRsaXRlcmFsIiwiZXEiLCJmaWVsZE5hbWUiLCIkZXEiLCIkZmllbGQiLCJvciIsImV4cHJzIiwiJG9yIiwibWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/vector_search_impl.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/index.js':
    /*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/index.js ***!
  \********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpRouter: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_6__.HttpRouter),\n/* harmony export */   ROUTABLE_HTTP_METHODS: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_6__.ROUTABLE_HTTP_METHODS),\n/* harmony export */   SearchFilter: () => (/* reexport safe */ _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_3__.SearchFilter),\n/* harmony export */   actionGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.actionGeneric),\n/* harmony export */   anyApi: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.anyApi),\n/* harmony export */   componentsGeneric: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.componentsGeneric),\n/* harmony export */   createFunctionHandle: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.createFunctionHandle),\n/* harmony export */   cronJobs: () => (/* reexport safe */ _cron_js__WEBPACK_IMPORTED_MODULE_5__.cronJobs),\n/* harmony export */   currentSystemUdfInComponent: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.currentSystemUdfInComponent),\n/* harmony export */   defineApp: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.defineApp),\n/* harmony export */   defineComponent: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.defineComponent),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_9__.defineSchema),\n/* harmony export */   defineTable: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_9__.defineTable),\n/* harmony export */   filterApi: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.filterApi),\n/* harmony export */   getFunctionAddress: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.getFunctionAddress),\n/* harmony export */   getFunctionName: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.getFunctionName),\n/* harmony export */   httpActionGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.httpActionGeneric),\n/* harmony export */   httpRouter: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_6__.httpRouter),\n/* harmony export */   internalActionGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.internalActionGeneric),\n/* harmony export */   internalMutationGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.internalMutationGeneric),\n/* harmony export */   internalQueryGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.internalQueryGeneric),\n/* harmony export */   makeFunctionReference: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.makeFunctionReference),\n/* harmony export */   mutationGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.mutationGeneric),\n/* harmony export */   paginationOptsValidator: () => (/* reexport safe */ _pagination_js__WEBPACK_IMPORTED_MODULE_2__.paginationOptsValidator),\n/* harmony export */   queryGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.queryGeneric)\n/* harmony export */ });\n/* harmony import */ var _database_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./database.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/database.js");\n/* harmony import */ var _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./impl/registration_impl.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/registration_impl.js");\n/* harmony import */ var _pagination_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pagination.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/pagination.js");\n/* harmony import */ var _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./search_filter_builder.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/search_filter_builder.js");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storage.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/storage.js");\n/* harmony import */ var _cron_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cron.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/cron.js");\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./router.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/router.js");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/api.js");\n/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/components/index.js");\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./schema.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/schema.js");\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWE7QUFDaUI7QUFTTztBQUNMO0FBQ1c7QUFDZDtBQUNRO0FBQ3VDO0FBTTFEO0FBTWE7QUFDcUM7QUFDVDtBQUNILENBQ3hELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbmRleC5qcz9mMDFlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZGF0YWJhc2UuanNcIjtcbmV4cG9ydCB7XG4gIGFjdGlvbkdlbmVyaWMsXG4gIGh0dHBBY3Rpb25HZW5lcmljLFxuICBtdXRhdGlvbkdlbmVyaWMsXG4gIHF1ZXJ5R2VuZXJpYyxcbiAgaW50ZXJuYWxBY3Rpb25HZW5lcmljLFxuICBpbnRlcm5hbE11dGF0aW9uR2VuZXJpYyxcbiAgaW50ZXJuYWxRdWVyeUdlbmVyaWNcbn0gZnJvbSBcIi4vaW1wbC9yZWdpc3RyYXRpb25faW1wbC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFnaW5hdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2VhcmNoX2ZpbHRlcl9idWlsZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zdG9yYWdlLmpzXCI7XG5leHBvcnQgeyBjcm9uSm9icyB9IGZyb20gXCIuL2Nyb24uanNcIjtcbmV4cG9ydCB7IGh0dHBSb3V0ZXIsIEh0dHBSb3V0ZXIsIFJPVVRBQkxFX0hUVFBfTUVUSE9EUyB9IGZyb20gXCIuL3JvdXRlci5qc1wiO1xuZXhwb3J0IHtcbiAgYW55QXBpLFxuICBnZXRGdW5jdGlvbk5hbWUsXG4gIG1ha2VGdW5jdGlvblJlZmVyZW5jZSxcbiAgZmlsdGVyQXBpXG59IGZyb20gXCIuL2FwaS5qc1wiO1xuZXhwb3J0IHtcbiAgZGVmaW5lQXBwLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIGNvbXBvbmVudHNHZW5lcmljLFxuICBjcmVhdGVGdW5jdGlvbkhhbmRsZVxufSBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBjdXJyZW50U3lzdGVtVWRmSW5Db21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBnZXRGdW5jdGlvbkFkZHJlc3MgfSBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBkZWZpbmVUYWJsZSwgZGVmaW5lU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJhY3Rpb25HZW5lcmljIiwiaHR0cEFjdGlvbkdlbmVyaWMiLCJtdXRhdGlvbkdlbmVyaWMiLCJxdWVyeUdlbmVyaWMiLCJpbnRlcm5hbEFjdGlvbkdlbmVyaWMiLCJpbnRlcm5hbE11dGF0aW9uR2VuZXJpYyIsImludGVybmFsUXVlcnlHZW5lcmljIiwiY3JvbkpvYnMiLCJodHRwUm91dGVyIiwiSHR0cFJvdXRlciIsIlJPVVRBQkxFX0hUVFBfTUVUSE9EUyIsImFueUFwaSIsImdldEZ1bmN0aW9uTmFtZSIsIm1ha2VGdW5jdGlvblJlZmVyZW5jZSIsImZpbHRlckFwaSIsImRlZmluZUFwcCIsImRlZmluZUNvbXBvbmVudCIsImNvbXBvbmVudHNHZW5lcmljIiwiY3JlYXRlRnVuY3Rpb25IYW5kbGUiLCJjdXJyZW50U3lzdGVtVWRmSW5Db21wb25lbnQiLCJnZXRGdW5jdGlvbkFkZHJlc3MiLCJkZWZpbmVUYWJsZSIsImRlZmluZVNjaGVtYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/index.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/index_range_builder.js':
    /*!**********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/index_range_builder.js ***!
  \**********************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexRange: () => (/* binding */ IndexRange)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\nclass IndexRange {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, "_isIndexRange");\n    }\n} //# sourceMappingURL=index_range_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2luZGV4X3JhbmdlX2J1aWxkZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhO0FBQ2IsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0MsUUFBVUgsZ0JBQWdCQyxLQUFLLE9BQU9DLFFBQVEsV0FBV0EsTUFBTSxLQUFLQSxLQUFLQztBQUNqRyxNQUFNSztJQUNYOztHQUVDLEdBQ0RDLGFBQWM7UUFDWixxQ0FBcUM7UUFDckNGLGNBQWMsSUFBSSxFQUFFO0lBQ3RCO0FBQ0YsRUFDQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvaW5kZXhfcmFuZ2VfYnVpbGRlci5qcz83ZDJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbmV4cG9ydCBjbGFzcyBJbmRleFJhbmdlIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gUHJvcGVydHkgZm9yIG5vbWluYWwgdHlwZSBzdXBwb3J0LlxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfaXNJbmRleFJhbmdlXCIpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleF9yYW5nZV9idWlsZGVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiSW5kZXhSYW5nZSIsImNvbnN0cnVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/index_range_builder.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/pagination.js':
    /*!*************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/pagination.js ***!
  \*************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   paginationOptsValidator: () => (/* binding */ paginationOptsValidator)\n/* harmony export */ });\n/* harmony import */ var _values_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/validator.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validator.js");\n\n\nconst paginationOptsValidator = _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n    numItems: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number(),\n    cursor: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.union(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.null()),\n    endCursor: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.union(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.null())),\n    id: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number()),\n    maximumRowsRead: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number()),\n    maximumBytesRead: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number())\n}); //# sourceMappingURL=pagination.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL3BhZ2luYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBYTtBQUM4QjtBQUNwQyxNQUFNQywwQkFBMEJELG1EQUFDQSxDQUFDRSxNQUFNLENBQUM7SUFDOUNDLFVBQVVILG1EQUFDQSxDQUFDSSxNQUFNO0lBQ2xCQyxRQUFRTCxtREFBQ0EsQ0FBQ00sS0FBSyxDQUFDTixtREFBQ0EsQ0FBQ08sTUFBTSxJQUFJUCxtREFBQ0EsQ0FBQ1EsSUFBSTtJQUNsQ0MsV0FBV1QsbURBQUNBLENBQUNVLFFBQVEsQ0FBQ1YsbURBQUNBLENBQUNNLEtBQUssQ0FBQ04sbURBQUNBLENBQUNPLE1BQU0sSUFBSVAsbURBQUNBLENBQUNRLElBQUk7SUFDaERHLElBQUlYLG1EQUFDQSxDQUFDVSxRQUFRLENBQUNWLG1EQUFDQSxDQUFDSSxNQUFNO0lBQ3ZCUSxpQkFBaUJaLG1EQUFDQSxDQUFDVSxRQUFRLENBQUNWLG1EQUFDQSxDQUFDSSxNQUFNO0lBQ3BDUyxrQkFBa0JiLG1EQUFDQSxDQUFDVSxRQUFRLENBQUNWLG1EQUFDQSxDQUFDSSxNQUFNO0FBQ3ZDLEdBQUcsQ0FDSCxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvcGFnaW5hdGlvbi5qcz8wMTVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgdiB9IGZyb20gXCIuLi92YWx1ZXMvdmFsaWRhdG9yLmpzXCI7XG5leHBvcnQgY29uc3QgcGFnaW5hdGlvbk9wdHNWYWxpZGF0b3IgPSB2Lm9iamVjdCh7XG4gIG51bUl0ZW1zOiB2Lm51bWJlcigpLFxuICBjdXJzb3I6IHYudW5pb24odi5zdHJpbmcoKSwgdi5udWxsKCkpLFxuICBlbmRDdXJzb3I6IHYub3B0aW9uYWwodi51bmlvbih2LnN0cmluZygpLCB2Lm51bGwoKSkpLFxuICBpZDogdi5vcHRpb25hbCh2Lm51bWJlcigpKSxcbiAgbWF4aW11bVJvd3NSZWFkOiB2Lm9wdGlvbmFsKHYubnVtYmVyKCkpLFxuICBtYXhpbXVtQnl0ZXNSZWFkOiB2Lm9wdGlvbmFsKHYubnVtYmVyKCkpXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2luYXRpb24uanMubWFwXG4iXSwibmFtZXMiOlsidiIsInBhZ2luYXRpb25PcHRzVmFsaWRhdG9yIiwib2JqZWN0IiwibnVtSXRlbXMiLCJudW1iZXIiLCJjdXJzb3IiLCJ1bmlvbiIsInN0cmluZyIsIm51bGwiLCJlbmRDdXJzb3IiLCJvcHRpb25hbCIsImlkIiwibWF4aW11bVJvd3NSZWFkIiwibWF4aW11bUJ5dGVzUmVhZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/pagination.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/router.js':
    /*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/router.js ***!
  \*********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpRouter: () => (/* binding */ HttpRouter),\n/* harmony export */   ROUTABLE_HTTP_METHODS: () => (/* binding */ ROUTABLE_HTTP_METHODS),\n/* harmony export */   httpRouter: () => (/* binding */ httpRouter),\n/* harmony export */   normalizeMethod: () => (/* binding */ normalizeMethod)\n/* harmony export */ });\n/* harmony import */ var _impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./impl/syscall.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/impl/syscall.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\nconst ROUTABLE_HTTP_METHODS = [\n    "GET",\n    "POST",\n    "PUT",\n    "DELETE",\n    "OPTIONS",\n    "PATCH"\n];\nfunction normalizeMethod(method) {\n    if (method === "HEAD") return "GET";\n    return method;\n}\nconst httpRouter = ()=>new HttpRouter();\nclass HttpRouter {\n    constructor(){\n        __publicField(this, "exactRoutes", /* @__PURE__ */ new Map());\n        __publicField(this, "prefixRoutes", /* @__PURE__ */ new Map());\n        __publicField(this, "isRouter", true);\n        /**\n     * Specify an HttpAction to be used to respond to requests\n     * for an HTTP method (e.g. "GET") and a path or pathPrefix.\n     *\n     * Paths must begin with a slash. Path prefixes must also end in a slash.\n     *\n     * ```js\n     * // matches `/profile` (but not `/profile/`)\n     * http.route({ path: "/profile", method: "GET", handler: getProfile})\n     *\n     * // matches `/profiles/`, `/profiles/abc`, and `/profiles/a/c/b` (but not `/profile`)\n     * http.route({ pathPrefix: "/profile/", method: "GET", handler: getProfile})\n     * ```\n     */ __publicField(this, "route", (spec)=>{\n            if (!spec.handler) throw new Error(`route requires handler`);\n            if (!spec.method) throw new Error(`route requires method`);\n            const { method, handler } = spec;\n            if (!ROUTABLE_HTTP_METHODS.includes(method)) {\n                throw new Error(`\'${method}\' is not an allowed HTTP method (like GET, POST, PUT etc.)`);\n            }\n            if ("path" in spec) {\n                if ("pathPrefix" in spec) {\n                    throw new Error(`Invalid httpRouter route: cannot contain both \'path\' and \'pathPrefix\'`);\n                }\n                if (!spec.path.startsWith("/")) {\n                    throw new Error(`path \'${spec.path}\' does not start with a /`);\n                }\n                if (spec.path.startsWith("/.files/") || spec.path === "/.files") {\n                    throw new Error(`path \'${spec.path}\' is reserved`);\n                }\n                const methods = this.exactRoutes.has(spec.path) ? this.exactRoutes.get(spec.path) : /* @__PURE__ */ new Map();\n                if (methods.has(method)) {\n                    throw new Error(`Path \'${spec.path}\' for method ${method} already in use`);\n                }\n                methods.set(method, handler);\n                this.exactRoutes.set(spec.path, methods);\n            } else if ("pathPrefix" in spec) {\n                if (!spec.pathPrefix.startsWith("/")) {\n                    throw new Error(`pathPrefix \'${spec.pathPrefix}\' does not start with a /`);\n                }\n                if (!spec.pathPrefix.endsWith("/")) {\n                    throw new Error(`pathPrefix ${spec.pathPrefix} must end with a /`);\n                }\n                if (spec.pathPrefix.startsWith("/.files/")) {\n                    throw new Error(`pathPrefix \'${spec.pathPrefix}\' is reserved`);\n                }\n                const prefixes = this.prefixRoutes.get(method) || /* @__PURE__ */ new Map();\n                if (prefixes.has(spec.pathPrefix)) {\n                    throw new Error(`${spec.method} pathPrefix ${spec.pathPrefix} is already defined`);\n                }\n                prefixes.set(spec.pathPrefix, handler);\n                this.prefixRoutes.set(method, prefixes);\n            } else {\n                throw new Error(`Invalid httpRouter route entry: must contain either field \'path\' or \'pathPrefix\'`);\n            }\n        });\n        /**\n     * Returns a list of routed HTTP actions.\n     *\n     * These are used to populate the list of routes shown in the Functions page of the Convex dashboard.\n     *\n     * @returns - an array of [path, method, endpoint] tuples.\n     */ __publicField(this, "getRoutes", ()=>{\n            const exactPaths = [\n                ...this.exactRoutes.keys()\n            ].sort();\n            const exact = exactPaths.flatMap((path)=>[\n                    ...this.exactRoutes.get(path).keys()\n                ].sort().map((method)=>[\n                        path,\n                        method,\n                        this.exactRoutes.get(path).get(method)\n                    ]));\n            const prefixPathMethods = [\n                ...this.prefixRoutes.keys()\n            ].sort();\n            const prefixes = prefixPathMethods.flatMap((method)=>[\n                    ...this.prefixRoutes.get(method).keys()\n                ].sort().map((pathPrefix)=>[\n                        `${pathPrefix}*`,\n                        method,\n                        this.prefixRoutes.get(method).get(pathPrefix)\n                    ]));\n            return [\n                ...exact,\n                ...prefixes\n            ];\n        });\n        /**\n     * Returns the appropriate HTTP action and its routed request path and method.\n     *\n     * The path and method returned are used for logging and metrics, and should\n     * match up with one of the routes returned by `getRoutes`.\n     *\n     * For example,\n     *\n     * ```js\n     * http.route({ pathPrefix: "/profile/", method: "GET", handler: getProfile});\n     *\n     * http.lookup("/profile/abc", "GET") // returns [getProfile, "GET", "/profile/*"]\n     *```\n     *\n     * @returns - a tuple [{@link PublicHttpAction}, method, path] or null.\n     */ __publicField(this, "lookup", (path, method)=>{\n            method = normalizeMethod(method);\n            const exactMatch = this.exactRoutes.get(path)?.get(method);\n            if (exactMatch) return [\n                exactMatch,\n                method,\n                path\n            ];\n            const prefixes = this.prefixRoutes.get(method) || /* @__PURE__ */ new Map();\n            const prefixesSorted = [\n                ...prefixes.entries()\n            ].sort(([prefixA, _a], [prefixB, _b])=>prefixB.length - prefixA.length);\n            for (const [pathPrefix, endpoint] of prefixesSorted){\n                if (path.startsWith(pathPrefix)) {\n                    return [\n                        endpoint,\n                        method,\n                        `${pathPrefix}*`\n                    ];\n                }\n            }\n            return null;\n        });\n        /**\n     * Given a JSON string representation of a Request object, return a Response\n     * by routing the request and running the appropriate endpoint or returning\n     * a 404 Response.\n     *\n     * @param argsStr - a JSON string representing a Request object.\n     *\n     * @returns - a Response object.\n     */ __publicField(this, "runRequest", async (argsStr, requestRoute)=>{\n            const request = (0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performJsSyscall)("requestFromConvexJson", {\n                convexJson: JSON.parse(argsStr)\n            });\n            let pathname = requestRoute;\n            if (!pathname || typeof pathname !== "string") {\n                pathname = new URL(request.url).pathname;\n            }\n            const method = request.method;\n            const match = this.lookup(pathname, method);\n            if (!match) {\n                const response2 = new Response(`No HttpAction routed for ${pathname}`, {\n                    status: 404\n                });\n                return JSON.stringify((0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performJsSyscall)("convexJsonFromResponse", {\n                    response: response2\n                }));\n            }\n            const [endpoint, _method, _path] = match;\n            const response = await endpoint.invokeHttpAction(request);\n            return JSON.stringify((0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performJsSyscall)("convexJsonFromResponse", {\n                response\n            }));\n        });\n    }\n} //# sourceMappingURL=router.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/router.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/schema.js':
    /*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/schema.js ***!
  \*********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaDefinition: () => (/* binding */ SchemaDefinition),\n/* harmony export */   TableDefinition: () => (/* binding */ TableDefinition),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   defineTable: () => (/* binding */ defineTable)\n/* harmony export */ });\n/* harmony import */ var _values_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/validator.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validator.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\nclass TableDefinition {\n    /**\n   * @internal\n   */ constructor(documentType){\n        __publicField(this, "indexes");\n        __publicField(this, "stagedDbIndexes");\n        __publicField(this, "searchIndexes");\n        __publicField(this, "stagedSearchIndexes");\n        __publicField(this, "vectorIndexes");\n        __publicField(this, "stagedVectorIndexes");\n        // The type of documents stored in this table.\n        __publicField(this, "validator");\n        this.indexes = [];\n        this.stagedDbIndexes = [];\n        this.searchIndexes = [];\n        this.stagedSearchIndexes = [];\n        this.vectorIndexes = [];\n        this.stagedVectorIndexes = [];\n        this.validator = documentType;\n    }\n    /**\n   * This API is experimental: it may change or disappear.\n   *\n   * Returns indexes defined on this table.\n   * Intended for the advanced use cases of dynamically deciding which index to use for a query.\n   * If you think you need this, please chime in on ths issue in the Convex JS GitHub repo.\n   * https://github.com/get-convex/convex-js/issues/49\n   */ " indexes"() {\n        return this.indexes;\n    }\n    index(name, indexConfig) {\n        if (Array.isArray(indexConfig)) {\n            this.indexes.push({\n                indexDescriptor: name,\n                fields: indexConfig\n            });\n        } else if (indexConfig.staged) {\n            this.stagedDbIndexes.push({\n                indexDescriptor: name,\n                fields: indexConfig.fields\n            });\n        } else {\n            this.indexes.push({\n                indexDescriptor: name,\n                fields: indexConfig.fields\n            });\n        }\n        return this;\n    }\n    searchIndex(name, indexConfig) {\n        if (indexConfig.staged) {\n            this.stagedSearchIndexes.push({\n                indexDescriptor: name,\n                searchField: indexConfig.searchField,\n                filterFields: indexConfig.filterFields || []\n            });\n        } else {\n            this.searchIndexes.push({\n                indexDescriptor: name,\n                searchField: indexConfig.searchField,\n                filterFields: indexConfig.filterFields || []\n            });\n        }\n        return this;\n    }\n    vectorIndex(name, indexConfig) {\n        if (indexConfig.staged) {\n            this.stagedVectorIndexes.push({\n                indexDescriptor: name,\n                vectorField: indexConfig.vectorField,\n                dimensions: indexConfig.dimensions,\n                filterFields: indexConfig.filterFields || []\n            });\n        } else {\n            this.vectorIndexes.push({\n                indexDescriptor: name,\n                vectorField: indexConfig.vectorField,\n                dimensions: indexConfig.dimensions,\n                filterFields: indexConfig.filterFields || []\n            });\n        }\n        return this;\n    }\n    /**\n   * Work around for https://github.com/microsoft/TypeScript/issues/57035\n   */ self() {\n        return this;\n    }\n    /**\n   * Export the contents of this definition.\n   *\n   * This is called internally by the Convex framework.\n   * @internal\n   */ export() {\n        const documentType = this.validator.json;\n        if (typeof documentType !== "object") {\n            throw new Error("Invalid validator: please make sure that the parameter of `defineTable` is valid (see https://docs.convex.dev/database/schemas)");\n        }\n        return {\n            indexes: this.indexes,\n            stagedDbIndexes: this.stagedDbIndexes,\n            searchIndexes: this.searchIndexes,\n            stagedSearchIndexes: this.stagedSearchIndexes,\n            vectorIndexes: this.vectorIndexes,\n            stagedVectorIndexes: this.stagedVectorIndexes,\n            documentType\n        };\n    }\n}\nfunction defineTable(documentSchema) {\n    if ((0,_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.isValidator)(documentSchema)) {\n        return new TableDefinition(documentSchema);\n    } else {\n        return new TableDefinition(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object(documentSchema));\n    }\n}\nclass SchemaDefinition {\n    /**\n   * @internal\n   */ constructor(tables, options){\n        __publicField(this, "tables");\n        __publicField(this, "strictTableNameTypes");\n        __publicField(this, "schemaValidation");\n        this.tables = tables;\n        this.schemaValidation = options?.schemaValidation === void 0 ? true : options.schemaValidation;\n    }\n    /**\n   * Export the contents of this definition.\n   *\n   * This is called internally by the Convex framework.\n   * @internal\n   */ export() {\n        return JSON.stringify({\n            tables: Object.entries(this.tables).map(([tableName, definition])=>{\n                const { indexes, stagedDbIndexes, searchIndexes, stagedSearchIndexes, vectorIndexes, stagedVectorIndexes, documentType } = definition.export();\n                return {\n                    tableName,\n                    indexes,\n                    stagedDbIndexes,\n                    searchIndexes,\n                    stagedSearchIndexes,\n                    vectorIndexes,\n                    stagedVectorIndexes,\n                    documentType\n                };\n            }),\n            schemaValidation: this.schemaValidation\n        });\n    }\n}\nfunction defineSchema(schema, options) {\n    return new SchemaDefinition(schema, options);\n}\nconst _systemSchema = defineSchema({\n    _scheduled_functions: defineTable({\n        name: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(),\n        args: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.array(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.any()),\n        scheduledTime: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.float64(),\n        completedTime: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.float64()),\n        state: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.union(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal("pending")\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal("inProgress")\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal("success")\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal("failed"),\n            error: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string()\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal("canceled")\n        }))\n    }),\n    _storage: defineTable({\n        sha256: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(),\n        size: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.float64(),\n        contentType: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string())\n    })\n}); //# sourceMappingURL=schema.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/schema.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/search_filter_builder.js':
    /*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/search_filter_builder.js ***!
  \************************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchFilter: () => (/* binding */ SearchFilter)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\nclass SearchFilter {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, "_isSearchFilter");\n    }\n} //# sourceMappingURL=search_filter_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL3NlYXJjaF9maWx0ZXJfYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYixJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLGtCQUFrQixDQUFDQyxLQUFLQyxLQUFLQyxRQUFVRCxPQUFPRCxNQUFNSixVQUFVSSxLQUFLQyxLQUFLO1FBQUVFLFlBQVk7UUFBTUMsY0FBYztRQUFNQyxVQUFVO1FBQU1IO0lBQU0sS0FBS0YsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO0FBQzFKLElBQUlJLGdCQUFnQixDQUFDTixLQUFLQyxLQUFLQyxRQUFVSCxnQkFBZ0JDLEtBQUssT0FBT0MsUUFBUSxXQUFXQSxNQUFNLEtBQUtBLEtBQUtDO0FBQ2pHLE1BQU1LO0lBQ1g7O0dBRUMsR0FDREMsYUFBYztRQUNaLHFDQUFxQztRQUNyQ0YsY0FBYyxJQUFJLEVBQUU7SUFDdEI7QUFDRixFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9zZWFyY2hfZmlsdGVyX2J1aWxkZXIuanM/MzM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG5leHBvcnQgY2xhc3MgU2VhcmNoRmlsdGVyIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gUHJvcGVydHkgZm9yIG5vbWluYWwgdHlwZSBzdXBwb3J0LlxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfaXNTZWFyY2hGaWx0ZXJcIik7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlYXJjaF9maWx0ZXJfYnVpbGRlci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19wdWJsaWNGaWVsZCIsIlNlYXJjaEZpbHRlciIsImNvbnN0cnVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/search_filter_builder.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/storage.js':
    /*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/storage.js ***!
  \**********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL3N0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IjtBQUFhLENBQ2IsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL3N0b3JhZ2UuanM/ZmVjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0b3JhZ2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/storage.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/vector_search.js':
    /*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/vector_search.js ***!
  \****************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilterExpression: () => (/* binding */ FilterExpression)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\nclass FilterExpression {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, "_isExpression");\n        // Property to distinguish expressions by the type they resolve to.\n        __publicField(this, "_value");\n    }\n} //# sourceMappingURL=vector_search.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL3ZlY3Rvcl9zZWFyY2guanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhO0FBQ2IsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0MsUUFBVUgsZ0JBQWdCQyxLQUFLLE9BQU9DLFFBQVEsV0FBV0EsTUFBTSxLQUFLQSxLQUFLQztBQUNqRyxNQUFNSztJQUNYOztHQUVDLEdBQ0RDLGFBQWM7UUFDWixxQ0FBcUM7UUFDckNGLGNBQWMsSUFBSSxFQUFFO1FBQ3BCLG1FQUFtRTtRQUNuRUEsY0FBYyxJQUFJLEVBQUU7SUFDdEI7QUFDRixFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BlY29tbWVyY2Uvd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb252ZXhAMS4yNy4xX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci92ZWN0b3Jfc2VhcmNoLmpzPzJkOWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuZXhwb3J0IGNsYXNzIEZpbHRlckV4cHJlc3Npb24ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBQcm9wZXJ0eSBmb3Igbm9taW5hbCB0eXBlIHN1cHBvcnQuXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9pc0V4cHJlc3Npb25cIik7XG4gICAgLy8gUHJvcGVydHkgdG8gZGlzdGluZ3Vpc2ggZXhwcmVzc2lvbnMgYnkgdGhlIHR5cGUgdGhleSByZXNvbHZlIHRvLlxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfdmFsdWVcIik7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlY3Rvcl9zZWFyY2guanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJGaWx0ZXJFeHByZXNzaW9uIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/server/vector_search.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/base64.js':
    /*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/base64.js ***!
  \*********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   byteLength: () => (/* binding */ byteLength),\n/* harmony export */   fromByteArray: () => (/* binding */ fromByteArray),\n/* harmony export */   fromByteArrayUrlSafeNoPadding: () => (/* binding */ fromByteArrayUrlSafeNoPadding),\n/* harmony export */   toByteArray: () => (/* binding */ toByteArray)\n/* harmony export */ });\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = Uint8Array;\nvar code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";\nfor(var i = 0, len = code.length; i < len; ++i){\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\nrevLookup["-".charCodeAt(0)] = 62;\nrevLookup["_".charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) {\n        throw new Error("Invalid string. Length must be a multiple of 4");\n    }\n    var validLen = b64.indexOf("=");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\nfunction byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(_b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    return arr;\n}\nfunction tripletToBase64(num) {\n    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n}\nfunction encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join("");\n}\nfunction fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3;\n    var parts = [];\n    var maxChunkLength = 16383;\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");\n    }\n    return parts.join("");\n}\nfunction fromByteArrayUrlSafeNoPadding(uint8) {\n    return fromByteArray(uint8).replace(/\\+/g, "-").replace(/\\//g, "_").replace(/=/g, "");\n} //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/base64.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/compare.js':
    /*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/compare.js ***!
  \**********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareValues: () => (/* binding */ compareValues)\n/* harmony export */ });\n/* harmony import */ var _compare_utf8_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compare_utf8.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/compare_utf8.js");\n\n\nfunction compareValues(k1, k2) {\n    return compareAsTuples(makeComparable(k1), makeComparable(k2));\n}\nfunction compareAsTuples(a, b) {\n    if (a[0] === b[0]) {\n        return compareSameTypeValues(a[1], b[1]);\n    } else if (a[0] < b[0]) {\n        return -1;\n    }\n    return 1;\n}\nfunction compareSameTypeValues(v1, v2) {\n    if (v1 === void 0 || v1 === null) {\n        return 0;\n    }\n    if (typeof v1 === "number") {\n        if (typeof v2 !== "number") {\n            throw new Error(`Unexpected type ${v2}`);\n        }\n        return compareNumbers(v1, v2);\n    }\n    if (typeof v1 === "string") {\n        if (typeof v2 !== "string") {\n            throw new Error(`Unexpected type ${v2}`);\n        }\n        return (0,_compare_utf8_js__WEBPACK_IMPORTED_MODULE_0__.compareUTF8)(v1, v2);\n    }\n    if (typeof v1 === "bigint" || typeof v1 === "boolean" || typeof v1 === "string") {\n        return v1 < v2 ? -1 : v1 === v2 ? 0 : 1;\n    }\n    if (!Array.isArray(v1) || !Array.isArray(v2)) {\n        throw new Error(`Unexpected type ${v1}`);\n    }\n    for(let i = 0; i < v1.length && i < v2.length; i++){\n        const cmp = compareAsTuples(v1[i], v2[i]);\n        if (cmp !== 0) {\n            return cmp;\n        }\n    }\n    if (v1.length < v2.length) {\n        return -1;\n    }\n    if (v1.length > v2.length) {\n        return 1;\n    }\n    return 0;\n}\nfunction compareNumbers(v1, v2) {\n    if (isNaN(v1) || isNaN(v2)) {\n        const buffer1 = new ArrayBuffer(8);\n        const buffer2 = new ArrayBuffer(8);\n        new DataView(buffer1).setFloat64(0, v1, /* little-endian */ true);\n        new DataView(buffer2).setFloat64(0, v2, /* little-endian */ true);\n        const v1Bits = BigInt(new DataView(buffer1).getBigInt64(0, /* little-endian */ true));\n        const v2Bits = BigInt(new DataView(buffer2).getBigInt64(0, /* little-endian */ true));\n        const v1Sign = (v1Bits & 0x8000000000000000n) !== 0n;\n        const v2Sign = (v2Bits & 0x8000000000000000n) !== 0n;\n        if (isNaN(v1) !== isNaN(v2)) {\n            if (isNaN(v1)) {\n                return v1Sign ? -1 : 1;\n            }\n            return v2Sign ? 1 : -1;\n        }\n        if (v1Sign !== v2Sign) {\n            return v1Sign ? -1 : 1;\n        }\n        return v1Bits < v2Bits ? -1 : v1Bits === v2Bits ? 0 : 1;\n    }\n    if (Object.is(v1, v2)) {\n        return 0;\n    }\n    if (Object.is(v1, -0)) {\n        return Object.is(v2, 0) ? -1 : -Math.sign(v2);\n    }\n    if (Object.is(v2, -0)) {\n        return Object.is(v1, 0) ? 1 : Math.sign(v1);\n    }\n    return v1 < v2 ? -1 : 1;\n}\nfunction makeComparable(v) {\n    if (v === void 0) {\n        return [\n            0,\n            void 0\n        ];\n    }\n    if (v === null) {\n        return [\n            1,\n            null\n        ];\n    }\n    if (typeof v === "bigint") {\n        return [\n            2,\n            v\n        ];\n    }\n    if (typeof v === "number") {\n        return [\n            3,\n            v\n        ];\n    }\n    if (typeof v === "boolean") {\n        return [\n            4,\n            v\n        ];\n    }\n    if (typeof v === "string") {\n        return [\n            5,\n            v\n        ];\n    }\n    if (v instanceof ArrayBuffer) {\n        return [\n            6,\n            Array.from(new Uint8Array(v)).map(makeComparable)\n        ];\n    }\n    if (Array.isArray(v)) {\n        return [\n            7,\n            v.map(makeComparable)\n        ];\n    }\n    const keys = Object.keys(v).sort();\n    const pojo = keys.map((k)=>[\n            k,\n            v[k]\n        ]);\n    return [\n        8,\n        pojo.map(makeComparable)\n    ];\n} //# sourceMappingURL=compare.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/compare.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/compare_utf8.js':
    /*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/compare_utf8.js ***!
  \***************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareUTF8: () => (/* binding */ compareUTF8),\n/* harmony export */   greaterThan: () => (/* binding */ greaterThan),\n/* harmony export */   greaterThanEq: () => (/* binding */ greaterThanEq),\n/* harmony export */   lessThan: () => (/* binding */ lessThan),\n/* harmony export */   lessThanEq: () => (/* binding */ lessThanEq),\n/* harmony export */   utf16LengthForCodePoint: () => (/* binding */ utf16LengthForCodePoint)\n/* harmony export */ });\n\nfunction compareUTF8(a, b) {\n    const aLength = a.length;\n    const bLength = b.length;\n    const length = Math.min(aLength, bLength);\n    for(let i = 0; i < length;){\n        const aCodePoint = a.codePointAt(i);\n        const bCodePoint = b.codePointAt(i);\n        if (aCodePoint !== bCodePoint) {\n            if (aCodePoint < 128 && bCodePoint < 128) {\n                return aCodePoint - bCodePoint;\n            }\n            const aLength2 = utf8Bytes(aCodePoint, aBytes);\n            const bLength2 = utf8Bytes(bCodePoint, bBytes);\n            return compareArrays(aBytes, aLength2, bBytes, bLength2);\n        }\n        i += utf16LengthForCodePoint(aCodePoint);\n    }\n    return aLength - bLength;\n}\nfunction compareArrays(a, aLength, b, bLength) {\n    const length = Math.min(aLength, bLength);\n    for(let i = 0; i < length; i++){\n        const aValue = a[i];\n        const bValue = b[i];\n        if (aValue !== bValue) {\n            return aValue - bValue;\n        }\n    }\n    return aLength - bLength;\n}\nfunction utf16LengthForCodePoint(aCodePoint) {\n    return aCodePoint > 65535 ? 2 : 1;\n}\nconst arr = ()=>Array.from({\n        length: 4\n    }, ()=>0);\nconst aBytes = arr();\nconst bBytes = arr();\nfunction utf8Bytes(codePoint, bytes) {\n    if (codePoint < 128) {\n        bytes[0] = codePoint;\n        return 1;\n    }\n    let count;\n    let offset;\n    if (codePoint <= 2047) {\n        count = 1;\n        offset = 192;\n    } else if (codePoint <= 65535) {\n        count = 2;\n        offset = 224;\n    } else if (codePoint <= 1114111) {\n        count = 3;\n        offset = 240;\n    } else {\n        throw new Error("Invalid code point");\n    }\n    bytes[0] = (codePoint >> 6 * count) + offset;\n    let i = 1;\n    for(; count > 0; count--){\n        const temp = codePoint >> 6 * (count - 1);\n        bytes[i++] = 128 | temp & 63;\n    }\n    return i;\n}\nfunction greaterThan(a, b) {\n    return compareUTF8(a, b) > 0;\n}\nfunction greaterThanEq(a, b) {\n    return compareUTF8(a, b) >= 0;\n}\nfunction lessThan(a, b) {\n    return compareUTF8(a, b) < 0;\n}\nfunction lessThanEq(a, b) {\n    return compareUTF8(a, b) <= 0;\n} //# sourceMappingURL=compare_utf8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2NvbXBhcmVfdXRmOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTtBQUNOLFNBQVNBLFlBQVlDLENBQUMsRUFBRUMsQ0FBQztJQUM5QixNQUFNQyxVQUFVRixFQUFFRyxNQUFNO0lBQ3hCLE1BQU1DLFVBQVVILEVBQUVFLE1BQU07SUFDeEIsTUFBTUEsU0FBU0UsS0FBS0MsR0FBRyxDQUFDSixTQUFTRTtJQUNqQyxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUosUUFBVTtRQUM1QixNQUFNSyxhQUFhUixFQUFFUyxXQUFXLENBQUNGO1FBQ2pDLE1BQU1HLGFBQWFULEVBQUVRLFdBQVcsQ0FBQ0Y7UUFDakMsSUFBSUMsZUFBZUUsWUFBWTtZQUM3QixJQUFJRixhQUFhLE9BQU9FLGFBQWEsS0FBSztnQkFDeEMsT0FBT0YsYUFBYUU7WUFDdEI7WUFDQSxNQUFNQyxXQUFXQyxVQUFVSixZQUFZSztZQUN2QyxNQUFNQyxXQUFXRixVQUFVRixZQUFZSztZQUN2QyxPQUFPQyxjQUFjSCxRQUFRRixVQUFVSSxRQUFRRDtRQUNqRDtRQUNBUCxLQUFLVSx3QkFBd0JUO0lBQy9CO0lBQ0EsT0FBT04sVUFBVUU7QUFDbkI7QUFDQSxTQUFTWSxjQUFjaEIsQ0FBQyxFQUFFRSxPQUFPLEVBQUVELENBQUMsRUFBRUcsT0FBTztJQUMzQyxNQUFNRCxTQUFTRSxLQUFLQyxHQUFHLENBQUNKLFNBQVNFO0lBQ2pDLElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJSixRQUFRSSxJQUFLO1FBQy9CLE1BQU1XLFNBQVNsQixDQUFDLENBQUNPLEVBQUU7UUFDbkIsTUFBTVksU0FBU2xCLENBQUMsQ0FBQ00sRUFBRTtRQUNuQixJQUFJVyxXQUFXQyxRQUFRO1lBQ3JCLE9BQU9ELFNBQVNDO1FBQ2xCO0lBQ0Y7SUFDQSxPQUFPakIsVUFBVUU7QUFDbkI7QUFDTyxTQUFTYSx3QkFBd0JULFVBQVU7SUFDaEQsT0FBT0EsYUFBYSxRQUFRLElBQUk7QUFDbEM7QUFDQSxNQUFNWSxNQUFNLElBQU1DLE1BQU1DLElBQUksQ0FBQztRQUFFbkIsUUFBUTtJQUFFLEdBQUcsSUFBTTtBQUNsRCxNQUFNVSxTQUFTTztBQUNmLE1BQU1MLFNBQVNLO0FBQ2YsU0FBU1IsVUFBVVcsU0FBUyxFQUFFQyxLQUFLO0lBQ2pDLElBQUlELFlBQVksS0FBSztRQUNuQkMsS0FBSyxDQUFDLEVBQUUsR0FBR0Q7UUFDWCxPQUFPO0lBQ1Q7SUFDQSxJQUFJRTtJQUNKLElBQUlDO0lBQ0osSUFBSUgsYUFBYSxNQUFNO1FBQ3JCRSxRQUFRO1FBQ1JDLFNBQVM7SUFDWCxPQUFPLElBQUlILGFBQWEsT0FBTztRQUM3QkUsUUFBUTtRQUNSQyxTQUFTO0lBQ1gsT0FBTyxJQUFJSCxhQUFhLFNBQVM7UUFDL0JFLFFBQVE7UUFDUkMsU0FBUztJQUNYLE9BQU87UUFDTCxNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFDQUgsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDRCxhQUFhLElBQUlFLEtBQUksSUFBS0M7SUFDdEMsSUFBSW5CLElBQUk7SUFDUixNQUFPa0IsUUFBUSxHQUFHQSxRQUFTO1FBQ3pCLE1BQU1HLE9BQU9MLGFBQWEsSUFBS0UsQ0FBQUEsUUFBUTtRQUN2Q0QsS0FBSyxDQUFDakIsSUFBSSxHQUFHLE1BQU1xQixPQUFPO0lBQzVCO0lBQ0EsT0FBT3JCO0FBQ1Q7QUFDTyxTQUFTc0IsWUFBWTdCLENBQUMsRUFBRUMsQ0FBQztJQUM5QixPQUFPRixZQUFZQyxHQUFHQyxLQUFLO0FBQzdCO0FBQ08sU0FBUzZCLGNBQWM5QixDQUFDLEVBQUVDLENBQUM7SUFDaEMsT0FBT0YsWUFBWUMsR0FBR0MsTUFBTTtBQUM5QjtBQUNPLFNBQVM4QixTQUFTL0IsQ0FBQyxFQUFFQyxDQUFDO0lBQzNCLE9BQU9GLFlBQVlDLEdBQUdDLEtBQUs7QUFDN0I7QUFDTyxTQUFTK0IsV0FBV2hDLENBQUMsRUFBRUMsQ0FBQztJQUM3QixPQUFPRixZQUFZQyxHQUFHQyxNQUFNO0FBQzlCLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2NvbXBhcmVfdXRmOC5qcz9jYzIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVVVEY4KGEsIGIpIHtcbiAgY29uc3QgYUxlbmd0aCA9IGEubGVuZ3RoO1xuICBjb25zdCBiTGVuZ3RoID0gYi5sZW5ndGg7XG4gIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGFMZW5ndGgsIGJMZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKSB7XG4gICAgY29uc3QgYUNvZGVQb2ludCA9IGEuY29kZVBvaW50QXQoaSk7XG4gICAgY29uc3QgYkNvZGVQb2ludCA9IGIuY29kZVBvaW50QXQoaSk7XG4gICAgaWYgKGFDb2RlUG9pbnQgIT09IGJDb2RlUG9pbnQpIHtcbiAgICAgIGlmIChhQ29kZVBvaW50IDwgMTI4ICYmIGJDb2RlUG9pbnQgPCAxMjgpIHtcbiAgICAgICAgcmV0dXJuIGFDb2RlUG9pbnQgLSBiQ29kZVBvaW50O1xuICAgICAgfVxuICAgICAgY29uc3QgYUxlbmd0aDIgPSB1dGY4Qnl0ZXMoYUNvZGVQb2ludCwgYUJ5dGVzKTtcbiAgICAgIGNvbnN0IGJMZW5ndGgyID0gdXRmOEJ5dGVzKGJDb2RlUG9pbnQsIGJCeXRlcyk7XG4gICAgICByZXR1cm4gY29tcGFyZUFycmF5cyhhQnl0ZXMsIGFMZW5ndGgyLCBiQnl0ZXMsIGJMZW5ndGgyKTtcbiAgICB9XG4gICAgaSArPSB1dGYxNkxlbmd0aEZvckNvZGVQb2ludChhQ29kZVBvaW50KTtcbiAgfVxuICByZXR1cm4gYUxlbmd0aCAtIGJMZW5ndGg7XG59XG5mdW5jdGlvbiBjb21wYXJlQXJyYXlzKGEsIGFMZW5ndGgsIGIsIGJMZW5ndGgpIHtcbiAgY29uc3QgbGVuZ3RoID0gTWF0aC5taW4oYUxlbmd0aCwgYkxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhVmFsdWUgPSBhW2ldO1xuICAgIGNvbnN0IGJWYWx1ZSA9IGJbaV07XG4gICAgaWYgKGFWYWx1ZSAhPT0gYlZhbHVlKSB7XG4gICAgICByZXR1cm4gYVZhbHVlIC0gYlZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYUxlbmd0aCAtIGJMZW5ndGg7XG59XG5leHBvcnQgZnVuY3Rpb24gdXRmMTZMZW5ndGhGb3JDb2RlUG9pbnQoYUNvZGVQb2ludCkge1xuICByZXR1cm4gYUNvZGVQb2ludCA+IDY1NTM1ID8gMiA6IDE7XG59XG5jb25zdCBhcnIgPSAoKSA9PiBBcnJheS5mcm9tKHsgbGVuZ3RoOiA0IH0sICgpID0+IDApO1xuY29uc3QgYUJ5dGVzID0gYXJyKCk7XG5jb25zdCBiQnl0ZXMgPSBhcnIoKTtcbmZ1bmN0aW9uIHV0ZjhCeXRlcyhjb2RlUG9pbnQsIGJ5dGVzKSB7XG4gIGlmIChjb2RlUG9pbnQgPCAxMjgpIHtcbiAgICBieXRlc1swXSA9IGNvZGVQb2ludDtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBsZXQgY291bnQ7XG4gIGxldCBvZmZzZXQ7XG4gIGlmIChjb2RlUG9pbnQgPD0gMjA0Nykge1xuICAgIGNvdW50ID0gMTtcbiAgICBvZmZzZXQgPSAxOTI7XG4gIH0gZWxzZSBpZiAoY29kZVBvaW50IDw9IDY1NTM1KSB7XG4gICAgY291bnQgPSAyO1xuICAgIG9mZnNldCA9IDIyNDtcbiAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPD0gMTExNDExMSkge1xuICAgIGNvdW50ID0gMztcbiAgICBvZmZzZXQgPSAyNDA7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2RlIHBvaW50XCIpO1xuICB9XG4gIGJ5dGVzWzBdID0gKGNvZGVQb2ludCA+PiA2ICogY291bnQpICsgb2Zmc2V0O1xuICBsZXQgaSA9IDE7XG4gIGZvciAoOyBjb3VudCA+IDA7IGNvdW50LS0pIHtcbiAgICBjb25zdCB0ZW1wID0gY29kZVBvaW50ID4+IDYgKiAoY291bnQgLSAxKTtcbiAgICBieXRlc1tpKytdID0gMTI4IHwgdGVtcCAmIDYzO1xuICB9XG4gIHJldHVybiBpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuKGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmVVVEY4KGEsIGIpID4gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBncmVhdGVyVGhhbkVxKGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmVVVEY4KGEsIGIpID49IDA7XG59XG5leHBvcnQgZnVuY3Rpb24gbGVzc1RoYW4oYSwgYikge1xuICByZXR1cm4gY29tcGFyZVVURjgoYSwgYikgPCAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGxlc3NUaGFuRXEoYSwgYikge1xuICByZXR1cm4gY29tcGFyZVVURjgoYSwgYikgPD0gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBhcmVfdXRmOC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjb21wYXJlVVRGOCIsImEiLCJiIiwiYUxlbmd0aCIsImxlbmd0aCIsImJMZW5ndGgiLCJNYXRoIiwibWluIiwiaSIsImFDb2RlUG9pbnQiLCJjb2RlUG9pbnRBdCIsImJDb2RlUG9pbnQiLCJhTGVuZ3RoMiIsInV0ZjhCeXRlcyIsImFCeXRlcyIsImJMZW5ndGgyIiwiYkJ5dGVzIiwiY29tcGFyZUFycmF5cyIsInV0ZjE2TGVuZ3RoRm9yQ29kZVBvaW50IiwiYVZhbHVlIiwiYlZhbHVlIiwiYXJyIiwiQXJyYXkiLCJmcm9tIiwiY29kZVBvaW50IiwiYnl0ZXMiLCJjb3VudCIsIm9mZnNldCIsIkVycm9yIiwidGVtcCIsImdyZWF0ZXJUaGFuIiwiZ3JlYXRlclRoYW5FcSIsImxlc3NUaGFuIiwibGVzc1RoYW5FcSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/compare_utf8.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/errors.js':
    /*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/errors.js ***!
  \*********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexError: () => (/* binding */ ConvexError)\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\nvar _a, _b;\n\nconst IDENTIFYING_FIELD = Symbol.for("ConvexError");\nclass ConvexError extends (_b = Error, _a = IDENTIFYING_FIELD, _b) {\n    constructor(data){\n        super(typeof data === "string" ? data : (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.stringifyValueForError)(data));\n        __publicField(this, "name", "ConvexError");\n        __publicField(this, "data");\n        __publicField(this, _a, true);\n        this.data = data;\n    }\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFhO0FBQ2IsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0MsUUFBVUgsZ0JBQWdCQyxLQUFLLE9BQU9DLFFBQVEsV0FBV0EsTUFBTSxLQUFLQSxLQUFLQztBQUN4RyxJQUFJSyxJQUFJQztBQUM0QztBQUNwRCxNQUFNRSxvQkFBb0JDLE9BQU9DLEdBQUcsQ0FBQztBQUM5QixNQUFNQyxvQkFBcUJMLENBQUFBLEtBQUtNLE9BQU9QLEtBQUtHLG1CQUFtQkYsRUFBQztJQUNyRU8sWUFBWUMsSUFBSSxDQUFFO1FBQ2hCLEtBQUssQ0FBQyxPQUFPQSxTQUFTLFdBQVdBLE9BQU9QLGlFQUFzQkEsQ0FBQ087UUFDL0RWLGNBQWMsSUFBSSxFQUFFLFFBQVE7UUFDNUJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCQSxjQUFjLElBQUksRUFBRUMsSUFBSTtRQUN4QixJQUFJLENBQUNTLElBQUksR0FBR0E7SUFDZDtBQUNGLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVjb21tZXJjZS93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2Vycm9ycy5qcz81NjBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbnZhciBfYSwgX2I7XG5pbXBvcnQgeyBzdHJpbmdpZnlWYWx1ZUZvckVycm9yIH0gZnJvbSBcIi4vdmFsdWUuanNcIjtcbmNvbnN0IElERU5USUZZSU5HX0ZJRUxEID0gU3ltYm9sLmZvcihcIkNvbnZleEVycm9yXCIpO1xuZXhwb3J0IGNsYXNzIENvbnZleEVycm9yIGV4dGVuZHMgKF9iID0gRXJyb3IsIF9hID0gSURFTlRJRllJTkdfRklFTEQsIF9iKSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBzdXBlcih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IGRhdGEgOiBzdHJpbmdpZnlWYWx1ZUZvckVycm9yKGRhdGEpKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibmFtZVwiLCBcIkNvbnZleEVycm9yXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJkYXRhXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgX2EsIHRydWUpO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19wdWJsaWNGaWVsZCIsIl9hIiwiX2IiLCJzdHJpbmdpZnlWYWx1ZUZvckVycm9yIiwiSURFTlRJRllJTkdfRklFTEQiLCJTeW1ib2wiLCJmb3IiLCJDb252ZXhFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/errors.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js':
    /*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js ***!
  \********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base64: () => (/* reexport module object */ _base64_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   ConvexError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError),\n/* harmony export */   asObjectValidator: () => (/* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.asObjectValidator),\n/* harmony export */   compareValues: () => (/* reexport safe */ _compare_js__WEBPACK_IMPORTED_MODULE_4__.compareValues),\n/* harmony export */   convexToJson: () => (/* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson),\n/* harmony export */   jsonToConvex: () => (/* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex),\n/* harmony export */   v: () => (/* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.v)\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js");\n/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validator.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validator.js");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base64.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/base64.js");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/errors.js");\n/* harmony import */ var _compare_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./compare.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/compare.js");\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFhO0FBQzJDO0FBQ0Y7QUFDaEI7QUFDcEI7QUFDVTtBQUNpQixDQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS92YWx1ZXMvaW5kZXguanM/MWNlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydCB7IGNvbnZleFRvSnNvbiwganNvblRvQ29udmV4IH0gZnJvbSBcIi4vdmFsdWUuanNcIjtcbmV4cG9ydCB7IHYsIGFzT2JqZWN0VmFsaWRhdG9yIH0gZnJvbSBcIi4vdmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgKiBhcyBCYXNlNjQgZnJvbSBcIi4vYmFzZTY0LmpzXCI7XG5leHBvcnQgeyBCYXNlNjQgfTtcbmV4cG9ydCAqIGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuZXhwb3J0IHsgY29tcGFyZVZhbHVlcyB9IGZyb20gXCIuL2NvbXBhcmUuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsImpzb25Ub0NvbnZleCIsInYiLCJhc09iamVjdFZhbGlkYXRvciIsIkJhc2U2NCIsImNvbXBhcmVWYWx1ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/index.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validator.js':
    /*!************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validator.js ***!
  \************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asObjectValidator: () => (/* binding */ asObjectValidator),\n/* harmony export */   isValidator: () => (/* binding */ isValidator),\n/* harmony export */   v: () => (/* binding */ v)\n/* harmony export */ });\n/* harmony import */ var _validators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validators.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validators.js");\n\n\nfunction isValidator(v2) {\n    return !!v2.isConvexValidator;\n}\nfunction asObjectValidator(obj) {\n    if (isValidator(obj)) {\n        return obj;\n    } else {\n        return v.object(obj);\n    }\n}\nconst v = {\n    /**\n   * Validates that the value corresponds to an ID of a document in given table.\n   * @param tableName The name of the table.\n   */ id: (tableName)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VId({\n            isOptional: "required",\n            tableName\n        });\n    },\n    /**\n   * Validates that the value is of type Null.\n   */ null: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VNull({\n            isOptional: "required"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Float64 (Number in JS).\n   *\n   * Alias for `v.float64()`\n   */ number: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VFloat64({\n            isOptional: "required"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Float64 (Number in JS).\n   */ float64: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VFloat64({\n            isOptional: "required"\n        });\n    },\n    /**\n   * @deprecated Use `v.int64()` instead\n   */ bigint: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VInt64({\n            isOptional: "required"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Int64 (BigInt in JS).\n   */ int64: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VInt64({\n            isOptional: "required"\n        });\n    },\n    /**\n   * Validates that the value is of type Boolean.\n   */ boolean: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VBoolean({\n            isOptional: "required"\n        });\n    },\n    /**\n   * Validates that the value is of type String.\n   */ string: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VString({\n            isOptional: "required"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Bytes (constructed in JS via `ArrayBuffer`).\n   */ bytes: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VBytes({\n            isOptional: "required"\n        });\n    },\n    /**\n   * Validates that the value is equal to the given literal value.\n   * @param literal The literal value to compare against.\n   */ literal: (literal)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VLiteral({\n            isOptional: "required",\n            value: literal\n        });\n    },\n    /**\n   * Validates that the value is an Array of the given element type.\n   * @param element The validator for the elements of the array.\n   */ array: (element)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VArray({\n            isOptional: "required",\n            element\n        });\n    },\n    /**\n   * Validates that the value is an Object with the given properties.\n   * @param fields An object specifying the validator for each property.\n   */ object: (fields)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VObject({\n            isOptional: "required",\n            fields\n        });\n    },\n    /**\n   * Validates that the value is a Record with keys and values that match the given types.\n   * @param keys The validator for the keys of the record. This cannot contain string literals.\n   * @param values The validator for the values of the record.\n   */ record: (keys, values)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VRecord({\n            isOptional: "required",\n            key: keys,\n            value: values\n        });\n    },\n    /**\n   * Validates that the value matches one of the given validators.\n   * @param members The validators to match against.\n   */ union: (...members)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VUnion({\n            isOptional: "required",\n            members\n        });\n    },\n    /**\n   * Does not validate the value.\n   */ any: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VAny({\n            isOptional: "required"\n        });\n    },\n    /**\n   * Allows not specifying a value for a property in an Object.\n   * @param value The property value validator to make optional.\n   *\n   * ```typescript\n   * const objectWithOptionalFields = v.object({\n   *   requiredField: v.string(),\n   *   optionalField: v.optional(v.string()),\n   * });\n   * ```\n   */ optional: (value)=>{\n        return value.asOptional();\n    }\n}; //# sourceMappingURL=validator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validator.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validators.js':
    /*!*************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validators.js ***!
  \*************************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VAny: () => (/* binding */ VAny),\n/* harmony export */   VArray: () => (/* binding */ VArray),\n/* harmony export */   VBoolean: () => (/* binding */ VBoolean),\n/* harmony export */   VBytes: () => (/* binding */ VBytes),\n/* harmony export */   VFloat64: () => (/* binding */ VFloat64),\n/* harmony export */   VId: () => (/* binding */ VId),\n/* harmony export */   VInt64: () => (/* binding */ VInt64),\n/* harmony export */   VLiteral: () => (/* binding */ VLiteral),\n/* harmony export */   VNull: () => (/* binding */ VNull),\n/* harmony export */   VObject: () => (/* binding */ VObject),\n/* harmony export */   VRecord: () => (/* binding */ VRecord),\n/* harmony export */   VString: () => (/* binding */ VString),\n/* harmony export */   VUnion: () => (/* binding */ VUnion)\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);\n\nclass BaseValidator {\n    constructor({ isOptional }){\n        /**\n     * Only for TypeScript, the TS type of the JS values validated\n     * by this validator.\n     */ __publicField(this, "type");\n        /**\n     * Only for TypeScript, if this an Object validator, then\n     * this is the TS type of its property names.\n     */ __publicField(this, "fieldPaths");\n        /**\n     * Whether this is an optional Object property value validator.\n     */ __publicField(this, "isOptional");\n        /**\n     * Always `"true"`.\n     */ __publicField(this, "isConvexValidator");\n        this.isOptional = isOptional;\n        this.isConvexValidator = true;\n    }\n    /** @deprecated - use isOptional instead */ get optional() {\n        return this.isOptional === "optional" ? true : false;\n    }\n}\nclass VId extends BaseValidator {\n    /**\n   * Usually you\'d use `v.id(tableName)` instead.\n   */ constructor({ isOptional, tableName }){\n        super({\n            isOptional\n        });\n        /**\n     * The name of the table that the validated IDs must belong to.\n     */ __publicField(this, "tableName");\n        /**\n     * The kind of validator, `"id"`.\n     */ __publicField(this, "kind", "id");\n        if (typeof tableName !== "string") {\n            throw new Error("v.id(tableName) requires a string");\n        }\n        this.tableName = tableName;\n    }\n    /** @internal */ get json() {\n        return {\n            type: "id",\n            tableName: this.tableName\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VId({\n            isOptional: "optional",\n            tableName: this.tableName\n        });\n    }\n}\nclass VFloat64 extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `"float64"`.\n     */ __publicField(this, "kind", "float64");\n    }\n    /** @internal */ get json() {\n        return {\n            type: "number"\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VFloat64({\n            isOptional: "optional"\n        });\n    }\n}\nclass VInt64 extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `"int64"`.\n     */ __publicField(this, "kind", "int64");\n    }\n    /** @internal */ get json() {\n        return {\n            type: "bigint"\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VInt64({\n            isOptional: "optional"\n        });\n    }\n}\nclass VBoolean extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `"boolean"`.\n     */ __publicField(this, "kind", "boolean");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VBoolean({\n            isOptional: "optional"\n        });\n    }\n}\nclass VBytes extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `"bytes"`.\n     */ __publicField(this, "kind", "bytes");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VBytes({\n            isOptional: "optional"\n        });\n    }\n}\nclass VString extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `"string"`.\n     */ __publicField(this, "kind", "string");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VString({\n            isOptional: "optional"\n        });\n    }\n}\nclass VNull extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `"null"`.\n     */ __publicField(this, "kind", "null");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VNull({\n            isOptional: "optional"\n        });\n    }\n}\nclass VAny extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `"any"`.\n     */ __publicField(this, "kind", "any");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VAny({\n            isOptional: "optional"\n        });\n    }\n}\nclass VObject extends BaseValidator {\n    /**\n   * Usually you\'d use `v.object({ ... })` instead.\n   */ constructor({ isOptional, fields }){\n        super({\n            isOptional\n        });\n        /**\n     * An object with the validator for each property.\n     */ __publicField(this, "fields");\n        /**\n     * The kind of validator, `"object"`.\n     */ __publicField(this, "kind", "object");\n        globalThis.Object.values(fields).forEach((v)=>{\n            if (!v.isConvexValidator) {\n                throw new Error("v.object() entries must be valiators");\n            }\n        });\n        this.fields = fields;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: globalThis.Object.fromEntries(globalThis.Object.entries(this.fields).map(([k, v])=>[\n                    k,\n                    {\n                        fieldType: v.json,\n                        optional: v.isOptional === "optional" ? true : false\n                    }\n                ]))\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VObject({\n            isOptional: "optional",\n            fields: this.fields\n        });\n    }\n}\nclass VLiteral extends BaseValidator {\n    /**\n   * Usually you\'d use `v.literal(value)` instead.\n   */ constructor({ isOptional, value }){\n        super({\n            isOptional\n        });\n        /**\n     * The value that the validated values must be equal to.\n     */ __publicField(this, "value");\n        /**\n     * The kind of validator, `"literal"`.\n     */ __publicField(this, "kind", "literal");\n        if (typeof value !== "string" && typeof value !== "boolean" && typeof value !== "number" && typeof value !== "bigint") {\n            throw new Error("v.literal(value) must be a string, number, or boolean");\n        }\n        this.value = value;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(this.value)\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VLiteral({\n            isOptional: "optional",\n            value: this.value\n        });\n    }\n}\nclass VArray extends BaseValidator {\n    /**\n   * Usually you\'d use `v.array(element)` instead.\n   */ constructor({ isOptional, element }){\n        super({\n            isOptional\n        });\n        /**\n     * The validator for the elements of the array.\n     */ __publicField(this, "element");\n        /**\n     * The kind of validator, `"array"`.\n     */ __publicField(this, "kind", "array");\n        this.element = element;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: this.element.json\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VArray({\n            isOptional: "optional",\n            element: this.element\n        });\n    }\n}\nclass VRecord extends BaseValidator {\n    /**\n   * Usually you\'d use `v.record(key, value)` instead.\n   */ constructor({ isOptional, key, value }){\n        super({\n            isOptional\n        });\n        /**\n     * The validator for the keys of the record.\n     */ __publicField(this, "key");\n        /**\n     * The validator for the values of the record.\n     */ __publicField(this, "value");\n        /**\n     * The kind of validator, `"record"`.\n     */ __publicField(this, "kind", "record");\n        if (key.isOptional === "optional") {\n            throw new Error("Record validator cannot have optional keys");\n        }\n        if (value.isOptional === "optional") {\n            throw new Error("Record validator cannot have optional values");\n        }\n        if (!key.isConvexValidator || !value.isConvexValidator) {\n            throw new Error("Key and value of v.record() but be validators");\n        }\n        this.key = key;\n        this.value = value;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            // This cast is needed because TypeScript thinks the key type is too wide\n            keys: this.key.json,\n            values: {\n                fieldType: this.value.json,\n                optional: false\n            }\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VRecord({\n            isOptional: "optional",\n            key: this.key,\n            value: this.value\n        });\n    }\n}\nclass VUnion extends BaseValidator {\n    /**\n   * Usually you\'d use `v.union(...members)` instead.\n   */ constructor({ isOptional, members }){\n        super({\n            isOptional\n        });\n        /**\n     * The array of validators, one of which must match the value.\n     */ __publicField(this, "members");\n        /**\n     * The kind of validator, `"union"`.\n     */ __publicField(this, "kind", "union");\n        members.forEach((member)=>{\n            if (!member.isConvexValidator) {\n                throw new Error("All members of v.union() must be validators");\n            }\n        });\n        this.members = members;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: this.members.map((v)=>v.json)\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VUnion({\n            isOptional: "optional",\n            members: this.members\n        });\n    }\n} //# sourceMappingURL=validators.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2NvbnZleEAxLjI3LjFfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL3ZhbGlkYXRvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDOUQ7QUFDMUMsTUFBTU07SUFDSkMsWUFBWSxFQUFFQyxVQUFVLEVBQUUsQ0FBRTtRQUMxQjs7O0tBR0MsR0FDREosY0FBYyxJQUFJLEVBQUU7UUFDcEI7OztLQUdDLEdBQ0RBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCOztLQUVDLEdBQ0RBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCOztLQUVDLEdBQ0RBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQ0ksVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNDLGlCQUFpQixHQUFHO0lBQzNCO0lBQ0EseUNBQXlDLEdBQ3pDLElBQUlDLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQ0YsVUFBVSxLQUFLLGFBQWEsT0FBTztJQUNqRDtBQUNGO0FBQ08sTUFBTUcsWUFBWUw7SUFDdkI7O0dBRUMsR0FDREMsWUFBWSxFQUNWQyxVQUFVLEVBQ1ZJLFNBQVMsRUFDVixDQUFFO1FBQ0QsS0FBSyxDQUFDO1lBQUVKO1FBQVc7UUFDbkI7O0tBRUMsR0FDREosY0FBYyxJQUFJLEVBQUU7UUFDcEI7O0tBRUMsR0FD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QUFjLElBQUksRUFBRTtRQUNwQjs7S0FFQyxHQUNEQSxjQUFjLElBQUksRUFBRSxRQUFRO1FBQzVCdUMsUUFBUWIsT0FBTyxDQUFDLENBQUNjO1lBQ2YsSUFBSSxDQUFDQSxPQUFPbkMsaUJBQWlCLEVBQUU7Z0JBQzdCLE1BQU0sSUFBSUksTUFBTTtZQUNsQjtRQUNGO1FBQ0EsSUFBSSxDQUFDOEIsT0FBTyxHQUFHQTtJQUNqQjtJQUNBLGNBQWMsR0FDZCxJQUFJN0IsT0FBTztRQUNULE9BQU87WUFDTEMsTUFBTSxJQUFJLENBQUNNLElBQUk7WUFDZnJCLE9BQU8sSUFBSSxDQUFDMkMsT0FBTyxDQUFDVCxHQUFHLENBQUMsQ0FBQ0gsSUFBTUEsRUFBRWpCLElBQUk7UUFDdkM7SUFDRjtJQUNBLGNBQWMsR0FDZEUsYUFBYTtRQUNYLE9BQU8sSUFBSTBCLE9BQU87WUFDaEJsQyxZQUFZO1lBQ1ptQyxTQUFTLElBQUksQ0FBQ0EsT0FBTztRQUN2QjtJQUNGO0FBQ0YsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZWNvbW1lcmNlL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY29udmV4QDEuMjcuMV9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS92YWx1ZXMvdmFsaWRhdG9ycy5qcz8wYTZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbmltcG9ydCB7IGNvbnZleFRvSnNvbiB9IGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5jbGFzcyBCYXNlVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoeyBpc09wdGlvbmFsIH0pIHtcbiAgICAvKipcbiAgICAgKiBPbmx5IGZvciBUeXBlU2NyaXB0LCB0aGUgVFMgdHlwZSBvZiB0aGUgSlMgdmFsdWVzIHZhbGlkYXRlZFxuICAgICAqIGJ5IHRoaXMgdmFsaWRhdG9yLlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ0eXBlXCIpO1xuICAgIC8qKlxuICAgICAqIE9ubHkgZm9yIFR5cGVTY3JpcHQsIGlmIHRoaXMgYW4gT2JqZWN0IHZhbGlkYXRvciwgdGhlblxuICAgICAqIHRoaXMgaXMgdGhlIFRTIHR5cGUgb2YgaXRzIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmaWVsZFBhdGhzXCIpO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBpcyBhbiBvcHRpb25hbCBPYmplY3QgcHJvcGVydHkgdmFsdWUgdmFsaWRhdG9yLlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpc09wdGlvbmFsXCIpO1xuICAgIC8qKlxuICAgICAqIEFsd2F5cyBgXCJ0cnVlXCJgLlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpc0NvbnZleFZhbGlkYXRvclwiKTtcbiAgICB0aGlzLmlzT3B0aW9uYWwgPSBpc09wdGlvbmFsO1xuICAgIHRoaXMuaXNDb252ZXhWYWxpZGF0b3IgPSB0cnVlO1xuICB9XG4gIC8qKiBAZGVwcmVjYXRlZCAtIHVzZSBpc09wdGlvbmFsIGluc3RlYWQgKi9cbiAgZ2V0IG9wdGlvbmFsKCkge1xuICAgIHJldHVybiB0aGlzLmlzT3B0aW9uYWwgPT09IFwib3B0aW9uYWxcIiA/IHRydWUgOiBmYWxzZTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFZJZCBleHRlbmRzIEJhc2VWYWxpZGF0b3Ige1xuICAvKipcbiAgICogVXN1YWxseSB5b3UnZCB1c2UgYHYuaWQodGFibGVOYW1lKWAgaW5zdGVhZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBpc09wdGlvbmFsLFxuICAgIHRhYmxlTmFtZVxuICB9KSB7XG4gICAgc3VwZXIoeyBpc09wdGlvbmFsIH0pO1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB0YWJsZSB0aGF0IHRoZSB2YWxpZGF0ZWQgSURzIG11c3QgYmVsb25nIHRvLlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ0YWJsZU5hbWVcIik7XG4gICAgLyoqXG4gICAgICogVGhlIGtpbmQgb2YgdmFsaWRhdG9yLCBgXCJpZFwiYC5cbiAgICAgKi9cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwia2luZFwiLCBcImlkXCIpO1xuICAgIGlmICh0eXBlb2YgdGFibGVOYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ2LmlkKHRhYmxlTmFtZSkgcmVxdWlyZXMgYSBzdHJpbmdcIik7XG4gICAgfVxuICAgIHRoaXMudGFibGVOYW1lID0gdGFibGVOYW1lO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgZ2V0IGpzb24oKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJpZFwiLCB0YWJsZU5hbWU6IHRoaXMudGFibGVOYW1lIH07XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBhc09wdGlvbmFsKCkge1xuICAgIHJldHVybiBuZXcgVklkKHtcbiAgICAgIGlzT3B0aW9uYWw6IFwib3B0aW9uYWxcIixcbiAgICAgIHRhYmxlTmFtZTogdGhpcy50YWJsZU5hbWVcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFZGbG9hdDY0IGV4dGVuZHMgQmFzZVZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLyoqXG4gICAgICogVGhlIGtpbmQgb2YgdmFsaWRhdG9yLCBgXCJmbG9hdDY0XCJgLlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJraW5kXCIsIFwiZmxvYXQ2NFwiKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiB7IHR5cGU6IFwibnVtYmVyXCIgfTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGFzT3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBWRmxvYXQ2NCh7XG4gICAgICBpc09wdGlvbmFsOiBcIm9wdGlvbmFsXCJcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFZJbnQ2NCBleHRlbmRzIEJhc2VWYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFRoZSBraW5kIG9mIHZhbGlkYXRvciwgYFwiaW50NjRcImAuXG4gICAgICovXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImtpbmRcIiwgXCJpbnQ2NFwiKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiB7IHR5cGU6IFwiYmlnaW50XCIgfTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGFzT3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBWSW50NjQoeyBpc09wdGlvbmFsOiBcIm9wdGlvbmFsXCIgfSk7XG4gIH1cbn1cbmV4cG9ydCBjbGFzcyBWQm9vbGVhbiBleHRlbmRzIEJhc2VWYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFRoZSBraW5kIG9mIHZhbGlkYXRvciwgYFwiYm9vbGVhblwiYC5cbiAgICAgKi9cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwia2luZFwiLCBcImJvb2xlYW5cIik7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBnZXQganNvbigpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0aGlzLmtpbmQgfTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGFzT3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBWQm9vbGVhbih7XG4gICAgICBpc09wdGlvbmFsOiBcIm9wdGlvbmFsXCJcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFZCeXRlcyBleHRlbmRzIEJhc2VWYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFRoZSBraW5kIG9mIHZhbGlkYXRvciwgYFwiYnl0ZXNcImAuXG4gICAgICovXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImtpbmRcIiwgXCJieXRlc1wiKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiB7IHR5cGU6IHRoaXMua2luZCB9O1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXNPcHRpb25hbCgpIHtcbiAgICByZXR1cm4gbmV3IFZCeXRlcyh7IGlzT3B0aW9uYWw6IFwib3B0aW9uYWxcIiB9KTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFZTdHJpbmcgZXh0ZW5kcyBCYXNlVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAvKipcbiAgICAgKiBUaGUga2luZCBvZiB2YWxpZGF0b3IsIGBcInN0cmluZ1wiYC5cbiAgICAgKi9cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwia2luZFwiLCBcInN0cmluZ1wiKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiB7IHR5cGU6IHRoaXMua2luZCB9O1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXNPcHRpb25hbCgpIHtcbiAgICByZXR1cm4gbmV3IFZTdHJpbmcoe1xuICAgICAgaXNPcHRpb25hbDogXCJvcHRpb25hbFwiXG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCBjbGFzcyBWTnVsbCBleHRlbmRzIEJhc2VWYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKlxuICAgICAqIFRoZSBraW5kIG9mIHZhbGlkYXRvciwgYFwibnVsbFwiYC5cbiAgICAgKi9cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwia2luZFwiLCBcIm51bGxcIik7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBnZXQganNvbigpIHtcbiAgICByZXR1cm4geyB0eXBlOiB0aGlzLmtpbmQgfTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGFzT3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBWTnVsbCh7IGlzT3B0aW9uYWw6IFwib3B0aW9uYWxcIiB9KTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFZBbnkgZXh0ZW5kcyBCYXNlVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAvKipcbiAgICAgKiBUaGUga2luZCBvZiB2YWxpZGF0b3IsIGBcImFueVwiYC5cbiAgICAgKi9cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwia2luZFwiLCBcImFueVwiKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLmtpbmRcbiAgICB9O1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXNPcHRpb25hbCgpIHtcbiAgICByZXR1cm4gbmV3IFZBbnkoe1xuICAgICAgaXNPcHRpb25hbDogXCJvcHRpb25hbFwiXG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCBjbGFzcyBWT2JqZWN0IGV4dGVuZHMgQmFzZVZhbGlkYXRvciB7XG4gIC8qKlxuICAgKiBVc3VhbGx5IHlvdSdkIHVzZSBgdi5vYmplY3QoeyAuLi4gfSlgIGluc3RlYWQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgaXNPcHRpb25hbCxcbiAgICBmaWVsZHNcbiAgfSkge1xuICAgIHN1cGVyKHsgaXNPcHRpb25hbCB9KTtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3Qgd2l0aCB0aGUgdmFsaWRhdG9yIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmaWVsZHNcIik7XG4gICAgLyoqXG4gICAgICogVGhlIGtpbmQgb2YgdmFsaWRhdG9yLCBgXCJvYmplY3RcImAuXG4gICAgICovXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImtpbmRcIiwgXCJvYmplY3RcIik7XG4gICAgZ2xvYmFsVGhpcy5PYmplY3QudmFsdWVzKGZpZWxkcykuZm9yRWFjaCgodikgPT4ge1xuICAgICAgaWYgKCF2LmlzQ29udmV4VmFsaWRhdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInYub2JqZWN0KCkgZW50cmllcyBtdXN0IGJlIHZhbGlhdG9yc1wiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmZpZWxkcyA9IGZpZWxkcztcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLmtpbmQsXG4gICAgICB2YWx1ZTogZ2xvYmFsVGhpcy5PYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIGdsb2JhbFRoaXMuT2JqZWN0LmVudHJpZXModGhpcy5maWVsZHMpLm1hcCgoW2ssIHZdKSA9PiBbXG4gICAgICAgICAgayxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmaWVsZFR5cGU6IHYuanNvbixcbiAgICAgICAgICAgIG9wdGlvbmFsOiB2LmlzT3B0aW9uYWwgPT09IFwib3B0aW9uYWxcIiA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgXSlcbiAgICAgIClcbiAgICB9O1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXNPcHRpb25hbCgpIHtcbiAgICByZXR1cm4gbmV3IFZPYmplY3Qoe1xuICAgICAgaXNPcHRpb25hbDogXCJvcHRpb25hbFwiLFxuICAgICAgZmllbGRzOiB0aGlzLmZpZWxkc1xuICAgIH0pO1xuICB9XG59XG5leHBvcnQgY2xhc3MgVkxpdGVyYWwgZXh0ZW5kcyBCYXNlVmFsaWRhdG9yIHtcbiAgLyoqXG4gICAqIFVzdWFsbHkgeW91J2QgdXNlIGB2LmxpdGVyYWwodmFsdWUpYCBpbnN0ZWFkLlxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBpc09wdGlvbmFsLCB2YWx1ZSB9KSB7XG4gICAgc3VwZXIoeyBpc09wdGlvbmFsIH0pO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSB0aGF0IHRoZSB2YWxpZGF0ZWQgdmFsdWVzIG11c3QgYmUgZXF1YWwgdG8uXG4gICAgICovXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInZhbHVlXCIpO1xuICAgIC8qKlxuICAgICAqIFRoZSBraW5kIG9mIHZhbGlkYXRvciwgYFwibGl0ZXJhbFwiYC5cbiAgICAgKi9cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwia2luZFwiLCBcImxpdGVyYWxcIik7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiYm9vbGVhblwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiYmlnaW50XCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInYubGl0ZXJhbCh2YWx1ZSkgbXVzdCBiZSBhIHN0cmluZywgbnVtYmVyLCBvciBib29sZWFuXCIpO1xuICAgIH1cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBnZXQganNvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdGhpcy5raW5kLFxuICAgICAgdmFsdWU6IGNvbnZleFRvSnNvbih0aGlzLnZhbHVlKVxuICAgIH07XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBhc09wdGlvbmFsKCkge1xuICAgIHJldHVybiBuZXcgVkxpdGVyYWwoe1xuICAgICAgaXNPcHRpb25hbDogXCJvcHRpb25hbFwiLFxuICAgICAgdmFsdWU6IHRoaXMudmFsdWVcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFZBcnJheSBleHRlbmRzIEJhc2VWYWxpZGF0b3Ige1xuICAvKipcbiAgICogVXN1YWxseSB5b3UnZCB1c2UgYHYuYXJyYXkoZWxlbWVudClgIGluc3RlYWQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgaXNPcHRpb25hbCxcbiAgICBlbGVtZW50XG4gIH0pIHtcbiAgICBzdXBlcih7IGlzT3B0aW9uYWwgfSk7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbGlkYXRvciBmb3IgdGhlIGVsZW1lbnRzIG9mIHRoZSBhcnJheS5cbiAgICAgKi9cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZWxlbWVudFwiKTtcbiAgICAvKipcbiAgICAgKiBUaGUga2luZCBvZiB2YWxpZGF0b3IsIGBcImFycmF5XCJgLlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJraW5kXCIsIFwiYXJyYXlcIik7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLmtpbmQsXG4gICAgICB2YWx1ZTogdGhpcy5lbGVtZW50Lmpzb25cbiAgICB9O1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXNPcHRpb25hbCgpIHtcbiAgICByZXR1cm4gbmV3IFZBcnJheSh7XG4gICAgICBpc09wdGlvbmFsOiBcIm9wdGlvbmFsXCIsXG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFZSZWNvcmQgZXh0ZW5kcyBCYXNlVmFsaWRhdG9yIHtcbiAgLyoqXG4gICAqIFVzdWFsbHkgeW91J2QgdXNlIGB2LnJlY29yZChrZXksIHZhbHVlKWAgaW5zdGVhZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBpc09wdGlvbmFsLFxuICAgIGtleSxcbiAgICB2YWx1ZVxuICB9KSB7XG4gICAgc3VwZXIoeyBpc09wdGlvbmFsIH0pO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWxpZGF0b3IgZm9yIHRoZSBrZXlzIG9mIHRoZSByZWNvcmQuXG4gICAgICovXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImtleVwiKTtcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsaWRhdG9yIGZvciB0aGUgdmFsdWVzIG9mIHRoZSByZWNvcmQuXG4gICAgICovXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInZhbHVlXCIpO1xuICAgIC8qKlxuICAgICAqIFRoZSBraW5kIG9mIHZhbGlkYXRvciwgYFwicmVjb3JkXCJgLlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJraW5kXCIsIFwicmVjb3JkXCIpO1xuICAgIGlmIChrZXkuaXNPcHRpb25hbCA9PT0gXCJvcHRpb25hbFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWNvcmQgdmFsaWRhdG9yIGNhbm5vdCBoYXZlIG9wdGlvbmFsIGtleXNcIik7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5pc09wdGlvbmFsID09PSBcIm9wdGlvbmFsXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlY29yZCB2YWxpZGF0b3IgY2Fubm90IGhhdmUgb3B0aW9uYWwgdmFsdWVzXCIpO1xuICAgIH1cbiAgICBpZiAoIWtleS5pc0NvbnZleFZhbGlkYXRvciB8fCAhdmFsdWUuaXNDb252ZXhWYWxpZGF0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIktleSBhbmQgdmFsdWUgb2Ygdi5yZWNvcmQoKSBidXQgYmUgdmFsaWRhdG9yc1wiKTtcbiAgICB9XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgZ2V0IGpzb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHRoaXMua2luZCxcbiAgICAgIC8vIFRoaXMgY2FzdCBpcyBuZWVkZWQgYmVjYXVzZSBUeXBlU2NyaXB0IHRoaW5rcyB0aGUga2V5IHR5cGUgaXMgdG9vIHdpZGVcbiAgICAgIGtleXM6IHRoaXMua2V5Lmpzb24sXG4gICAgICB2YWx1ZXM6IHtcbiAgICAgICAgZmllbGRUeXBlOiB0aGlzLnZhbHVlLmpzb24sXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBhc09wdGlvbmFsKCkge1xuICAgIHJldHVybiBuZXcgVlJlY29yZCh7XG4gICAgICBpc09wdGlvbmFsOiBcIm9wdGlvbmFsXCIsXG4gICAgICBrZXk6IHRoaXMua2V5LFxuICAgICAgdmFsdWU6IHRoaXMudmFsdWVcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIFZVbmlvbiBleHRlbmRzIEJhc2VWYWxpZGF0b3Ige1xuICAvKipcbiAgICogVXN1YWxseSB5b3UnZCB1c2UgYHYudW5pb24oLi4ubWVtYmVycylgIGluc3RlYWQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGlzT3B0aW9uYWwsIG1lbWJlcnMgfSkge1xuICAgIHN1cGVyKHsgaXNPcHRpb25hbCB9KTtcbiAgICAvKipcbiAgICAgKiBUaGUgYXJyYXkgb2YgdmFsaWRhdG9ycywgb25lIG9mIHdoaWNoIG11c3QgbWF0Y2ggdGhlIHZhbHVlLlxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtZW1iZXJzXCIpO1xuICAgIC8qKlxuICAgICAqIFRoZSBraW5kIG9mIHZhbGlkYXRvciwgYFwidW5pb25cImAuXG4gICAgICovXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImtpbmRcIiwgXCJ1bmlvblwiKTtcbiAgICBtZW1iZXJzLmZvckVhY2goKG1lbWJlcikgPT4ge1xuICAgICAgaWYgKCFtZW1iZXIuaXNDb252ZXhWYWxpZGF0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWxsIG1lbWJlcnMgb2Ygdi51bmlvbigpIG11c3QgYmUgdmFsaWRhdG9yc1wiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm1lbWJlcnMgPSBtZW1iZXJzO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgZ2V0IGpzb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHRoaXMua2luZCxcbiAgICAgIHZhbHVlOiB0aGlzLm1lbWJlcnMubWFwKCh2KSA9PiB2Lmpzb24pXG4gICAgfTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGFzT3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBWVW5pb24oe1xuICAgICAgaXNPcHRpb25hbDogXCJvcHRpb25hbFwiLFxuICAgICAgbWVtYmVyczogdGhpcy5tZW1iZXJzXG4gICAgfSk7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRvcnMuanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJjb252ZXhUb0pzb24iLCJCYXNlVmFsaWRhdG9yIiwiY29uc3RydWN0b3IiLCJpc09wdGlvbmFsIiwiaXNDb252ZXhWYWxpZGF0b3IiLCJvcHRpb25hbCIsIlZJZCIsInRhYmxlTmFtZSIsIkVycm9yIiwianNvbiIsInR5cGUiLCJhc09wdGlvbmFsIiwiVkZsb2F0NjQiLCJhcmd1bWVudHMiLCJWSW50NjQiLCJWQm9vbGVhbiIsImtpbmQiLCJWQnl0ZXMiLCJWU3RyaW5nIiwiVk51bGwiLCJWQW55IiwiVk9iamVjdCIsImZpZWxkcyIsImdsb2JhbFRoaXMiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwidiIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsIm1hcCIsImsiLCJmaWVsZFR5cGUiLCJWTGl0ZXJhbCIsIlZBcnJheSIsImVsZW1lbnQiLCJWUmVjb3JkIiwia2V5cyIsIlZVbmlvbiIsIm1lbWJlcnMiLCJtZW1iZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/validators.js\n'
      );

      /***/
    },

  /***/ '(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js':
    /*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js ***!
  \********************************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToBigInt: () => (/* binding */ base64ToBigInt),\n/* harmony export */   bigIntToBase64: () => (/* binding */ bigIntToBase64),\n/* harmony export */   convexOrUndefinedToJson: () => (/* binding */ convexOrUndefinedToJson),\n/* harmony export */   convexToJson: () => (/* binding */ convexToJson),\n/* harmony export */   jsonToConvex: () => (/* binding */ jsonToConvex),\n/* harmony export */   modernBase64ToBigInt: () => (/* binding */ modernBase64ToBigInt),\n/* harmony export */   modernBigIntToBase64: () => (/* binding */ modernBigIntToBase64),\n/* harmony export */   patchValueToJson: () => (/* binding */ patchValueToJson),\n/* harmony export */   slowBase64ToBigInt: () => (/* binding */ slowBase64ToBigInt),\n/* harmony export */   slowBigIntToBase64: () => (/* binding */ slowBigIntToBase64),\n/* harmony export */   stringifyValueForError: () => (/* binding */ stringifyValueForError)\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/base64.js");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ "(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/common/index.js");\n\n\n\nconst LITTLE_ENDIAN = true;\nconst MIN_INT64 = BigInt("-9223372036854775808");\nconst MAX_INT64 = BigInt("9223372036854775807");\nconst ZERO = BigInt("0");\nconst EIGHT = BigInt("8");\nconst TWOFIFTYSIX = BigInt("256");\nfunction isSpecial(n) {\n    return Number.isNaN(n) || !Number.isFinite(n) || Object.is(n, -0);\n}\nfunction slowBigIntToBase64(value) {\n    if (value < ZERO) {\n        value -= MIN_INT64 + MIN_INT64;\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2 === 1) hex = "0" + hex;\n    const bytes = new Uint8Array(new ArrayBuffer(8));\n    let i = 0;\n    for (const hexByte of hex.match(/.{2}/g).reverse()){\n        bytes.set([\n            parseInt(hexByte, 16)\n        ], i++);\n        value >>= EIGHT;\n    }\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(bytes);\n}\nfunction slowBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(`Received ${integerBytes.byteLength} bytes, expected 8 for $integer`);\n    }\n    let value = ZERO;\n    let power = ZERO;\n    for (const byte of integerBytes){\n        value += BigInt(byte) * TWOFIFTYSIX ** power;\n        power++;\n    }\n    if (value > MAX_INT64) {\n        value += MIN_INT64 + MIN_INT64;\n    }\n    return value;\n}\nfunction modernBigIntToBase64(value) {\n    if (value < MIN_INT64 || MAX_INT64 < value) {\n        throw new Error(`BigInt ${value} does not fit into a 64-bit signed integer.`);\n    }\n    const buffer = new ArrayBuffer(8);\n    new DataView(buffer).setBigInt64(0, value, true);\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer));\n}\nfunction modernBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(`Received ${integerBytes.byteLength} bytes, expected 8 for $integer`);\n    }\n    const intBytesView = new DataView(integerBytes.buffer);\n    return intBytesView.getBigInt64(0, true);\n}\nconst bigIntToBase64 = DataView.prototype.setBigInt64 ? modernBigIntToBase64 : slowBigIntToBase64;\nconst base64ToBigInt = DataView.prototype.getBigInt64 ? modernBase64ToBigInt : slowBase64ToBigInt;\nconst MAX_IDENTIFIER_LEN = 1024;\nfunction validateObjectField(k) {\n    if (k.length > MAX_IDENTIFIER_LEN) {\n        throw new Error(`Field name ${k} exceeds maximum field name length ${MAX_IDENTIFIER_LEN}.`);\n    }\n    if (k.startsWith("$")) {\n        throw new Error(`Field name ${k} starts with a \'$\', which is reserved.`);\n    }\n    for(let i = 0; i < k.length; i += 1){\n        const charCode = k.charCodeAt(i);\n        if (charCode < 32 || charCode >= 127) {\n            throw new Error(`Field name ${k} has invalid character \'${k[i]}\': Field names can only contain non-control ASCII characters`);\n        }\n    }\n}\nfunction jsonToConvex(value) {\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === "boolean") {\n        return value;\n    }\n    if (typeof value === "number") {\n        return value;\n    }\n    if (typeof value === "string") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2)=>jsonToConvex(value2));\n    }\n    if (typeof value !== "object") {\n        throw new Error(`Unexpected type of ${value}`);\n    }\n    const entries = Object.entries(value);\n    if (entries.length === 1) {\n        const key = entries[0][0];\n        if (key === "$bytes") {\n            if (typeof value.$bytes !== "string") {\n                throw new Error(`Malformed $bytes field on ${value}`);\n            }\n            return _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$bytes).buffer;\n        }\n        if (key === "$integer") {\n            if (typeof value.$integer !== "string") {\n                throw new Error(`Malformed $integer field on ${value}`);\n            }\n            return base64ToBigInt(value.$integer);\n        }\n        if (key === "$float") {\n            if (typeof value.$float !== "string") {\n                throw new Error(`Malformed $float field on ${value}`);\n            }\n            const floatBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$float);\n            if (floatBytes.byteLength !== 8) {\n                throw new Error(`Received ${floatBytes.byteLength} bytes, expected 8 for $float`);\n            }\n            const floatBytesView = new DataView(floatBytes.buffer);\n            const float = floatBytesView.getFloat64(0, LITTLE_ENDIAN);\n            if (!isSpecial(float)) {\n                throw new Error(`Float ${float} should be encoded as a number`);\n            }\n            return float;\n        }\n        if (key === "$set") {\n            throw new Error(`Received a Set which is no longer supported as a Convex type.`);\n        }\n        if (key === "$map") {\n            throw new Error(`Received a Map which is no longer supported as a Convex type.`);\n        }\n    }\n    const out = {};\n    for (const [k, v] of Object.entries(value)){\n        validateObjectField(k);\n        out[k] = jsonToConvex(v);\n    }\n    return out;\n}\nfunction stringifyValueForError(value) {\n    return JSON.stringify(value, (_key, value2)=>{\n        if (value2 === void 0) {\n            return "undefined";\n        }\n        if (typeof value2 === "bigint") {\n            return `${value2.toString()}n`;\n        }\n        return value2;\n    });\n}\nfunction convexToJsonInternal(value, originalValue, context, includeTopLevelUndefined) {\n    if (value === void 0) {\n        const contextText = context && ` (present at path ${context} in original object ${stringifyValueForError(originalValue)})`;\n        throw new Error(`undefined is not a valid Convex value${contextText}. To learn about Convex\'s supported types, see https://docs.convex.dev/using/types.`);\n    }\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === "bigint") {\n        if (value < MIN_INT64 || MAX_INT64 < value) {\n            throw new Error(`BigInt ${value} does not fit into a 64-bit signed integer.`);\n        }\n        return {\n            $integer: bigIntToBase64(value)\n        };\n    }\n    if (typeof value === "number") {\n        if (isSpecial(value)) {\n            const buffer = new ArrayBuffer(8);\n            new DataView(buffer).setFloat64(0, value, LITTLE_ENDIAN);\n            return {\n                $float: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer))\n            };\n        } else {\n            return value;\n        }\n    }\n    if (typeof value === "boolean") {\n        return value;\n    }\n    if (typeof value === "string") {\n        return value;\n    }\n    if (value instanceof ArrayBuffer) {\n        return {\n            $bytes: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(value))\n        };\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2, i)=>convexToJsonInternal(value2, originalValue, context + `[${i}]`, false));\n    }\n    if (value instanceof Set) {\n        throw new Error(errorMessageForUnsupportedType(context, "Set", [\n            ...value\n        ], originalValue));\n    }\n    if (value instanceof Map) {\n        throw new Error(errorMessageForUnsupportedType(context, "Map", [\n            ...value\n        ], originalValue));\n    }\n    if (!(0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.isSimpleObject)(value)) {\n        const theType = value?.constructor?.name;\n        const typeName = theType ? `${theType} ` : "";\n        throw new Error(errorMessageForUnsupportedType(context, typeName, value, originalValue));\n    }\n    const out = {};\n    const entries = Object.entries(value);\n    entries.sort(([k1, _v1], [k2, _v2])=>k1 === k2 ? 0 : k1 < k2 ? -1 : 1);\n    for (const [k, v] of entries){\n        if (v !== void 0) {\n            validateObjectField(k);\n            out[k] = convexToJsonInternal(v, originalValue, context + `.${k}`, false);\n        } else if (includeTopLevelUndefined) {\n            validateObjectField(k);\n            out[k] = convexOrUndefinedToJsonInternal(v, originalValue, context + `.${k}`);\n        }\n    }\n    return out;\n}\nfunction errorMessageForUnsupportedType(context, typeName, value, originalValue) {\n    if (context) {\n        return `${typeName}${stringifyValueForError(value)} is not a supported Convex type (present at path ${context} in original object ${stringifyValueForError(originalValue)}). To learn about Convex\'s supported types, see https://docs.convex.dev/using/types.`;\n    } else {\n        return `${typeName}${stringifyValueForError(value)} is not a supported Convex type.`;\n    }\n}\nfunction convexOrUndefinedToJsonInternal(value, originalValue, context) {\n    if (value === void 0) {\n        return {\n            $undefined: null\n        };\n    } else {\n        if (originalValue === void 0) {\n            throw new Error(`Programming error. Current value is ${stringifyValueForError(value)} but original value is undefined`);\n        }\n        return convexToJsonInternal(value, originalValue, context, false);\n    }\n}\nfunction convexToJson(value) {\n    return convexToJsonInternal(value, value, "", false);\n}\nfunction convexOrUndefinedToJson(value) {\n    return convexOrUndefinedToJsonInternal(value, value, "");\n}\nfunction patchValueToJson(value) {\n    return convexToJsonInternal(value, value, "", true);\n} //# sourceMappingURL=value.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/convex@1.27.1_react@18.3.1/node_modules/convex/dist/esm/values/value.js\n'
      );

      /***/
    },
};
